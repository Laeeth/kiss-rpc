// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: test.capnp

#ifndef CAPNP_INCLUDED_d6eccba9557a7f51_
#define CAPNP_INCLUDED_d6eccba9557a7f51_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(fec9621807ad4d1b);
enum class TestEnum_fec9621807ad4d1b: uint16_t {
  Foo,
  Bar,
  Baz,
  Qux,
  Quux,
  Corge,
  Grault,
  Garply,
};
CAPNP_DECLARE_ENUM(TestEnum, fec9621807ad4d1b);
CAPNP_DECLARE_SCHEMA(a0af4a1714b100a7);
CAPNP_DECLARE_SCHEMA(e37a20a013e0cd99);
CAPNP_DECLARE_SCHEMA(89dcbc901a007c27);
CAPNP_DECLARE_SCHEMA(d492da5e899de702);
CAPNP_DECLARE_SCHEMA(f4c75879897a4674);
CAPNP_DECLARE_SCHEMA(c2098016fb4f772f);
CAPNP_DECLARE_SCHEMA(a91c8fae7bf5912a);
CAPNP_DECLARE_SCHEMA(8b7ba352e35be374);
CAPNP_DECLARE_SCHEMA(e993feac68e07d4b);
CAPNP_DECLARE_SCHEMA(c90975a7a55e7035);
CAPNP_DECLARE_SCHEMA(f5ec4eeb10a9b5b9);
CAPNP_DECLARE_SCHEMA(825b5bc4f413a10a);
CAPNP_DECLARE_SCHEMA(c17a3bbbd9ab0fd9);
CAPNP_DECLARE_SCHEMA(957c00519cee2623);
CAPNP_DECLARE_SCHEMA(e7fb063c7e1b4fb0);
CAPNP_DECLARE_SCHEMA(d069506977966b17);
CAPNP_DECLARE_SCHEMA(d6113467e78b7e79);
CAPNP_DECLARE_SCHEMA(e43a69813db3e93c);
CAPNP_DECLARE_SCHEMA(9811fa9e38138195);
CAPNP_DECLARE_SCHEMA(a62039b30d25f77b);
CAPNP_DECLARE_SCHEMA(8b8a6a16d3fd5942);
CAPNP_DECLARE_SCHEMA(ead976f43dfb5108);
CAPNP_DECLARE_SCHEMA(ea9107bdcaba0567);
CAPNP_DECLARE_SCHEMA(a52722f9b4100566);
CAPNP_DECLARE_SCHEMA(e6153e6d09acefbb);
CAPNP_DECLARE_SCHEMA(94a5f8e813fdaadf);
CAPNP_DECLARE_SCHEMA(f82e3063d71e45f4);
CAPNP_DECLARE_SCHEMA(d3fe4b4db930c4e3);
CAPNP_DECLARE_SCHEMA(a77dbf621f860022);
CAPNP_DECLARE_SCHEMA(80550b0c102a9204);
CAPNP_DECLARE_SCHEMA(b780846710da43b3);
CAPNP_DECLARE_SCHEMA(b8891e9f3d7630e0);
CAPNP_DECLARE_SCHEMA(b32d3ef2e630cc9e);
CAPNP_DECLARE_SCHEMA(b53d8ab25fb37432);
CAPNP_DECLARE_SCHEMA(b7ac6330b5b1b391);
CAPNP_DECLARE_SCHEMA(b920a5d19b2fd8db);
CAPNP_DECLARE_SCHEMA(f0e4457e7c8a3afa);
CAPNP_DECLARE_SCHEMA(e055125671a5f056);
CAPNP_DECLARE_SCHEMA(d1ec544e356e99fd);
CAPNP_DECLARE_SCHEMA(82ebb0222244f631);
CAPNP_DECLARE_SCHEMA(b91e3132e9c188b4);
CAPNP_DECLARE_SCHEMA(9bb77fc9017eed97);
CAPNP_DECLARE_SCHEMA(d0e124839cb74e9e);
CAPNP_DECLARE_SCHEMA(c98331e4d9e02439);
CAPNP_DECLARE_SCHEMA(bb65ad5cc2772ea0);
CAPNP_DECLARE_SCHEMA(f839380c445a2a38);
CAPNP_DECLARE_SCHEMA(bda06dadd6b4ec5d);
CAPNP_DECLARE_SCHEMA(cdb4a013b62de763);
CAPNP_DECLARE_SCHEMA(c74fe94d9d450839);
CAPNP_DECLARE_SCHEMA(cac0f479641218ca);
CAPNP_DECLARE_SCHEMA(905bbc9454d4886d);
CAPNP_DECLARE_SCHEMA(d5ef2586b1b65945);
CAPNP_DECLARE_SCHEMA(8f532da7b97bd4e1);
CAPNP_DECLARE_SCHEMA(993886f4a4f9c5b0);
CAPNP_DECLARE_SCHEMA(d48d191e3558fa40);
CAPNP_DECLARE_SCHEMA(f22a1ce11a118f67);
CAPNP_DECLARE_SCHEMA(d3cc6926f91b6aa2);
CAPNP_DECLARE_SCHEMA(97f89dc7ef95ff2a);
CAPNP_DECLARE_SCHEMA(eedf404e6d888363);
CAPNP_DECLARE_SCHEMA(db62d00e4ee0139e);
CAPNP_DECLARE_SCHEMA(810e6d9223a601eb);
CAPNP_DECLARE_SCHEMA(98a7f62c2cd81ca4);
CAPNP_DECLARE_SCHEMA(a855dfc33557b545);
CAPNP_DECLARE_SCHEMA(ea7a412cb73aeaf9);
CAPNP_DECLARE_SCHEMA(9c62a28ea479f4d6);
CAPNP_DECLARE_SCHEMA(ba6411c2fa3b0647);
CAPNP_DECLARE_SCHEMA(dfe97451a88a9a9f);
CAPNP_DECLARE_SCHEMA(f5a94c7841e8f5c0);
CAPNP_DECLARE_SCHEMA(ec8636a9fa084372);
CAPNP_DECLARE_SCHEMA(82df939abbe32952);
CAPNP_DECLARE_SCHEMA(8b96d4ad472f653c);
CAPNP_DECLARE_SCHEMA(bd1464b64f4fcf4b);
CAPNP_DECLARE_SCHEMA(adb4e0015b76502a);
CAPNP_DECLARE_SCHEMA(88dfca8a4ba6b3cb);
CAPNP_DECLARE_SCHEMA(b7be855ba17af79f);
CAPNP_DECLARE_SCHEMA(b065cee96e9fe413);

}  // namespace schemas
}  // namespace capnp


typedef ::capnp::schemas::TestEnum_fec9621807ad4d1b TestEnum;

struct TestAllTypes {
  TestAllTypes() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a0af4a1714b100a7, 6, 19)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestDefaults {
  TestDefaults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e37a20a013e0cd99, 6, 20)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestAnyPointer {
  TestAnyPointer() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(89dcbc901a007c27, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestOutOfOrder {
  TestOutOfOrder() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d492da5e899de702, 0, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestUnion {
  TestUnion() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Union0;
  struct Union1;
  struct Union2;
  struct Union3;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f4c75879897a4674, 8, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestUnion::Union0 {
  Union0() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    U0f0s0,
    U0f0s1,
    U0f0s8,
    U0f0s16,
    U0f0s32,
    U0f0s64,
    U0f0sp,
    U0f1s0,
    U0f1s1,
    U0f1s8,
    U0f1s16,
    U0f1s32,
    U0f1s64,
    U0f1sp,
    PrimitiveList,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c2098016fb4f772f, 8, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestUnion::Union1 {
  Union1() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    U1f0s0,
    U1f0s1,
    U1f1s1,
    U1f0s8,
    U1f1s8,
    U1f0s16,
    U1f1s16,
    U1f0s32,
    U1f1s32,
    U1f0s64,
    U1f1s64,
    U1f0sp,
    U1f1sp,
    U1f2s0,
    U1f2s1,
    U1f2s8,
    U1f2s16,
    U1f2s32,
    U1f2s64,
    U1f2sp,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a91c8fae7bf5912a, 8, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestUnion::Union2 {
  Union2() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    U2f0s1,
    U2f0s8,
    U2f0s16,
    U2f0s32,
    U2f0s64,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8b7ba352e35be374, 8, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestUnion::Union3 {
  Union3() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    U3f0s1,
    U3f0s8,
    U3f0s16,
    U3f0s32,
    U3f0s64,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e993feac68e07d4b, 8, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestGroups {
  TestGroups() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Groups;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c90975a7a55e7035, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestGroups::Groups {
  Groups() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    Foo,
    Baz,
    Bar,
  };
  struct Foo;
  struct Baz;
  struct Bar;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f5ec4eeb10a9b5b9, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestGroups::Groups::Foo {
  Foo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(825b5bc4f413a10a, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestGroups::Groups::Baz {
  Baz() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c17a3bbbd9ab0fd9, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestGroups::Groups::Bar {
  Bar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(957c00519cee2623, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestLists {
  TestLists() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Struct0;
  struct Struct1;
  struct Struct8;
  struct Struct16;
  struct Struct32;
  struct Struct64;
  struct StructP;
  struct Struct0c;
  struct Struct1c;
  struct Struct8c;
  struct Struct16c;
  struct Struct32c;
  struct Struct64c;
  struct StructPc;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e7fb063c7e1b4fb0, 0, 12)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestLists::Struct0 {
  Struct0() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d069506977966b17, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestLists::Struct1 {
  Struct1() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d6113467e78b7e79, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestLists::Struct8 {
  Struct8() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e43a69813db3e93c, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestLists::Struct16 {
  Struct16() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9811fa9e38138195, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestLists::Struct32 {
  Struct32() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a62039b30d25f77b, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestLists::Struct64 {
  Struct64() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8b8a6a16d3fd5942, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestLists::StructP {
  StructP() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ead976f43dfb5108, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestLists::Struct0c {
  Struct0c() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea9107bdcaba0567, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestLists::Struct1c {
  Struct1c() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a52722f9b4100566, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestLists::Struct8c {
  Struct8c() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e6153e6d09acefbb, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestLists::Struct16c {
  Struct16c() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(94a5f8e813fdaadf, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestLists::Struct32c {
  Struct32c() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f82e3063d71e45f4, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestLists::Struct64c {
  Struct64c() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d3fe4b4db930c4e3, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestLists::StructPc {
  StructPc() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a77dbf621f860022, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestFieldZeroIsBit {
  TestFieldZeroIsBit() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(80550b0c102a9204, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestOldVersion {
  TestOldVersion() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b780846710da43b3, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestNewVersion {
  TestNewVersion() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b8891e9f3d7630e0, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

template <typename Foo = ::capnp::AnyPointer, typename Bar = ::capnp::AnyPointer>
struct TestGenerics {
  TestGenerics() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Inner;
  template <typename Baz = ::capnp::AnyPointer>
  struct Inner2;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b32d3ef2e630cc9e, 0, 4)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, Foo, Bar>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename Foo, typename Bar>
struct TestGenerics<Foo, Bar>::Inner {
  Inner() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b53d8ab25fb37432, 0, 2)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, Foo, Bar>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename Foo, typename Bar>
template <typename Baz>
struct TestGenerics<Foo, Bar>::Inner2 {
  Inner2() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  template <typename Qux = ::capnp::AnyPointer>
  struct DeepNest;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b7ac6330b5b1b391, 0, 4)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, Foo, Bar, Baz>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
struct TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest {
  DeepNest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b920a5d19b2fd8db, 0, 4)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, Foo, Bar, Baz, Qux>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename Foo = ::capnp::AnyPointer, typename Bar = ::capnp::AnyPointer>
struct TestGenericsWrapper {
  TestGenericsWrapper() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f0e4457e7c8a3afa, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, Foo, Bar>::brand;
    #endif  // !CAPNP_LITE
  };
};

struct TestGenericsWrapper2 {
  TestGenericsWrapper2() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e055125671a5f056, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestUseGenerics {
  TestUseGenerics() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d1ec544e356e99fd, 0, 12)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

template <typename K = ::capnp::AnyPointer, typename V = ::capnp::AnyPointer>
struct GenericMap {
  GenericMap() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Entry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(82ebb0222244f631, 0, 4)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, K, V>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename K, typename V>
struct GenericMap<K, V>::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b91e3132e9c188b4, 0, 2)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, K, V>::brand;
    #endif  // !CAPNP_LITE
  };
};

struct TestEmptyStruct {
  TestEmptyStruct() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9bb77fc9017eed97, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TestConstants {
  TestConstants() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  static KJ_CONSTEXPR(const)  ::capnp::Void VOID_CONST CAPNP_NON_INT_CONSTEXPR_DECL_INIT( ::capnp::VOID);
  static constexpr bool BOOL_CONST = true;
  static constexpr  ::int8_t INT8_CONST = -123;
  static constexpr  ::int16_t INT16_CONST = -12345;
  static constexpr  ::int32_t INT32_CONST = -12345678;
  static constexpr  ::int64_t INT64_CONST = -123456789012345ll;
  static constexpr  ::uint8_t UINT8_CONST = 234u;
  static constexpr  ::uint16_t UINT16_CONST = 45678u;
  static constexpr  ::uint32_t UINT32_CONST = 3456789012u;
  static constexpr  ::uint64_t UINT64_CONST = 12345678901234567890llu;
  static KJ_CONSTEXPR(const) float FLOAT32_CONST CAPNP_NON_INT_CONSTEXPR_DECL_INIT(1234.5f);
  static KJ_CONSTEXPR(const) double FLOAT64_CONST CAPNP_NON_INT_CONSTEXPR_DECL_INIT(-1.23e47);
  static const ::capnp::_::ConstText<3> TEXT_CONST;
  static const ::capnp::_::ConstData<3> DATA_CONST;
  static const ::capnp::_::ConstStruct< ::TestAllTypes> STRUCT_CONST;
  static constexpr  ::TestEnum ENUM_CONST =  ::TestEnum::Corge;
  static const ::capnp::_::ConstList< ::capnp::Void> VOID_LIST_CONST;
  static const ::capnp::_::ConstList<bool> BOOL_LIST_CONST;
  static const ::capnp::_::ConstList< ::int8_t> INT8_LIST_CONST;
  static const ::capnp::_::ConstList< ::int16_t> INT16_LIST_CONST;
  static const ::capnp::_::ConstList< ::int32_t> INT32_LIST_CONST;
  static const ::capnp::_::ConstList< ::int64_t> INT64_LIST_CONST;
  static const ::capnp::_::ConstList< ::uint8_t> UINT8_LIST_CONST;
  static const ::capnp::_::ConstList< ::uint16_t> UINT16_LIST_CONST;
  static const ::capnp::_::ConstList< ::uint32_t> UINT32_LIST_CONST;
  static const ::capnp::_::ConstList< ::uint64_t> UINT64_LIST_CONST;
  static const ::capnp::_::ConstList<float> FLOAT32_LIST_CONST;
  static const ::capnp::_::ConstList<double> FLOAT64_LIST_CONST;
  static const ::capnp::_::ConstList< ::capnp::Text> TEXT_LIST_CONST;
  static const ::capnp::_::ConstList< ::capnp::Data> DATA_LIST_CONST;
  static const ::capnp::_::ConstList< ::TestAllTypes> STRUCT_LIST_CONST;
  static const ::capnp::_::ConstList< ::TestEnum> ENUM_LIST_CONST;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d0e124839cb74e9e, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

static constexpr  ::uint32_t GLOBAL_INT = 12345u;
// =======================================================================================

class TestAllTypes::Reader {
public:
  typedef TestAllTypes Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getVoidField() const;

  inline bool getBoolField() const;

  inline  ::int8_t getInt8Field() const;

  inline  ::int16_t getInt16Field() const;

  inline  ::int32_t getInt32Field() const;

  inline  ::int64_t getInt64Field() const;

  inline  ::uint8_t getUInt8Field() const;

  inline  ::uint16_t getUInt16Field() const;

  inline  ::uint32_t getUInt32Field() const;

  inline  ::uint64_t getUInt64Field() const;

  inline float getFloat32Field() const;

  inline double getFloat64Field() const;

  inline bool hasTextField() const;
  inline  ::capnp::Text::Reader getTextField() const;

  inline bool hasDataField() const;
  inline  ::capnp::Data::Reader getDataField() const;

  inline bool hasStructField() const;
  inline  ::TestAllTypes::Reader getStructField() const;

  inline  ::TestEnum getEnumField() const;

  inline  ::capnp::Void getInterfaceField() const;

  inline bool hasVoidList() const;
  inline  ::capnp::List< ::capnp::Void>::Reader getVoidList() const;

  inline bool hasBoolList() const;
  inline  ::capnp::List<bool>::Reader getBoolList() const;

  inline bool hasInt8List() const;
  inline  ::capnp::List< ::int8_t>::Reader getInt8List() const;

  inline bool hasInt16List() const;
  inline  ::capnp::List< ::int16_t>::Reader getInt16List() const;

  inline bool hasInt32List() const;
  inline  ::capnp::List< ::int32_t>::Reader getInt32List() const;

  inline bool hasInt64List() const;
  inline  ::capnp::List< ::int64_t>::Reader getInt64List() const;

  inline bool hasUInt8List() const;
  inline  ::capnp::List< ::uint8_t>::Reader getUInt8List() const;

  inline bool hasUInt16List() const;
  inline  ::capnp::List< ::uint16_t>::Reader getUInt16List() const;

  inline bool hasUInt32List() const;
  inline  ::capnp::List< ::uint32_t>::Reader getUInt32List() const;

  inline bool hasUInt64List() const;
  inline  ::capnp::List< ::uint64_t>::Reader getUInt64List() const;

  inline bool hasFloat32List() const;
  inline  ::capnp::List<float>::Reader getFloat32List() const;

  inline bool hasFloat64List() const;
  inline  ::capnp::List<double>::Reader getFloat64List() const;

  inline bool hasTextList() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getTextList() const;

  inline bool hasDataList() const;
  inline  ::capnp::List< ::capnp::Data>::Reader getDataList() const;

  inline bool hasStructList() const;
  inline  ::capnp::List< ::TestAllTypes>::Reader getStructList() const;

  inline bool hasEnumList() const;
  inline  ::capnp::List< ::TestEnum>::Reader getEnumList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestAllTypes::Builder {
public:
  typedef TestAllTypes Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getVoidField();
  inline void setVoidField( ::capnp::Void value = ::capnp::VOID);

  inline bool getBoolField();
  inline void setBoolField(bool value);

  inline  ::int8_t getInt8Field();
  inline void setInt8Field( ::int8_t value);

  inline  ::int16_t getInt16Field();
  inline void setInt16Field( ::int16_t value);

  inline  ::int32_t getInt32Field();
  inline void setInt32Field( ::int32_t value);

  inline  ::int64_t getInt64Field();
  inline void setInt64Field( ::int64_t value);

  inline  ::uint8_t getUInt8Field();
  inline void setUInt8Field( ::uint8_t value);

  inline  ::uint16_t getUInt16Field();
  inline void setUInt16Field( ::uint16_t value);

  inline  ::uint32_t getUInt32Field();
  inline void setUInt32Field( ::uint32_t value);

  inline  ::uint64_t getUInt64Field();
  inline void setUInt64Field( ::uint64_t value);

  inline float getFloat32Field();
  inline void setFloat32Field(float value);

  inline double getFloat64Field();
  inline void setFloat64Field(double value);

  inline bool hasTextField();
  inline  ::capnp::Text::Builder getTextField();
  inline void setTextField( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTextField(unsigned int size);
  inline void adoptTextField(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTextField();

  inline bool hasDataField();
  inline  ::capnp::Data::Builder getDataField();
  inline void setDataField( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initDataField(unsigned int size);
  inline void adoptDataField(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownDataField();

  inline bool hasStructField();
  inline  ::TestAllTypes::Builder getStructField();
  inline void setStructField( ::TestAllTypes::Reader value);
  inline  ::TestAllTypes::Builder initStructField();
  inline void adoptStructField(::capnp::Orphan< ::TestAllTypes>&& value);
  inline ::capnp::Orphan< ::TestAllTypes> disownStructField();

  inline  ::TestEnum getEnumField();
  inline void setEnumField( ::TestEnum value);

  inline  ::capnp::Void getInterfaceField();
  inline void setInterfaceField( ::capnp::Void value = ::capnp::VOID);

  inline bool hasVoidList();
  inline  ::capnp::List< ::capnp::Void>::Builder getVoidList();
  inline void setVoidList( ::capnp::List< ::capnp::Void>::Reader value);
  inline void setVoidList(::kj::ArrayPtr<const  ::capnp::Void> value);
  inline  ::capnp::List< ::capnp::Void>::Builder initVoidList(unsigned int size);
  inline void adoptVoidList(::capnp::Orphan< ::capnp::List< ::capnp::Void>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Void>> disownVoidList();

  inline bool hasBoolList();
  inline  ::capnp::List<bool>::Builder getBoolList();
  inline void setBoolList( ::capnp::List<bool>::Reader value);
  inline void setBoolList(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initBoolList(unsigned int size);
  inline void adoptBoolList(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownBoolList();

  inline bool hasInt8List();
  inline  ::capnp::List< ::int8_t>::Builder getInt8List();
  inline void setInt8List( ::capnp::List< ::int8_t>::Reader value);
  inline void setInt8List(::kj::ArrayPtr<const  ::int8_t> value);
  inline  ::capnp::List< ::int8_t>::Builder initInt8List(unsigned int size);
  inline void adoptInt8List(::capnp::Orphan< ::capnp::List< ::int8_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int8_t>> disownInt8List();

  inline bool hasInt16List();
  inline  ::capnp::List< ::int16_t>::Builder getInt16List();
  inline void setInt16List( ::capnp::List< ::int16_t>::Reader value);
  inline void setInt16List(::kj::ArrayPtr<const  ::int16_t> value);
  inline  ::capnp::List< ::int16_t>::Builder initInt16List(unsigned int size);
  inline void adoptInt16List(::capnp::Orphan< ::capnp::List< ::int16_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int16_t>> disownInt16List();

  inline bool hasInt32List();
  inline  ::capnp::List< ::int32_t>::Builder getInt32List();
  inline void setInt32List( ::capnp::List< ::int32_t>::Reader value);
  inline void setInt32List(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initInt32List(unsigned int size);
  inline void adoptInt32List(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownInt32List();

  inline bool hasInt64List();
  inline  ::capnp::List< ::int64_t>::Builder getInt64List();
  inline void setInt64List( ::capnp::List< ::int64_t>::Reader value);
  inline void setInt64List(::kj::ArrayPtr<const  ::int64_t> value);
  inline  ::capnp::List< ::int64_t>::Builder initInt64List(unsigned int size);
  inline void adoptInt64List(::capnp::Orphan< ::capnp::List< ::int64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int64_t>> disownInt64List();

  inline bool hasUInt8List();
  inline  ::capnp::List< ::uint8_t>::Builder getUInt8List();
  inline void setUInt8List( ::capnp::List< ::uint8_t>::Reader value);
  inline void setUInt8List(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t>::Builder initUInt8List(unsigned int size);
  inline void adoptUInt8List(::capnp::Orphan< ::capnp::List< ::uint8_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t>> disownUInt8List();

  inline bool hasUInt16List();
  inline  ::capnp::List< ::uint16_t>::Builder getUInt16List();
  inline void setUInt16List( ::capnp::List< ::uint16_t>::Reader value);
  inline void setUInt16List(::kj::ArrayPtr<const  ::uint16_t> value);
  inline  ::capnp::List< ::uint16_t>::Builder initUInt16List(unsigned int size);
  inline void adoptUInt16List(::capnp::Orphan< ::capnp::List< ::uint16_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint16_t>> disownUInt16List();

  inline bool hasUInt32List();
  inline  ::capnp::List< ::uint32_t>::Builder getUInt32List();
  inline void setUInt32List( ::capnp::List< ::uint32_t>::Reader value);
  inline void setUInt32List(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initUInt32List(unsigned int size);
  inline void adoptUInt32List(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownUInt32List();

  inline bool hasUInt64List();
  inline  ::capnp::List< ::uint64_t>::Builder getUInt64List();
  inline void setUInt64List( ::capnp::List< ::uint64_t>::Reader value);
  inline void setUInt64List(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initUInt64List(unsigned int size);
  inline void adoptUInt64List(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownUInt64List();

  inline bool hasFloat32List();
  inline  ::capnp::List<float>::Builder getFloat32List();
  inline void setFloat32List( ::capnp::List<float>::Reader value);
  inline void setFloat32List(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initFloat32List(unsigned int size);
  inline void adoptFloat32List(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownFloat32List();

  inline bool hasFloat64List();
  inline  ::capnp::List<double>::Builder getFloat64List();
  inline void setFloat64List( ::capnp::List<double>::Reader value);
  inline void setFloat64List(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initFloat64List(unsigned int size);
  inline void adoptFloat64List(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownFloat64List();

  inline bool hasTextList();
  inline  ::capnp::List< ::capnp::Text>::Builder getTextList();
  inline void setTextList( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setTextList(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initTextList(unsigned int size);
  inline void adoptTextList(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownTextList();

  inline bool hasDataList();
  inline  ::capnp::List< ::capnp::Data>::Builder getDataList();
  inline void setDataList( ::capnp::List< ::capnp::Data>::Reader value);
  inline void setDataList(::kj::ArrayPtr<const  ::capnp::Data::Reader> value);
  inline  ::capnp::List< ::capnp::Data>::Builder initDataList(unsigned int size);
  inline void adoptDataList(::capnp::Orphan< ::capnp::List< ::capnp::Data>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Data>> disownDataList();

  inline bool hasStructList();
  inline  ::capnp::List< ::TestAllTypes>::Builder getStructList();
  inline void setStructList( ::capnp::List< ::TestAllTypes>::Reader value);
  inline  ::capnp::List< ::TestAllTypes>::Builder initStructList(unsigned int size);
  inline void adoptStructList(::capnp::Orphan< ::capnp::List< ::TestAllTypes>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TestAllTypes>> disownStructList();

  inline bool hasEnumList();
  inline  ::capnp::List< ::TestEnum>::Builder getEnumList();
  inline void setEnumList( ::capnp::List< ::TestEnum>::Reader value);
  inline void setEnumList(::kj::ArrayPtr<const  ::TestEnum> value);
  inline  ::capnp::List< ::TestEnum>::Builder initEnumList(unsigned int size);
  inline void adoptEnumList(::capnp::Orphan< ::capnp::List< ::TestEnum>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TestEnum>> disownEnumList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestAllTypes::Pipeline {
public:
  typedef TestAllTypes Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::TestAllTypes::Pipeline getStructField();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestDefaults::Reader {
public:
  typedef TestDefaults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getVoidField() const;

  inline bool getBoolField() const;

  inline  ::int8_t getInt8Field() const;

  inline  ::int16_t getInt16Field() const;

  inline  ::int32_t getInt32Field() const;

  inline  ::int64_t getInt64Field() const;

  inline  ::uint8_t getUInt8Field() const;

  inline  ::uint16_t getUInt16Field() const;

  inline  ::uint32_t getUInt32Field() const;

  inline  ::uint64_t getUInt64Field() const;

  inline float getFloat32Field() const;

  inline double getFloat64Field() const;

  inline bool hasTextField() const;
  inline  ::capnp::Text::Reader getTextField() const;

  inline bool hasDataField() const;
  inline  ::capnp::Data::Reader getDataField() const;

  inline bool hasStructField() const;
  inline  ::TestAllTypes::Reader getStructField() const;

  inline  ::TestEnum getEnumField() const;

  inline  ::capnp::Void getInterfaceField() const;

  inline bool hasVoidList() const;
  inline  ::capnp::List< ::capnp::Void>::Reader getVoidList() const;

  inline bool hasBoolList() const;
  inline  ::capnp::List<bool>::Reader getBoolList() const;

  inline bool hasInt8List() const;
  inline  ::capnp::List< ::int8_t>::Reader getInt8List() const;

  inline bool hasInt16List() const;
  inline  ::capnp::List< ::int16_t>::Reader getInt16List() const;

  inline bool hasInt32List() const;
  inline  ::capnp::List< ::int32_t>::Reader getInt32List() const;

  inline bool hasInt64List() const;
  inline  ::capnp::List< ::int64_t>::Reader getInt64List() const;

  inline bool hasUInt8List() const;
  inline  ::capnp::List< ::uint8_t>::Reader getUInt8List() const;

  inline bool hasUInt16List() const;
  inline  ::capnp::List< ::uint16_t>::Reader getUInt16List() const;

  inline bool hasUInt32List() const;
  inline  ::capnp::List< ::uint32_t>::Reader getUInt32List() const;

  inline bool hasUInt64List() const;
  inline  ::capnp::List< ::uint64_t>::Reader getUInt64List() const;

  inline bool hasFloat32List() const;
  inline  ::capnp::List<float>::Reader getFloat32List() const;

  inline bool hasFloat64List() const;
  inline  ::capnp::List<double>::Reader getFloat64List() const;

  inline bool hasTextList() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getTextList() const;

  inline bool hasDataList() const;
  inline  ::capnp::List< ::capnp::Data>::Reader getDataList() const;

  inline bool hasStructList() const;
  inline  ::capnp::List< ::TestAllTypes>::Reader getStructList() const;

  inline bool hasEnumList() const;
  inline  ::capnp::List< ::TestEnum>::Reader getEnumList() const;

  inline bool hasInterfaceList() const;
  inline  ::capnp::List< ::capnp::Void>::Reader getInterfaceList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestDefaults::Builder {
public:
  typedef TestDefaults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getVoidField();
  inline void setVoidField( ::capnp::Void value = ::capnp::VOID);

  inline bool getBoolField();
  inline void setBoolField(bool value);

  inline  ::int8_t getInt8Field();
  inline void setInt8Field( ::int8_t value);

  inline  ::int16_t getInt16Field();
  inline void setInt16Field( ::int16_t value);

  inline  ::int32_t getInt32Field();
  inline void setInt32Field( ::int32_t value);

  inline  ::int64_t getInt64Field();
  inline void setInt64Field( ::int64_t value);

  inline  ::uint8_t getUInt8Field();
  inline void setUInt8Field( ::uint8_t value);

  inline  ::uint16_t getUInt16Field();
  inline void setUInt16Field( ::uint16_t value);

  inline  ::uint32_t getUInt32Field();
  inline void setUInt32Field( ::uint32_t value);

  inline  ::uint64_t getUInt64Field();
  inline void setUInt64Field( ::uint64_t value);

  inline float getFloat32Field();
  inline void setFloat32Field(float value);

  inline double getFloat64Field();
  inline void setFloat64Field(double value);

  inline bool hasTextField();
  inline  ::capnp::Text::Builder getTextField();
  inline void setTextField( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTextField(unsigned int size);
  inline void adoptTextField(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTextField();

  inline bool hasDataField();
  inline  ::capnp::Data::Builder getDataField();
  inline void setDataField( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initDataField(unsigned int size);
  inline void adoptDataField(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownDataField();

  inline bool hasStructField();
  inline  ::TestAllTypes::Builder getStructField();
  inline void setStructField( ::TestAllTypes::Reader value);
  inline  ::TestAllTypes::Builder initStructField();
  inline void adoptStructField(::capnp::Orphan< ::TestAllTypes>&& value);
  inline ::capnp::Orphan< ::TestAllTypes> disownStructField();

  inline  ::TestEnum getEnumField();
  inline void setEnumField( ::TestEnum value);

  inline  ::capnp::Void getInterfaceField();
  inline void setInterfaceField( ::capnp::Void value = ::capnp::VOID);

  inline bool hasVoidList();
  inline  ::capnp::List< ::capnp::Void>::Builder getVoidList();
  inline void setVoidList( ::capnp::List< ::capnp::Void>::Reader value);
  inline void setVoidList(::kj::ArrayPtr<const  ::capnp::Void> value);
  inline  ::capnp::List< ::capnp::Void>::Builder initVoidList(unsigned int size);
  inline void adoptVoidList(::capnp::Orphan< ::capnp::List< ::capnp::Void>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Void>> disownVoidList();

  inline bool hasBoolList();
  inline  ::capnp::List<bool>::Builder getBoolList();
  inline void setBoolList( ::capnp::List<bool>::Reader value);
  inline void setBoolList(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initBoolList(unsigned int size);
  inline void adoptBoolList(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownBoolList();

  inline bool hasInt8List();
  inline  ::capnp::List< ::int8_t>::Builder getInt8List();
  inline void setInt8List( ::capnp::List< ::int8_t>::Reader value);
  inline void setInt8List(::kj::ArrayPtr<const  ::int8_t> value);
  inline  ::capnp::List< ::int8_t>::Builder initInt8List(unsigned int size);
  inline void adoptInt8List(::capnp::Orphan< ::capnp::List< ::int8_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int8_t>> disownInt8List();

  inline bool hasInt16List();
  inline  ::capnp::List< ::int16_t>::Builder getInt16List();
  inline void setInt16List( ::capnp::List< ::int16_t>::Reader value);
  inline void setInt16List(::kj::ArrayPtr<const  ::int16_t> value);
  inline  ::capnp::List< ::int16_t>::Builder initInt16List(unsigned int size);
  inline void adoptInt16List(::capnp::Orphan< ::capnp::List< ::int16_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int16_t>> disownInt16List();

  inline bool hasInt32List();
  inline  ::capnp::List< ::int32_t>::Builder getInt32List();
  inline void setInt32List( ::capnp::List< ::int32_t>::Reader value);
  inline void setInt32List(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initInt32List(unsigned int size);
  inline void adoptInt32List(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownInt32List();

  inline bool hasInt64List();
  inline  ::capnp::List< ::int64_t>::Builder getInt64List();
  inline void setInt64List( ::capnp::List< ::int64_t>::Reader value);
  inline void setInt64List(::kj::ArrayPtr<const  ::int64_t> value);
  inline  ::capnp::List< ::int64_t>::Builder initInt64List(unsigned int size);
  inline void adoptInt64List(::capnp::Orphan< ::capnp::List< ::int64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int64_t>> disownInt64List();

  inline bool hasUInt8List();
  inline  ::capnp::List< ::uint8_t>::Builder getUInt8List();
  inline void setUInt8List( ::capnp::List< ::uint8_t>::Reader value);
  inline void setUInt8List(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t>::Builder initUInt8List(unsigned int size);
  inline void adoptUInt8List(::capnp::Orphan< ::capnp::List< ::uint8_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t>> disownUInt8List();

  inline bool hasUInt16List();
  inline  ::capnp::List< ::uint16_t>::Builder getUInt16List();
  inline void setUInt16List( ::capnp::List< ::uint16_t>::Reader value);
  inline void setUInt16List(::kj::ArrayPtr<const  ::uint16_t> value);
  inline  ::capnp::List< ::uint16_t>::Builder initUInt16List(unsigned int size);
  inline void adoptUInt16List(::capnp::Orphan< ::capnp::List< ::uint16_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint16_t>> disownUInt16List();

  inline bool hasUInt32List();
  inline  ::capnp::List< ::uint32_t>::Builder getUInt32List();
  inline void setUInt32List( ::capnp::List< ::uint32_t>::Reader value);
  inline void setUInt32List(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initUInt32List(unsigned int size);
  inline void adoptUInt32List(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownUInt32List();

  inline bool hasUInt64List();
  inline  ::capnp::List< ::uint64_t>::Builder getUInt64List();
  inline void setUInt64List( ::capnp::List< ::uint64_t>::Reader value);
  inline void setUInt64List(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initUInt64List(unsigned int size);
  inline void adoptUInt64List(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownUInt64List();

  inline bool hasFloat32List();
  inline  ::capnp::List<float>::Builder getFloat32List();
  inline void setFloat32List( ::capnp::List<float>::Reader value);
  inline void setFloat32List(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initFloat32List(unsigned int size);
  inline void adoptFloat32List(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownFloat32List();

  inline bool hasFloat64List();
  inline  ::capnp::List<double>::Builder getFloat64List();
  inline void setFloat64List( ::capnp::List<double>::Reader value);
  inline void setFloat64List(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initFloat64List(unsigned int size);
  inline void adoptFloat64List(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownFloat64List();

  inline bool hasTextList();
  inline  ::capnp::List< ::capnp::Text>::Builder getTextList();
  inline void setTextList( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setTextList(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initTextList(unsigned int size);
  inline void adoptTextList(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownTextList();

  inline bool hasDataList();
  inline  ::capnp::List< ::capnp::Data>::Builder getDataList();
  inline void setDataList( ::capnp::List< ::capnp::Data>::Reader value);
  inline void setDataList(::kj::ArrayPtr<const  ::capnp::Data::Reader> value);
  inline  ::capnp::List< ::capnp::Data>::Builder initDataList(unsigned int size);
  inline void adoptDataList(::capnp::Orphan< ::capnp::List< ::capnp::Data>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Data>> disownDataList();

  inline bool hasStructList();
  inline  ::capnp::List< ::TestAllTypes>::Builder getStructList();
  inline void setStructList( ::capnp::List< ::TestAllTypes>::Reader value);
  inline  ::capnp::List< ::TestAllTypes>::Builder initStructList(unsigned int size);
  inline void adoptStructList(::capnp::Orphan< ::capnp::List< ::TestAllTypes>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TestAllTypes>> disownStructList();

  inline bool hasEnumList();
  inline  ::capnp::List< ::TestEnum>::Builder getEnumList();
  inline void setEnumList( ::capnp::List< ::TestEnum>::Reader value);
  inline void setEnumList(::kj::ArrayPtr<const  ::TestEnum> value);
  inline  ::capnp::List< ::TestEnum>::Builder initEnumList(unsigned int size);
  inline void adoptEnumList(::capnp::Orphan< ::capnp::List< ::TestEnum>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TestEnum>> disownEnumList();

  inline bool hasInterfaceList();
  inline  ::capnp::List< ::capnp::Void>::Builder getInterfaceList();
  inline void setInterfaceList( ::capnp::List< ::capnp::Void>::Reader value);
  inline void setInterfaceList(::kj::ArrayPtr<const  ::capnp::Void> value);
  inline  ::capnp::List< ::capnp::Void>::Builder initInterfaceList(unsigned int size);
  inline void adoptInterfaceList(::capnp::Orphan< ::capnp::List< ::capnp::Void>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Void>> disownInterfaceList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestDefaults::Pipeline {
public:
  typedef TestDefaults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::TestAllTypes::Pipeline getStructField();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestAnyPointer::Reader {
public:
  typedef TestAnyPointer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAnyPointerField() const;
  inline ::capnp::AnyPointer::Reader getAnyPointerField() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestAnyPointer::Builder {
public:
  typedef TestAnyPointer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAnyPointerField();
  inline ::capnp::AnyPointer::Builder getAnyPointerField();
  inline ::capnp::AnyPointer::Builder initAnyPointerField();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestAnyPointer::Pipeline {
public:
  typedef TestAnyPointer Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestOutOfOrder::Reader {
public:
  typedef TestOutOfOrder Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasQux() const;
  inline  ::capnp::Text::Reader getQux() const;

  inline bool hasGrault() const;
  inline  ::capnp::Text::Reader getGrault() const;

  inline bool hasBar() const;
  inline  ::capnp::Text::Reader getBar() const;

  inline bool hasFoo() const;
  inline  ::capnp::Text::Reader getFoo() const;

  inline bool hasCorge() const;
  inline  ::capnp::Text::Reader getCorge() const;

  inline bool hasWaldo() const;
  inline  ::capnp::Text::Reader getWaldo() const;

  inline bool hasQuux() const;
  inline  ::capnp::Text::Reader getQuux() const;

  inline bool hasGarply() const;
  inline  ::capnp::Text::Reader getGarply() const;

  inline bool hasBaz() const;
  inline  ::capnp::Text::Reader getBaz() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestOutOfOrder::Builder {
public:
  typedef TestOutOfOrder Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasQux();
  inline  ::capnp::Text::Builder getQux();
  inline void setQux( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initQux(unsigned int size);
  inline void adoptQux(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownQux();

  inline bool hasGrault();
  inline  ::capnp::Text::Builder getGrault();
  inline void setGrault( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGrault(unsigned int size);
  inline void adoptGrault(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGrault();

  inline bool hasBar();
  inline  ::capnp::Text::Builder getBar();
  inline void setBar( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBar(unsigned int size);
  inline void adoptBar(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBar();

  inline bool hasFoo();
  inline  ::capnp::Text::Builder getFoo();
  inline void setFoo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFoo(unsigned int size);
  inline void adoptFoo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFoo();

  inline bool hasCorge();
  inline  ::capnp::Text::Builder getCorge();
  inline void setCorge( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCorge(unsigned int size);
  inline void adoptCorge(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCorge();

  inline bool hasWaldo();
  inline  ::capnp::Text::Builder getWaldo();
  inline void setWaldo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initWaldo(unsigned int size);
  inline void adoptWaldo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownWaldo();

  inline bool hasQuux();
  inline  ::capnp::Text::Builder getQuux();
  inline void setQuux( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initQuux(unsigned int size);
  inline void adoptQuux(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownQuux();

  inline bool hasGarply();
  inline  ::capnp::Text::Builder getGarply();
  inline void setGarply( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGarply(unsigned int size);
  inline void adoptGarply(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGarply();

  inline bool hasBaz();
  inline  ::capnp::Text::Builder getBaz();
  inline void setBaz( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBaz(unsigned int size);
  inline void adoptBaz(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBaz();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestOutOfOrder::Pipeline {
public:
  typedef TestOutOfOrder Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestUnion::Reader {
public:
  typedef TestUnion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline typename Union0::Reader getUnion0() const;

  inline typename Union1::Reader getUnion1() const;

  inline typename Union2::Reader getUnion2() const;

  inline typename Union3::Reader getUnion3() const;

  inline bool getBit0() const;

  inline bool getBit2() const;

  inline bool getBit3() const;

  inline bool getBit4() const;

  inline bool getBit5() const;

  inline bool getBit6() const;

  inline bool getBit7() const;

  inline  ::uint8_t getByte0() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestUnion::Builder {
public:
  typedef TestUnion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline typename Union0::Builder getUnion0();
  inline typename Union0::Builder initUnion0();

  inline typename Union1::Builder getUnion1();
  inline typename Union1::Builder initUnion1();

  inline typename Union2::Builder getUnion2();
  inline typename Union2::Builder initUnion2();

  inline typename Union3::Builder getUnion3();
  inline typename Union3::Builder initUnion3();

  inline bool getBit0();
  inline void setBit0(bool value);

  inline bool getBit2();
  inline void setBit2(bool value);

  inline bool getBit3();
  inline void setBit3(bool value);

  inline bool getBit4();
  inline void setBit4(bool value);

  inline bool getBit5();
  inline void setBit5(bool value);

  inline bool getBit6();
  inline void setBit6(bool value);

  inline bool getBit7();
  inline void setBit7(bool value);

  inline  ::uint8_t getByte0();
  inline void setByte0( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestUnion::Pipeline {
public:
  typedef TestUnion Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Union0::Pipeline getUnion0();
  inline typename Union1::Pipeline getUnion1();
  inline typename Union2::Pipeline getUnion2();
  inline typename Union3::Pipeline getUnion3();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestUnion::Union0::Reader {
public:
  typedef Union0 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isU0f0s0() const;
  inline  ::capnp::Void getU0f0s0() const;

  inline bool isU0f0s1() const;
  inline bool getU0f0s1() const;

  inline bool isU0f0s8() const;
  inline  ::int8_t getU0f0s8() const;

  inline bool isU0f0s16() const;
  inline  ::int16_t getU0f0s16() const;

  inline bool isU0f0s32() const;
  inline  ::int32_t getU0f0s32() const;

  inline bool isU0f0s64() const;
  inline  ::int64_t getU0f0s64() const;

  inline bool isU0f0sp() const;
  inline bool hasU0f0sp() const;
  inline  ::capnp::Text::Reader getU0f0sp() const;

  inline bool isU0f1s0() const;
  inline  ::capnp::Void getU0f1s0() const;

  inline bool isU0f1s1() const;
  inline bool getU0f1s1() const;

  inline bool isU0f1s8() const;
  inline  ::int8_t getU0f1s8() const;

  inline bool isU0f1s16() const;
  inline  ::int16_t getU0f1s16() const;

  inline bool isU0f1s32() const;
  inline  ::int32_t getU0f1s32() const;

  inline bool isU0f1s64() const;
  inline  ::int64_t getU0f1s64() const;

  inline bool isU0f1sp() const;
  inline bool hasU0f1sp() const;
  inline  ::capnp::Text::Reader getU0f1sp() const;

  inline bool isPrimitiveList() const;
  inline bool hasPrimitiveList() const;
  inline  ::capnp::List< ::uint32_t>::Reader getPrimitiveList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestUnion::Union0::Builder {
public:
  typedef Union0 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isU0f0s0();
  inline  ::capnp::Void getU0f0s0();
  inline void setU0f0s0( ::capnp::Void value = ::capnp::VOID);

  inline bool isU0f0s1();
  inline bool getU0f0s1();
  inline void setU0f0s1(bool value);

  inline bool isU0f0s8();
  inline  ::int8_t getU0f0s8();
  inline void setU0f0s8( ::int8_t value);

  inline bool isU0f0s16();
  inline  ::int16_t getU0f0s16();
  inline void setU0f0s16( ::int16_t value);

  inline bool isU0f0s32();
  inline  ::int32_t getU0f0s32();
  inline void setU0f0s32( ::int32_t value);

  inline bool isU0f0s64();
  inline  ::int64_t getU0f0s64();
  inline void setU0f0s64( ::int64_t value);

  inline bool isU0f0sp();
  inline bool hasU0f0sp();
  inline  ::capnp::Text::Builder getU0f0sp();
  inline void setU0f0sp( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initU0f0sp(unsigned int size);
  inline void adoptU0f0sp(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownU0f0sp();

  inline bool isU0f1s0();
  inline  ::capnp::Void getU0f1s0();
  inline void setU0f1s0( ::capnp::Void value = ::capnp::VOID);

  inline bool isU0f1s1();
  inline bool getU0f1s1();
  inline void setU0f1s1(bool value);

  inline bool isU0f1s8();
  inline  ::int8_t getU0f1s8();
  inline void setU0f1s8( ::int8_t value);

  inline bool isU0f1s16();
  inline  ::int16_t getU0f1s16();
  inline void setU0f1s16( ::int16_t value);

  inline bool isU0f1s32();
  inline  ::int32_t getU0f1s32();
  inline void setU0f1s32( ::int32_t value);

  inline bool isU0f1s64();
  inline  ::int64_t getU0f1s64();
  inline void setU0f1s64( ::int64_t value);

  inline bool isU0f1sp();
  inline bool hasU0f1sp();
  inline  ::capnp::Text::Builder getU0f1sp();
  inline void setU0f1sp( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initU0f1sp(unsigned int size);
  inline void adoptU0f1sp(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownU0f1sp();

  inline bool isPrimitiveList();
  inline bool hasPrimitiveList();
  inline  ::capnp::List< ::uint32_t>::Builder getPrimitiveList();
  inline void setPrimitiveList( ::capnp::List< ::uint32_t>::Reader value);
  inline void setPrimitiveList(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initPrimitiveList(unsigned int size);
  inline void adoptPrimitiveList(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownPrimitiveList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestUnion::Union0::Pipeline {
public:
  typedef Union0 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestUnion::Union1::Reader {
public:
  typedef Union1 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isU1f0s0() const;
  inline  ::capnp::Void getU1f0s0() const;

  inline bool isU1f0s1() const;
  inline bool getU1f0s1() const;

  inline bool isU1f1s1() const;
  inline bool getU1f1s1() const;

  inline bool isU1f0s8() const;
  inline  ::int8_t getU1f0s8() const;

  inline bool isU1f1s8() const;
  inline  ::int8_t getU1f1s8() const;

  inline bool isU1f0s16() const;
  inline  ::int16_t getU1f0s16() const;

  inline bool isU1f1s16() const;
  inline  ::int16_t getU1f1s16() const;

  inline bool isU1f0s32() const;
  inline  ::int32_t getU1f0s32() const;

  inline bool isU1f1s32() const;
  inline  ::int32_t getU1f1s32() const;

  inline bool isU1f0s64() const;
  inline  ::int64_t getU1f0s64() const;

  inline bool isU1f1s64() const;
  inline  ::int64_t getU1f1s64() const;

  inline bool isU1f0sp() const;
  inline bool hasU1f0sp() const;
  inline  ::capnp::Text::Reader getU1f0sp() const;

  inline bool isU1f1sp() const;
  inline bool hasU1f1sp() const;
  inline  ::capnp::Text::Reader getU1f1sp() const;

  inline bool isU1f2s0() const;
  inline  ::capnp::Void getU1f2s0() const;

  inline bool isU1f2s1() const;
  inline bool getU1f2s1() const;

  inline bool isU1f2s8() const;
  inline  ::int8_t getU1f2s8() const;

  inline bool isU1f2s16() const;
  inline  ::int16_t getU1f2s16() const;

  inline bool isU1f2s32() const;
  inline  ::int32_t getU1f2s32() const;

  inline bool isU1f2s64() const;
  inline  ::int64_t getU1f2s64() const;

  inline bool isU1f2sp() const;
  inline bool hasU1f2sp() const;
  inline  ::capnp::Text::Reader getU1f2sp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestUnion::Union1::Builder {
public:
  typedef Union1 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isU1f0s0();
  inline  ::capnp::Void getU1f0s0();
  inline void setU1f0s0( ::capnp::Void value = ::capnp::VOID);

  inline bool isU1f0s1();
  inline bool getU1f0s1();
  inline void setU1f0s1(bool value);

  inline bool isU1f1s1();
  inline bool getU1f1s1();
  inline void setU1f1s1(bool value);

  inline bool isU1f0s8();
  inline  ::int8_t getU1f0s8();
  inline void setU1f0s8( ::int8_t value);

  inline bool isU1f1s8();
  inline  ::int8_t getU1f1s8();
  inline void setU1f1s8( ::int8_t value);

  inline bool isU1f0s16();
  inline  ::int16_t getU1f0s16();
  inline void setU1f0s16( ::int16_t value);

  inline bool isU1f1s16();
  inline  ::int16_t getU1f1s16();
  inline void setU1f1s16( ::int16_t value);

  inline bool isU1f0s32();
  inline  ::int32_t getU1f0s32();
  inline void setU1f0s32( ::int32_t value);

  inline bool isU1f1s32();
  inline  ::int32_t getU1f1s32();
  inline void setU1f1s32( ::int32_t value);

  inline bool isU1f0s64();
  inline  ::int64_t getU1f0s64();
  inline void setU1f0s64( ::int64_t value);

  inline bool isU1f1s64();
  inline  ::int64_t getU1f1s64();
  inline void setU1f1s64( ::int64_t value);

  inline bool isU1f0sp();
  inline bool hasU1f0sp();
  inline  ::capnp::Text::Builder getU1f0sp();
  inline void setU1f0sp( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initU1f0sp(unsigned int size);
  inline void adoptU1f0sp(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownU1f0sp();

  inline bool isU1f1sp();
  inline bool hasU1f1sp();
  inline  ::capnp::Text::Builder getU1f1sp();
  inline void setU1f1sp( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initU1f1sp(unsigned int size);
  inline void adoptU1f1sp(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownU1f1sp();

  inline bool isU1f2s0();
  inline  ::capnp::Void getU1f2s0();
  inline void setU1f2s0( ::capnp::Void value = ::capnp::VOID);

  inline bool isU1f2s1();
  inline bool getU1f2s1();
  inline void setU1f2s1(bool value);

  inline bool isU1f2s8();
  inline  ::int8_t getU1f2s8();
  inline void setU1f2s8( ::int8_t value);

  inline bool isU1f2s16();
  inline  ::int16_t getU1f2s16();
  inline void setU1f2s16( ::int16_t value);

  inline bool isU1f2s32();
  inline  ::int32_t getU1f2s32();
  inline void setU1f2s32( ::int32_t value);

  inline bool isU1f2s64();
  inline  ::int64_t getU1f2s64();
  inline void setU1f2s64( ::int64_t value);

  inline bool isU1f2sp();
  inline bool hasU1f2sp();
  inline  ::capnp::Text::Builder getU1f2sp();
  inline void setU1f2sp( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initU1f2sp(unsigned int size);
  inline void adoptU1f2sp(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownU1f2sp();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestUnion::Union1::Pipeline {
public:
  typedef Union1 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestUnion::Union2::Reader {
public:
  typedef Union2 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isU2f0s1() const;
  inline bool getU2f0s1() const;

  inline bool isU2f0s8() const;
  inline  ::int8_t getU2f0s8() const;

  inline bool isU2f0s16() const;
  inline  ::int16_t getU2f0s16() const;

  inline bool isU2f0s32() const;
  inline  ::int32_t getU2f0s32() const;

  inline bool isU2f0s64() const;
  inline  ::int64_t getU2f0s64() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestUnion::Union2::Builder {
public:
  typedef Union2 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isU2f0s1();
  inline bool getU2f0s1();
  inline void setU2f0s1(bool value);

  inline bool isU2f0s8();
  inline  ::int8_t getU2f0s8();
  inline void setU2f0s8( ::int8_t value);

  inline bool isU2f0s16();
  inline  ::int16_t getU2f0s16();
  inline void setU2f0s16( ::int16_t value);

  inline bool isU2f0s32();
  inline  ::int32_t getU2f0s32();
  inline void setU2f0s32( ::int32_t value);

  inline bool isU2f0s64();
  inline  ::int64_t getU2f0s64();
  inline void setU2f0s64( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestUnion::Union2::Pipeline {
public:
  typedef Union2 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestUnion::Union3::Reader {
public:
  typedef Union3 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isU3f0s1() const;
  inline bool getU3f0s1() const;

  inline bool isU3f0s8() const;
  inline  ::int8_t getU3f0s8() const;

  inline bool isU3f0s16() const;
  inline  ::int16_t getU3f0s16() const;

  inline bool isU3f0s32() const;
  inline  ::int32_t getU3f0s32() const;

  inline bool isU3f0s64() const;
  inline  ::int64_t getU3f0s64() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestUnion::Union3::Builder {
public:
  typedef Union3 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isU3f0s1();
  inline bool getU3f0s1();
  inline void setU3f0s1(bool value);

  inline bool isU3f0s8();
  inline  ::int8_t getU3f0s8();
  inline void setU3f0s8( ::int8_t value);

  inline bool isU3f0s16();
  inline  ::int16_t getU3f0s16();
  inline void setU3f0s16( ::int16_t value);

  inline bool isU3f0s32();
  inline  ::int32_t getU3f0s32();
  inline void setU3f0s32( ::int32_t value);

  inline bool isU3f0s64();
  inline  ::int64_t getU3f0s64();
  inline void setU3f0s64( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestUnion::Union3::Pipeline {
public:
  typedef Union3 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestGroups::Reader {
public:
  typedef TestGroups Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline typename Groups::Reader getGroups() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestGroups::Builder {
public:
  typedef TestGroups Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline typename Groups::Builder getGroups();
  inline typename Groups::Builder initGroups();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestGroups::Pipeline {
public:
  typedef TestGroups Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Groups::Pipeline getGroups();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestGroups::Groups::Reader {
public:
  typedef Groups Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isFoo() const;
  inline typename Foo::Reader getFoo() const;

  inline bool isBaz() const;
  inline typename Baz::Reader getBaz() const;

  inline bool isBar() const;
  inline typename Bar::Reader getBar() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestGroups::Groups::Builder {
public:
  typedef Groups Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isFoo();
  inline typename Foo::Builder getFoo();
  inline typename Foo::Builder initFoo();

  inline bool isBaz();
  inline typename Baz::Builder getBaz();
  inline typename Baz::Builder initBaz();

  inline bool isBar();
  inline typename Bar::Builder getBar();
  inline typename Bar::Builder initBar();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestGroups::Groups::Pipeline {
public:
  typedef Groups Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestGroups::Groups::Foo::Reader {
public:
  typedef Foo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getCorge() const;

  inline  ::int64_t getGrault() const;

  inline bool hasGarply() const;
  inline  ::capnp::Text::Reader getGarply() const;

  inline  ::capnp::Void getQuux() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestGroups::Groups::Foo::Builder {
public:
  typedef Foo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getCorge();
  inline void setCorge( ::int32_t value);

  inline  ::int64_t getGrault();
  inline void setGrault( ::int64_t value);

  inline bool hasGarply();
  inline  ::capnp::Text::Builder getGarply();
  inline void setGarply( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGarply(unsigned int size);
  inline void adoptGarply(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGarply();

  inline  ::capnp::Void getQuux();
  inline void setQuux( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestGroups::Groups::Foo::Pipeline {
public:
  typedef Foo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestGroups::Groups::Baz::Reader {
public:
  typedef Baz Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getCorge() const;

  inline bool hasGrault() const;
  inline  ::capnp::Text::Reader getGrault() const;

  inline bool hasGarply() const;
  inline  ::capnp::Text::Reader getGarply() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestGroups::Groups::Baz::Builder {
public:
  typedef Baz Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getCorge();
  inline void setCorge( ::int32_t value);

  inline bool hasGrault();
  inline  ::capnp::Text::Builder getGrault();
  inline void setGrault( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGrault(unsigned int size);
  inline void adoptGrault(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGrault();

  inline bool hasGarply();
  inline  ::capnp::Text::Builder getGarply();
  inline void setGarply( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGarply(unsigned int size);
  inline void adoptGarply(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGarply();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestGroups::Groups::Baz::Pipeline {
public:
  typedef Baz Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestGroups::Groups::Bar::Reader {
public:
  typedef Bar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getCorge() const;

  inline bool hasGrault() const;
  inline  ::capnp::Text::Reader getGrault() const;

  inline  ::int64_t getGarply() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestGroups::Groups::Bar::Builder {
public:
  typedef Bar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getCorge();
  inline void setCorge( ::int32_t value);

  inline bool hasGrault();
  inline  ::capnp::Text::Builder getGrault();
  inline void setGrault( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGrault(unsigned int size);
  inline void adoptGrault(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGrault();

  inline  ::int64_t getGarply();
  inline void setGarply( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestGroups::Groups::Bar::Pipeline {
public:
  typedef Bar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestLists::Reader {
public:
  typedef TestLists Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasList0() const;
  inline  ::capnp::List< ::TestLists::Struct0>::Reader getList0() const;

  inline bool hasList1() const;
  inline  ::capnp::List< ::TestLists::Struct1>::Reader getList1() const;

  inline bool hasList8() const;
  inline  ::capnp::List< ::TestLists::Struct8>::Reader getList8() const;

  inline bool hasList16() const;
  inline  ::capnp::List< ::TestLists::Struct16>::Reader getList16() const;

  inline bool hasList32() const;
  inline  ::capnp::List< ::TestLists::Struct32>::Reader getList32() const;

  inline bool hasList64() const;
  inline  ::capnp::List< ::TestLists::Struct64>::Reader getList64() const;

  inline bool hasListP() const;
  inline  ::capnp::List< ::TestLists::StructP>::Reader getListP() const;

  inline bool hasInt32ListList() const;
  inline  ::capnp::List< ::capnp::List< ::int32_t>>::Reader getInt32ListList() const;

  inline bool hasTextListList() const;
  inline  ::capnp::List< ::capnp::List< ::capnp::Text>>::Reader getTextListList() const;

  inline bool hasStructListList() const;
  inline  ::capnp::List< ::capnp::List< ::TestAllTypes>>::Reader getStructListList() const;

  inline bool hasBoolListListList() const;
  inline  ::capnp::List< ::capnp::List< ::capnp::List<bool>>>::Reader getBoolListListList() const;

  inline bool hasEnumListList() const;
  inline  ::capnp::List< ::capnp::List< ::TestEnum>>::Reader getEnumListList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestLists::Builder {
public:
  typedef TestLists Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasList0();
  inline  ::capnp::List< ::TestLists::Struct0>::Builder getList0();
  inline void setList0( ::capnp::List< ::TestLists::Struct0>::Reader value);
  inline  ::capnp::List< ::TestLists::Struct0>::Builder initList0(unsigned int size);
  inline void adoptList0(::capnp::Orphan< ::capnp::List< ::TestLists::Struct0>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TestLists::Struct0>> disownList0();

  inline bool hasList1();
  inline  ::capnp::List< ::TestLists::Struct1>::Builder getList1();
  inline void setList1( ::capnp::List< ::TestLists::Struct1>::Reader value);
  inline  ::capnp::List< ::TestLists::Struct1>::Builder initList1(unsigned int size);
  inline void adoptList1(::capnp::Orphan< ::capnp::List< ::TestLists::Struct1>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TestLists::Struct1>> disownList1();

  inline bool hasList8();
  inline  ::capnp::List< ::TestLists::Struct8>::Builder getList8();
  inline void setList8( ::capnp::List< ::TestLists::Struct8>::Reader value);
  inline  ::capnp::List< ::TestLists::Struct8>::Builder initList8(unsigned int size);
  inline void adoptList8(::capnp::Orphan< ::capnp::List< ::TestLists::Struct8>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TestLists::Struct8>> disownList8();

  inline bool hasList16();
  inline  ::capnp::List< ::TestLists::Struct16>::Builder getList16();
  inline void setList16( ::capnp::List< ::TestLists::Struct16>::Reader value);
  inline  ::capnp::List< ::TestLists::Struct16>::Builder initList16(unsigned int size);
  inline void adoptList16(::capnp::Orphan< ::capnp::List< ::TestLists::Struct16>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TestLists::Struct16>> disownList16();

  inline bool hasList32();
  inline  ::capnp::List< ::TestLists::Struct32>::Builder getList32();
  inline void setList32( ::capnp::List< ::TestLists::Struct32>::Reader value);
  inline  ::capnp::List< ::TestLists::Struct32>::Builder initList32(unsigned int size);
  inline void adoptList32(::capnp::Orphan< ::capnp::List< ::TestLists::Struct32>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TestLists::Struct32>> disownList32();

  inline bool hasList64();
  inline  ::capnp::List< ::TestLists::Struct64>::Builder getList64();
  inline void setList64( ::capnp::List< ::TestLists::Struct64>::Reader value);
  inline  ::capnp::List< ::TestLists::Struct64>::Builder initList64(unsigned int size);
  inline void adoptList64(::capnp::Orphan< ::capnp::List< ::TestLists::Struct64>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TestLists::Struct64>> disownList64();

  inline bool hasListP();
  inline  ::capnp::List< ::TestLists::StructP>::Builder getListP();
  inline void setListP( ::capnp::List< ::TestLists::StructP>::Reader value);
  inline  ::capnp::List< ::TestLists::StructP>::Builder initListP(unsigned int size);
  inline void adoptListP(::capnp::Orphan< ::capnp::List< ::TestLists::StructP>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TestLists::StructP>> disownListP();

  inline bool hasInt32ListList();
  inline  ::capnp::List< ::capnp::List< ::int32_t>>::Builder getInt32ListList();
  inline void setInt32ListList( ::capnp::List< ::capnp::List< ::int32_t>>::Reader value);
  inline void setInt32ListList(::kj::ArrayPtr<const  ::capnp::List< ::int32_t>::Reader> value);
  inline  ::capnp::List< ::capnp::List< ::int32_t>>::Builder initInt32ListList(unsigned int size);
  inline void adoptInt32ListList(::capnp::Orphan< ::capnp::List< ::capnp::List< ::int32_t>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::int32_t>>> disownInt32ListList();

  inline bool hasTextListList();
  inline  ::capnp::List< ::capnp::List< ::capnp::Text>>::Builder getTextListList();
  inline void setTextListList( ::capnp::List< ::capnp::List< ::capnp::Text>>::Reader value);
  inline void setTextListList(::kj::ArrayPtr<const  ::capnp::List< ::capnp::Text>::Reader> value);
  inline  ::capnp::List< ::capnp::List< ::capnp::Text>>::Builder initTextListList(unsigned int size);
  inline void adoptTextListList(::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnp::Text>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnp::Text>>> disownTextListList();

  inline bool hasStructListList();
  inline  ::capnp::List< ::capnp::List< ::TestAllTypes>>::Builder getStructListList();
  inline void setStructListList( ::capnp::List< ::capnp::List< ::TestAllTypes>>::Reader value);
  inline void setStructListList(::kj::ArrayPtr<const  ::capnp::List< ::TestAllTypes>::Reader> value);
  inline  ::capnp::List< ::capnp::List< ::TestAllTypes>>::Builder initStructListList(unsigned int size);
  inline void adoptStructListList(::capnp::Orphan< ::capnp::List< ::capnp::List< ::TestAllTypes>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::TestAllTypes>>> disownStructListList();

  inline bool hasBoolListListList();
  inline  ::capnp::List< ::capnp::List< ::capnp::List<bool>>>::Builder getBoolListListList();
  inline void setBoolListListList( ::capnp::List< ::capnp::List< ::capnp::List<bool>>>::Reader value);
  inline void setBoolListListList(::kj::ArrayPtr<const  ::capnp::List< ::capnp::List<bool>>::Reader> value);
  inline  ::capnp::List< ::capnp::List< ::capnp::List<bool>>>::Builder initBoolListListList(unsigned int size);
  inline void adoptBoolListListList(::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnp::List<bool>>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnp::List<bool>>>> disownBoolListListList();

  inline bool hasEnumListList();
  inline  ::capnp::List< ::capnp::List< ::TestEnum>>::Builder getEnumListList();
  inline void setEnumListList( ::capnp::List< ::capnp::List< ::TestEnum>>::Reader value);
  inline void setEnumListList(::kj::ArrayPtr<const  ::capnp::List< ::TestEnum>::Reader> value);
  inline  ::capnp::List< ::capnp::List< ::TestEnum>>::Builder initEnumListList(unsigned int size);
  inline void adoptEnumListList(::capnp::Orphan< ::capnp::List< ::capnp::List< ::TestEnum>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::TestEnum>>> disownEnumListList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestLists::Pipeline {
public:
  typedef TestLists Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestLists::Struct0::Reader {
public:
  typedef Struct0 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getF() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestLists::Struct0::Builder {
public:
  typedef Struct0 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getF();
  inline void setF( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestLists::Struct0::Pipeline {
public:
  typedef Struct0 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestLists::Struct1::Reader {
public:
  typedef Struct1 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool getF() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestLists::Struct1::Builder {
public:
  typedef Struct1 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getF();
  inline void setF(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestLists::Struct1::Pipeline {
public:
  typedef Struct1 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestLists::Struct8::Reader {
public:
  typedef Struct8 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getF() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestLists::Struct8::Builder {
public:
  typedef Struct8 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getF();
  inline void setF( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestLists::Struct8::Pipeline {
public:
  typedef Struct8 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestLists::Struct16::Reader {
public:
  typedef Struct16 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getF() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestLists::Struct16::Builder {
public:
  typedef Struct16 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getF();
  inline void setF( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestLists::Struct16::Pipeline {
public:
  typedef Struct16 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestLists::Struct32::Reader {
public:
  typedef Struct32 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getF() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestLists::Struct32::Builder {
public:
  typedef Struct32 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getF();
  inline void setF( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestLists::Struct32::Pipeline {
public:
  typedef Struct32 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestLists::Struct64::Reader {
public:
  typedef Struct64 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getF() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestLists::Struct64::Builder {
public:
  typedef Struct64 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getF();
  inline void setF( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestLists::Struct64::Pipeline {
public:
  typedef Struct64 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestLists::StructP::Reader {
public:
  typedef StructP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasF() const;
  inline  ::capnp::Text::Reader getF() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestLists::StructP::Builder {
public:
  typedef StructP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasF();
  inline  ::capnp::Text::Builder getF();
  inline void setF( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initF(unsigned int size);
  inline void adoptF(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownF();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestLists::StructP::Pipeline {
public:
  typedef StructP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestLists::Struct0c::Reader {
public:
  typedef Struct0c Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getF() const;

  inline bool hasPad() const;
  inline  ::capnp::Text::Reader getPad() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestLists::Struct0c::Builder {
public:
  typedef Struct0c Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getF();
  inline void setF( ::capnp::Void value = ::capnp::VOID);

  inline bool hasPad();
  inline  ::capnp::Text::Builder getPad();
  inline void setPad( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPad(unsigned int size);
  inline void adoptPad(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPad();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestLists::Struct0c::Pipeline {
public:
  typedef Struct0c Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestLists::Struct1c::Reader {
public:
  typedef Struct1c Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool getF() const;

  inline bool hasPad() const;
  inline  ::capnp::Text::Reader getPad() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestLists::Struct1c::Builder {
public:
  typedef Struct1c Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getF();
  inline void setF(bool value);

  inline bool hasPad();
  inline  ::capnp::Text::Builder getPad();
  inline void setPad( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPad(unsigned int size);
  inline void adoptPad(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPad();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestLists::Struct1c::Pipeline {
public:
  typedef Struct1c Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestLists::Struct8c::Reader {
public:
  typedef Struct8c Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getF() const;

  inline bool hasPad() const;
  inline  ::capnp::Text::Reader getPad() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestLists::Struct8c::Builder {
public:
  typedef Struct8c Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getF();
  inline void setF( ::uint8_t value);

  inline bool hasPad();
  inline  ::capnp::Text::Builder getPad();
  inline void setPad( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPad(unsigned int size);
  inline void adoptPad(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPad();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestLists::Struct8c::Pipeline {
public:
  typedef Struct8c Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestLists::Struct16c::Reader {
public:
  typedef Struct16c Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getF() const;

  inline bool hasPad() const;
  inline  ::capnp::Text::Reader getPad() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestLists::Struct16c::Builder {
public:
  typedef Struct16c Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getF();
  inline void setF( ::uint16_t value);

  inline bool hasPad();
  inline  ::capnp::Text::Builder getPad();
  inline void setPad( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPad(unsigned int size);
  inline void adoptPad(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPad();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestLists::Struct16c::Pipeline {
public:
  typedef Struct16c Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestLists::Struct32c::Reader {
public:
  typedef Struct32c Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getF() const;

  inline bool hasPad() const;
  inline  ::capnp::Text::Reader getPad() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestLists::Struct32c::Builder {
public:
  typedef Struct32c Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getF();
  inline void setF( ::uint32_t value);

  inline bool hasPad();
  inline  ::capnp::Text::Builder getPad();
  inline void setPad( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPad(unsigned int size);
  inline void adoptPad(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPad();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestLists::Struct32c::Pipeline {
public:
  typedef Struct32c Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestLists::Struct64c::Reader {
public:
  typedef Struct64c Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getF() const;

  inline bool hasPad() const;
  inline  ::capnp::Text::Reader getPad() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestLists::Struct64c::Builder {
public:
  typedef Struct64c Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getF();
  inline void setF( ::uint64_t value);

  inline bool hasPad();
  inline  ::capnp::Text::Builder getPad();
  inline void setPad( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPad(unsigned int size);
  inline void adoptPad(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPad();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestLists::Struct64c::Pipeline {
public:
  typedef Struct64c Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestLists::StructPc::Reader {
public:
  typedef StructPc Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasF() const;
  inline  ::capnp::Text::Reader getF() const;

  inline  ::uint64_t getPad() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestLists::StructPc::Builder {
public:
  typedef StructPc Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasF();
  inline  ::capnp::Text::Builder getF();
  inline void setF( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initF(unsigned int size);
  inline void adoptF(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownF();

  inline  ::uint64_t getPad();
  inline void setPad( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestLists::StructPc::Pipeline {
public:
  typedef StructPc Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestFieldZeroIsBit::Reader {
public:
  typedef TestFieldZeroIsBit Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool getBit() const;

  inline bool getSecondBit() const;

  inline  ::uint8_t getThirdField() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestFieldZeroIsBit::Builder {
public:
  typedef TestFieldZeroIsBit Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getBit();
  inline void setBit(bool value);

  inline bool getSecondBit();
  inline void setSecondBit(bool value);

  inline  ::uint8_t getThirdField();
  inline void setThirdField( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestFieldZeroIsBit::Pipeline {
public:
  typedef TestFieldZeroIsBit Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestOldVersion::Reader {
public:
  typedef TestOldVersion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getOld1() const;

  inline bool hasOld2() const;
  inline  ::capnp::Text::Reader getOld2() const;

  inline bool hasOld3() const;
  inline  ::TestOldVersion::Reader getOld3() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestOldVersion::Builder {
public:
  typedef TestOldVersion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getOld1();
  inline void setOld1( ::int64_t value);

  inline bool hasOld2();
  inline  ::capnp::Text::Builder getOld2();
  inline void setOld2( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOld2(unsigned int size);
  inline void adoptOld2(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOld2();

  inline bool hasOld3();
  inline  ::TestOldVersion::Builder getOld3();
  inline void setOld3( ::TestOldVersion::Reader value);
  inline  ::TestOldVersion::Builder initOld3();
  inline void adoptOld3(::capnp::Orphan< ::TestOldVersion>&& value);
  inline ::capnp::Orphan< ::TestOldVersion> disownOld3();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestOldVersion::Pipeline {
public:
  typedef TestOldVersion Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::TestOldVersion::Pipeline getOld3();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestNewVersion::Reader {
public:
  typedef TestNewVersion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getOld1() const;

  inline bool hasOld2() const;
  inline  ::capnp::Text::Reader getOld2() const;

  inline bool hasOld3() const;
  inline  ::TestNewVersion::Reader getOld3() const;

  inline  ::int64_t getNew1() const;

  inline bool hasNew2() const;
  inline  ::capnp::Text::Reader getNew2() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestNewVersion::Builder {
public:
  typedef TestNewVersion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getOld1();
  inline void setOld1( ::int64_t value);

  inline bool hasOld2();
  inline  ::capnp::Text::Builder getOld2();
  inline void setOld2( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOld2(unsigned int size);
  inline void adoptOld2(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOld2();

  inline bool hasOld3();
  inline  ::TestNewVersion::Builder getOld3();
  inline void setOld3( ::TestNewVersion::Reader value);
  inline  ::TestNewVersion::Builder initOld3();
  inline void adoptOld3(::capnp::Orphan< ::TestNewVersion>&& value);
  inline ::capnp::Orphan< ::TestNewVersion> disownOld3();

  inline  ::int64_t getNew1();
  inline void setNew1( ::int64_t value);

  inline bool hasNew2();
  inline  ::capnp::Text::Builder getNew2();
  inline void setNew2( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNew2(unsigned int size);
  inline void adoptNew2(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNew2();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestNewVersion::Pipeline {
public:
  typedef TestNewVersion Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::TestNewVersion::Pipeline getOld3();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename Foo, typename Bar>
class TestGenerics<Foo, Bar>::Reader {
public:
  typedef TestGenerics Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename Foo2 = ::capnp::AnyPointer, typename Bar2 = ::capnp::AnyPointer>
  typename TestGenerics<Foo2, Bar2>::Reader asGeneric() {
    return typename TestGenerics<Foo2, Bar2>::Reader(_reader);
  }

  inline bool hasFoo() const;
  inline  ::capnp::ReaderFor<Foo> getFoo() const;

  inline bool hasBar() const;
  inline  ::capnp::ReaderFor<Bar> getBar() const;

  inline bool hasRev() const;
  inline typename  ::TestGenerics<Bar, Foo>::Reader getRev() const;

  inline bool hasDub() const;
  inline  ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>::Reader getDub() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Foo, typename Bar>
class TestGenerics<Foo, Bar>::Builder {
public:
  typedef TestGenerics Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename Foo2 = ::capnp::AnyPointer, typename Bar2 = ::capnp::AnyPointer>
  typename TestGenerics<Foo2, Bar2>::Builder asGeneric() {
    return typename TestGenerics<Foo2, Bar2>::Builder(_builder);
  }

  inline bool hasFoo();
  inline  ::capnp::BuilderFor<Foo> getFoo();
  inline void setFoo( ::capnp::ReaderFor<Foo> value);
  inline  ::capnp::BuilderFor<Foo> initFoo();
  inline  ::capnp::BuilderFor<Foo> initFoo(unsigned int size);
  inline void adoptFoo(::capnp::Orphan<Foo>&& value);
  inline ::capnp::Orphan<Foo> disownFoo();

  inline bool hasBar();
  inline  ::capnp::BuilderFor<Bar> getBar();
  inline void setBar( ::capnp::ReaderFor<Bar> value);
  inline  ::capnp::BuilderFor<Bar> initBar();
  inline  ::capnp::BuilderFor<Bar> initBar(unsigned int size);
  inline void adoptBar(::capnp::Orphan<Bar>&& value);
  inline ::capnp::Orphan<Bar> disownBar();

  inline bool hasRev();
  inline typename  ::TestGenerics<Bar, Foo>::Builder getRev();
  inline void setRev(typename  ::TestGenerics<Bar, Foo>::Reader value);
  inline typename  ::TestGenerics<Bar, Foo>::Builder initRev();
  inline void adoptRev(::capnp::Orphan< ::TestGenerics<Bar, Foo>>&& value);
  inline ::capnp::Orphan< ::TestGenerics<Bar, Foo>> disownRev();

  inline bool hasDub();
  inline  ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>::Builder getDub();
  inline void setDub( ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>::Reader value);
  inline  ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>::Builder initDub();
  inline void adoptDub(::capnp::Orphan< ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>>&& value);
  inline ::capnp::Orphan< ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>> disownDub();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Foo, typename Bar>
class TestGenerics<Foo, Bar>::Pipeline {
public:
  typedef TestGenerics Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<Foo> getFoo();
  inline  ::capnp::PipelineFor<Bar> getBar();
  inline typename  ::TestGenerics<Bar, Foo>::Pipeline getRev();
  inline  ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>::Pipeline getDub();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename Foo, typename Bar>
class TestGenerics<Foo, Bar>::Inner::Reader {
public:
  typedef Inner Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename Foo2 = ::capnp::AnyPointer, typename Bar2 = ::capnp::AnyPointer>
  typename TestGenerics<Foo2, Bar2>::Inner::Reader asTestGenericsGeneric() {
    return typename TestGenerics<Foo2, Bar2>::Inner::Reader(_reader);
  }

  inline bool hasFoo() const;
  inline  ::capnp::ReaderFor<Foo> getFoo() const;

  inline bool hasBar() const;
  inline  ::capnp::ReaderFor<Bar> getBar() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Foo, typename Bar>
class TestGenerics<Foo, Bar>::Inner::Builder {
public:
  typedef Inner Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename Foo2 = ::capnp::AnyPointer, typename Bar2 = ::capnp::AnyPointer>
  typename TestGenerics<Foo2, Bar2>::Inner::Builder asTestGenericsGeneric() {
    return typename TestGenerics<Foo2, Bar2>::Inner::Builder(_builder);
  }

  inline bool hasFoo();
  inline  ::capnp::BuilderFor<Foo> getFoo();
  inline void setFoo( ::capnp::ReaderFor<Foo> value);
  inline  ::capnp::BuilderFor<Foo> initFoo();
  inline  ::capnp::BuilderFor<Foo> initFoo(unsigned int size);
  inline void adoptFoo(::capnp::Orphan<Foo>&& value);
  inline ::capnp::Orphan<Foo> disownFoo();

  inline bool hasBar();
  inline  ::capnp::BuilderFor<Bar> getBar();
  inline void setBar( ::capnp::ReaderFor<Bar> value);
  inline  ::capnp::BuilderFor<Bar> initBar();
  inline  ::capnp::BuilderFor<Bar> initBar(unsigned int size);
  inline void adoptBar(::capnp::Orphan<Bar>&& value);
  inline ::capnp::Orphan<Bar> disownBar();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Foo, typename Bar>
class TestGenerics<Foo, Bar>::Inner::Pipeline {
public:
  typedef Inner Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<Foo> getFoo();
  inline  ::capnp::PipelineFor<Bar> getBar();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename Foo, typename Bar>
template <typename Baz>
class TestGenerics<Foo, Bar>::Inner2<Baz>::Reader {
public:
  typedef Inner2 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename Baz2 = ::capnp::AnyPointer>
  typename Inner2<Baz2>::Reader asGeneric() {
    return typename Inner2<Baz2>::Reader(_reader);
  }

  template <typename Foo2 = ::capnp::AnyPointer, typename Bar2 = ::capnp::AnyPointer>
  typename TestGenerics<Foo2, Bar2>::template Inner2<Baz>::Reader asTestGenericsGeneric() {
    return typename TestGenerics<Foo2, Bar2>::template Inner2<Baz>::Reader(_reader);
  }

  inline bool hasBar() const;
  inline  ::capnp::ReaderFor<Bar> getBar() const;

  inline bool hasBaz() const;
  inline  ::capnp::ReaderFor<Baz> getBaz() const;

  inline bool hasInnerBound() const;
  inline typename  ::TestGenerics<Foo, Bar>::Inner::Reader getInnerBound() const;

  inline bool hasInnerUnbound() const;
  inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner::Reader getInnerUnbound() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Foo, typename Bar>
template <typename Baz>
class TestGenerics<Foo, Bar>::Inner2<Baz>::Builder {
public:
  typedef Inner2 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename Baz2 = ::capnp::AnyPointer>
  typename Inner2<Baz2>::Builder asGeneric() {
    return typename Inner2<Baz2>::Builder(_builder);
  }

  template <typename Foo2 = ::capnp::AnyPointer, typename Bar2 = ::capnp::AnyPointer>
  typename TestGenerics<Foo2, Bar2>::template Inner2<Baz>::Builder asTestGenericsGeneric() {
    return typename TestGenerics<Foo2, Bar2>::template Inner2<Baz>::Builder(_builder);
  }

  inline bool hasBar();
  inline  ::capnp::BuilderFor<Bar> getBar();
  inline void setBar( ::capnp::ReaderFor<Bar> value);
  inline  ::capnp::BuilderFor<Bar> initBar();
  inline  ::capnp::BuilderFor<Bar> initBar(unsigned int size);
  inline void adoptBar(::capnp::Orphan<Bar>&& value);
  inline ::capnp::Orphan<Bar> disownBar();

  inline bool hasBaz();
  inline  ::capnp::BuilderFor<Baz> getBaz();
  inline void setBaz( ::capnp::ReaderFor<Baz> value);
  inline  ::capnp::BuilderFor<Baz> initBaz();
  inline  ::capnp::BuilderFor<Baz> initBaz(unsigned int size);
  inline void adoptBaz(::capnp::Orphan<Baz>&& value);
  inline ::capnp::Orphan<Baz> disownBaz();

  inline bool hasInnerBound();
  inline typename  ::TestGenerics<Foo, Bar>::Inner::Builder getInnerBound();
  inline void setInnerBound(typename  ::TestGenerics<Foo, Bar>::Inner::Reader value);
  inline typename  ::TestGenerics<Foo, Bar>::Inner::Builder initInnerBound();
  inline void adoptInnerBound(::capnp::Orphan<typename  ::TestGenerics<Foo, Bar>::Inner>&& value);
  inline ::capnp::Orphan<typename  ::TestGenerics<Foo, Bar>::Inner> disownInnerBound();

  inline bool hasInnerUnbound();
  inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner::Builder getInnerUnbound();
  inline void setInnerUnbound( ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner::Reader value);
  inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner::Builder initInnerUnbound();
  inline void adoptInnerUnbound(::capnp::Orphan< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner>&& value);
  inline ::capnp::Orphan< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner> disownInnerUnbound();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
class TestGenerics<Foo, Bar>::Inner2<Baz>::Pipeline {
public:
  typedef Inner2 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<Bar> getBar();
  inline  ::capnp::PipelineFor<Baz> getBaz();
  inline typename  ::TestGenerics<Foo, Bar>::Inner::Pipeline getInnerBound();
  inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner::Pipeline getInnerUnbound();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
class TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Reader {
public:
  typedef DeepNest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename Qux2 = ::capnp::AnyPointer>
  typename DeepNest<Qux2>::Reader asGeneric() {
    return typename DeepNest<Qux2>::Reader(_reader);
  }

  template <typename Baz2 = ::capnp::AnyPointer>
  typename Inner2<Baz2>::template DeepNest<Qux>::Reader asInner2Generic() {
    return typename Inner2<Baz2>::template DeepNest<Qux>::Reader(_reader);
  }

  template <typename Foo2 = ::capnp::AnyPointer, typename Bar2 = ::capnp::AnyPointer>
  typename TestGenerics<Foo2, Bar2>::template Inner2<Baz>::Reader asTestGenericsGeneric() {
    return typename TestGenerics<Foo2, Bar2>::template Inner2<Baz>::Reader(_reader);
  }

  inline bool hasFoo() const;
  inline  ::capnp::ReaderFor<Foo> getFoo() const;

  inline bool hasBar() const;
  inline  ::capnp::ReaderFor<Bar> getBar() const;

  inline bool hasBaz() const;
  inline  ::capnp::ReaderFor<Baz> getBaz() const;

  inline bool hasQux() const;
  inline  ::capnp::ReaderFor<Qux> getQux() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
class TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder {
public:
  typedef DeepNest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename Qux2 = ::capnp::AnyPointer>
  typename DeepNest<Qux2>::Builder asGeneric() {
    return typename DeepNest<Qux2>::Builder(_builder);
  }

  template <typename Baz2 = ::capnp::AnyPointer>
  typename Inner2<Baz2>::template DeepNest<Qux>::Builder asInner2Generic() {
    return typename Inner2<Baz2>::template DeepNest<Qux>::Builder(_builder);
  }

  template <typename Foo2 = ::capnp::AnyPointer, typename Bar2 = ::capnp::AnyPointer>
  typename TestGenerics<Foo2, Bar2>::template Inner2<Baz>::Builder asTestGenericsGeneric() {
    return typename TestGenerics<Foo2, Bar2>::template Inner2<Baz>::Builder(_builder);
  }

  inline bool hasFoo();
  inline  ::capnp::BuilderFor<Foo> getFoo();
  inline void setFoo( ::capnp::ReaderFor<Foo> value);
  inline  ::capnp::BuilderFor<Foo> initFoo();
  inline  ::capnp::BuilderFor<Foo> initFoo(unsigned int size);
  inline void adoptFoo(::capnp::Orphan<Foo>&& value);
  inline ::capnp::Orphan<Foo> disownFoo();

  inline bool hasBar();
  inline  ::capnp::BuilderFor<Bar> getBar();
  inline void setBar( ::capnp::ReaderFor<Bar> value);
  inline  ::capnp::BuilderFor<Bar> initBar();
  inline  ::capnp::BuilderFor<Bar> initBar(unsigned int size);
  inline void adoptBar(::capnp::Orphan<Bar>&& value);
  inline ::capnp::Orphan<Bar> disownBar();

  inline bool hasBaz();
  inline  ::capnp::BuilderFor<Baz> getBaz();
  inline void setBaz( ::capnp::ReaderFor<Baz> value);
  inline  ::capnp::BuilderFor<Baz> initBaz();
  inline  ::capnp::BuilderFor<Baz> initBaz(unsigned int size);
  inline void adoptBaz(::capnp::Orphan<Baz>&& value);
  inline ::capnp::Orphan<Baz> disownBaz();

  inline bool hasQux();
  inline  ::capnp::BuilderFor<Qux> getQux();
  inline void setQux( ::capnp::ReaderFor<Qux> value);
  inline  ::capnp::BuilderFor<Qux> initQux();
  inline  ::capnp::BuilderFor<Qux> initQux(unsigned int size);
  inline void adoptQux(::capnp::Orphan<Qux>&& value);
  inline ::capnp::Orphan<Qux> disownQux();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
class TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Pipeline {
public:
  typedef DeepNest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<Foo> getFoo();
  inline  ::capnp::PipelineFor<Bar> getBar();
  inline  ::capnp::PipelineFor<Baz> getBaz();
  inline  ::capnp::PipelineFor<Qux> getQux();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename Foo, typename Bar>
class TestGenericsWrapper<Foo, Bar>::Reader {
public:
  typedef TestGenericsWrapper Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename Foo2 = ::capnp::AnyPointer, typename Bar2 = ::capnp::AnyPointer>
  typename TestGenericsWrapper<Foo2, Bar2>::Reader asGeneric() {
    return typename TestGenericsWrapper<Foo2, Bar2>::Reader(_reader);
  }

  inline bool hasValue() const;
  inline typename  ::TestGenerics<Foo, Bar>::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Foo, typename Bar>
class TestGenericsWrapper<Foo, Bar>::Builder {
public:
  typedef TestGenericsWrapper Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename Foo2 = ::capnp::AnyPointer, typename Bar2 = ::capnp::AnyPointer>
  typename TestGenericsWrapper<Foo2, Bar2>::Builder asGeneric() {
    return typename TestGenericsWrapper<Foo2, Bar2>::Builder(_builder);
  }

  inline bool hasValue();
  inline typename  ::TestGenerics<Foo, Bar>::Builder getValue();
  inline void setValue(typename  ::TestGenerics<Foo, Bar>::Reader value);
  inline typename  ::TestGenerics<Foo, Bar>::Builder initValue();
  inline void adoptValue(::capnp::Orphan< ::TestGenerics<Foo, Bar>>&& value);
  inline ::capnp::Orphan< ::TestGenerics<Foo, Bar>> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Foo, typename Bar>
class TestGenericsWrapper<Foo, Bar>::Pipeline {
public:
  typedef TestGenericsWrapper Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename  ::TestGenerics<Foo, Bar>::Pipeline getValue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestGenericsWrapper2::Reader {
public:
  typedef TestGenericsWrapper2 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasValue() const;
  inline  ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestGenericsWrapper2::Builder {
public:
  typedef TestGenericsWrapper2 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasValue();
  inline  ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Builder getValue();
  inline void setValue( ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Reader value);
  inline  ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Builder initValue();
  inline void adoptValue(::capnp::Orphan< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>>&& value);
  inline ::capnp::Orphan< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestGenericsWrapper2::Pipeline {
public:
  typedef TestGenericsWrapper2 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Pipeline getValue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestUseGenerics::Reader {
public:
  typedef TestUseGenerics Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasBasic() const;
  inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Reader getBasic() const;

  inline bool hasInner() const;
  inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner::Reader getInner() const;

  inline bool hasInner2() const;
  inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>::Reader getInner2() const;

  inline bool hasUnspecified() const;
  inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Reader getUnspecified() const;

  inline bool hasUnspecifiedInner() const;
  inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>::Reader getUnspecifiedInner() const;

  inline bool hasDefault() const;
  inline  ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Reader getDefault() const;

  inline bool hasDefaultInner() const;
  inline  ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner::Reader getDefaultInner() const;

  inline bool hasDefaultUser() const;
  inline  ::TestUseGenerics::Reader getDefaultUser() const;

  inline bool hasWrapper() const;
  inline  ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>::Reader getWrapper() const;

  inline bool hasDefaultWrapper() const;
  inline  ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Reader getDefaultWrapper() const;

  inline bool hasDefaultWrapper2() const;
  inline  ::TestGenericsWrapper2::Reader getDefaultWrapper2() const;

  inline bool hasListOfGenerics() const;
  inline  ::capnp::List< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>::Reader getListOfGenerics() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestUseGenerics::Builder {
public:
  typedef TestUseGenerics Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBasic();
  inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Builder getBasic();
  inline void setBasic( ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Reader value);
  inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Builder initBasic();
  inline void adoptBasic(::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>>&& value);
  inline ::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>> disownBasic();

  inline bool hasInner();
  inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner::Builder getInner();
  inline void setInner( ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner::Reader value);
  inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner::Builder initInner();
  inline void adoptInner(::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner>&& value);
  inline ::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner> disownInner();

  inline bool hasInner2();
  inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>::Builder getInner2();
  inline void setInner2( ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>::Reader value);
  inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>::Builder initInner2();
  inline void adoptInner2(::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>> disownInner2();

  inline bool hasUnspecified();
  inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Builder getUnspecified();
  inline void setUnspecified( ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Reader value);
  inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Builder initUnspecified();
  inline void adoptUnspecified(::capnp::Orphan< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>>&& value);
  inline ::capnp::Orphan< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>> disownUnspecified();

  inline bool hasUnspecifiedInner();
  inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>::Builder getUnspecifiedInner();
  inline void setUnspecifiedInner( ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>::Reader value);
  inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>::Builder initUnspecifiedInner();
  inline void adoptUnspecifiedInner(::capnp::Orphan< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>> disownUnspecifiedInner();

  inline bool hasDefault();
  inline  ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Builder getDefault();
  inline void setDefault( ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Reader value);
  inline  ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Builder initDefault();
  inline void adoptDefault(::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>> disownDefault();

  inline bool hasDefaultInner();
  inline  ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner::Builder getDefaultInner();
  inline void setDefaultInner( ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner::Reader value);
  inline  ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner::Builder initDefaultInner();
  inline void adoptDefaultInner(::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner>&& value);
  inline ::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner> disownDefaultInner();

  inline bool hasDefaultUser();
  inline  ::TestUseGenerics::Builder getDefaultUser();
  inline void setDefaultUser( ::TestUseGenerics::Reader value);
  inline  ::TestUseGenerics::Builder initDefaultUser();
  inline void adoptDefaultUser(::capnp::Orphan< ::TestUseGenerics>&& value);
  inline ::capnp::Orphan< ::TestUseGenerics> disownDefaultUser();

  inline bool hasWrapper();
  inline  ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>::Builder getWrapper();
  inline void setWrapper( ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>::Reader value);
  inline  ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>::Builder initWrapper();
  inline void adoptWrapper(::capnp::Orphan< ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>>&& value);
  inline ::capnp::Orphan< ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>> disownWrapper();

  inline bool hasDefaultWrapper();
  inline  ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Builder getDefaultWrapper();
  inline void setDefaultWrapper( ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Reader value);
  inline  ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Builder initDefaultWrapper();
  inline void adoptDefaultWrapper(::capnp::Orphan< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>>&& value);
  inline ::capnp::Orphan< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>> disownDefaultWrapper();

  inline bool hasDefaultWrapper2();
  inline  ::TestGenericsWrapper2::Builder getDefaultWrapper2();
  inline void setDefaultWrapper2( ::TestGenericsWrapper2::Reader value);
  inline  ::TestGenericsWrapper2::Builder initDefaultWrapper2();
  inline void adoptDefaultWrapper2(::capnp::Orphan< ::TestGenericsWrapper2>&& value);
  inline ::capnp::Orphan< ::TestGenericsWrapper2> disownDefaultWrapper2();

  inline bool hasListOfGenerics();
  inline  ::capnp::List< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>::Builder getListOfGenerics();
  inline void setListOfGenerics( ::capnp::List< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>::Reader value);
  inline  ::capnp::List< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>::Builder initListOfGenerics(unsigned int size);
  inline void adoptListOfGenerics(::capnp::Orphan< ::capnp::List< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>> disownListOfGenerics();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestUseGenerics::Pipeline {
public:
  typedef TestUseGenerics Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Pipeline getBasic();
  inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner::Pipeline getInner();
  inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>::Pipeline getInner2();
  inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Pipeline getUnspecified();
  inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>::Pipeline getUnspecifiedInner();
  inline  ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Pipeline getDefault();
  inline  ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner::Pipeline getDefaultInner();
  inline  ::TestUseGenerics::Pipeline getDefaultUser();
  inline  ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>::Pipeline getWrapper();
  inline  ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Pipeline getDefaultWrapper();
  inline  ::TestGenericsWrapper2::Pipeline getDefaultWrapper2();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename K, typename V>
class GenericMap<K, V>::Reader {
public:
  typedef GenericMap Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename K2 = ::capnp::AnyPointer, typename V2 = ::capnp::AnyPointer>
  typename GenericMap<K2, V2>::Reader asGeneric() {
    return typename GenericMap<K2, V2>::Reader(_reader);
  }

  inline bool hasEntries() const;
  inline typename  ::capnp::List<typename  ::GenericMap<K, V>::Entry>::Reader getEntries() const;

  inline bool hasA() const;
  inline  ::capnp::List< ::TestAllTypes>::Reader getA() const;

  inline bool hasB() const;
  inline typename  ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>::Reader getB() const;

  inline bool hasC() const;
  inline typename  ::capnp::List< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>::Reader getC() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename K, typename V>
class GenericMap<K, V>::Builder {
public:
  typedef GenericMap Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename K2 = ::capnp::AnyPointer, typename V2 = ::capnp::AnyPointer>
  typename GenericMap<K2, V2>::Builder asGeneric() {
    return typename GenericMap<K2, V2>::Builder(_builder);
  }

  inline bool hasEntries();
  inline typename  ::capnp::List<typename  ::GenericMap<K, V>::Entry>::Builder getEntries();
  inline void setEntries(typename  ::capnp::List<typename  ::GenericMap<K, V>::Entry>::Reader value);
  inline typename  ::capnp::List<typename  ::GenericMap<K, V>::Entry>::Builder initEntries(unsigned int size);
  inline void adoptEntries(::capnp::Orphan< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>&& value);
  inline ::capnp::Orphan< ::capnp::List<typename  ::GenericMap<K, V>::Entry>> disownEntries();

  inline bool hasA();
  inline  ::capnp::List< ::TestAllTypes>::Builder getA();
  inline void setA( ::capnp::List< ::TestAllTypes>::Reader value);
  inline  ::capnp::List< ::TestAllTypes>::Builder initA(unsigned int size);
  inline void adoptA(::capnp::Orphan< ::capnp::List< ::TestAllTypes>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TestAllTypes>> disownA();

  inline bool hasB();
  inline typename  ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>::Builder getB();
  inline void setB(typename  ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>::Reader value);
  inline void setB(::kj::ArrayPtr<const typename  ::capnp::List<typename  ::GenericMap<K, V>::Entry>::Reader> value);
  inline typename  ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>::Builder initB(unsigned int size);
  inline void adoptB(::capnp::Orphan< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>> disownB();

  inline bool hasC();
  inline typename  ::capnp::List< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>::Builder getC();
  inline void setC(typename  ::capnp::List< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>::Reader value);
  inline void setC(::kj::ArrayPtr<const typename  ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>::Reader> value);
  inline typename  ::capnp::List< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>::Builder initC(unsigned int size);
  inline void adoptC(::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>> disownC();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename K, typename V>
class GenericMap<K, V>::Pipeline {
public:
  typedef GenericMap Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename K, typename V>
class GenericMap<K, V>::Entry::Reader {
public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  template <typename K2 = ::capnp::AnyPointer, typename V2 = ::capnp::AnyPointer>
  typename GenericMap<K2, V2>::Entry::Reader asGenericMapGeneric() {
    return typename GenericMap<K2, V2>::Entry::Reader(_reader);
  }

  inline bool hasKey() const;
  inline  ::capnp::ReaderFor<K> getKey() const;

  inline bool hasValue() const;
  inline  ::capnp::ReaderFor<V> getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename K, typename V>
class GenericMap<K, V>::Entry::Builder {
public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename K2 = ::capnp::AnyPointer, typename V2 = ::capnp::AnyPointer>
  typename GenericMap<K2, V2>::Entry::Builder asGenericMapGeneric() {
    return typename GenericMap<K2, V2>::Entry::Builder(_builder);
  }

  inline bool hasKey();
  inline  ::capnp::BuilderFor<K> getKey();
  inline void setKey( ::capnp::ReaderFor<K> value);
  inline  ::capnp::BuilderFor<K> initKey();
  inline  ::capnp::BuilderFor<K> initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan<K>&& value);
  inline ::capnp::Orphan<K> disownKey();

  inline bool hasValue();
  inline  ::capnp::BuilderFor<V> getValue();
  inline void setValue( ::capnp::ReaderFor<V> value);
  inline  ::capnp::BuilderFor<V> initValue();
  inline  ::capnp::BuilderFor<V> initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan<V>&& value);
  inline ::capnp::Orphan<V> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename K, typename V>
class GenericMap<K, V>::Entry::Pipeline {
public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<K> getKey();
  inline  ::capnp::PipelineFor<V> getValue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestEmptyStruct::Reader {
public:
  typedef TestEmptyStruct Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestEmptyStruct::Builder {
public:
  typedef TestEmptyStruct Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestEmptyStruct::Pipeline {
public:
  typedef TestEmptyStruct Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestConstants::Reader {
public:
  typedef TestConstants Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestConstants::Builder {
public:
  typedef TestConstants Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestConstants::Pipeline {
public:
  typedef TestConstants Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::capnp::Void TestAllTypes::Reader::getVoidField() const {
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestAllTypes::Builder::getVoidField() {
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setVoidField( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestAllTypes::Reader::getBoolField() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool TestAllTypes::Builder::getBoolField() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setBoolField(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int8_t TestAllTypes::Reader::getInt8Field() const {
  return _reader.getDataField< ::int8_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int8_t TestAllTypes::Builder::getInt8Field() {
  return _builder.getDataField< ::int8_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setInt8Field( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int16_t TestAllTypes::Reader::getInt16Field() const {
  return _reader.getDataField< ::int16_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int16_t TestAllTypes::Builder::getInt16Field() {
  return _builder.getDataField< ::int16_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setInt16Field( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TestAllTypes::Reader::getInt32Field() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestAllTypes::Builder::getInt32Field() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setInt32Field( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t TestAllTypes::Reader::getInt64Field() const {
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestAllTypes::Builder::getInt64Field() {
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setInt64Field( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t TestAllTypes::Reader::getUInt8Field() const {
  return _reader.getDataField< ::uint8_t>(
      16 * ::capnp::ELEMENTS);
}

inline  ::uint8_t TestAllTypes::Builder::getUInt8Field() {
  return _builder.getDataField< ::uint8_t>(
      16 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setUInt8Field( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      16 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t TestAllTypes::Reader::getUInt16Field() const {
  return _reader.getDataField< ::uint16_t>(
      9 * ::capnp::ELEMENTS);
}

inline  ::uint16_t TestAllTypes::Builder::getUInt16Field() {
  return _builder.getDataField< ::uint16_t>(
      9 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setUInt16Field( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      9 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TestAllTypes::Reader::getUInt32Field() const {
  return _reader.getDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint32_t TestAllTypes::Builder::getUInt32Field() {
  return _builder.getDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setUInt32Field( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TestAllTypes::Reader::getUInt64Field() const {
  return _reader.getDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint64_t TestAllTypes::Builder::getUInt64Field() {
  return _builder.getDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setUInt64Field( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline float TestAllTypes::Reader::getFloat32Field() const {
  return _reader.getDataField<float>(
      8 * ::capnp::ELEMENTS);
}

inline float TestAllTypes::Builder::getFloat32Field() {
  return _builder.getDataField<float>(
      8 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setFloat32Field(float value) {
  _builder.setDataField<float>(
      8 * ::capnp::ELEMENTS, value);
}

inline double TestAllTypes::Reader::getFloat64Field() const {
  return _reader.getDataField<double>(
      5 * ::capnp::ELEMENTS);
}

inline double TestAllTypes::Builder::getFloat64Field() {
  return _builder.getDataField<double>(
      5 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setFloat64Field(double value) {
  _builder.setDataField<double>(
      5 * ::capnp::ELEMENTS, value);
}

inline bool TestAllTypes::Reader::hasTextField() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestAllTypes::Builder::hasTextField() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestAllTypes::Reader::getTextField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestAllTypes::Builder::getTextField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestAllTypes::Builder::setTextField( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestAllTypes::Builder::initTextField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestAllTypes::Builder::adoptTextField(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestAllTypes::Builder::disownTextField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool TestAllTypes::Reader::hasDataField() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool TestAllTypes::Builder::hasDataField() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader TestAllTypes::Reader::getDataField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder TestAllTypes::Builder::getDataField() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void TestAllTypes::Builder::setDataField( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder TestAllTypes::Builder::initDataField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void TestAllTypes::Builder::adoptDataField(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> TestAllTypes::Builder::disownDataField() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool TestAllTypes::Reader::hasStructField() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool TestAllTypes::Builder::hasStructField() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::TestAllTypes::Reader TestAllTypes::Reader::getStructField() const {
  return ::capnp::_::PointerHelpers< ::TestAllTypes>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::TestAllTypes::Builder TestAllTypes::Builder::getStructField() {
  return ::capnp::_::PointerHelpers< ::TestAllTypes>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TestAllTypes::Pipeline TestAllTypes::Pipeline::getStructField() {
  return  ::TestAllTypes::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void TestAllTypes::Builder::setStructField( ::TestAllTypes::Reader value) {
  ::capnp::_::PointerHelpers< ::TestAllTypes>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::TestAllTypes::Builder TestAllTypes::Builder::initStructField() {
  return ::capnp::_::PointerHelpers< ::TestAllTypes>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void TestAllTypes::Builder::adoptStructField(
    ::capnp::Orphan< ::TestAllTypes>&& value) {
  ::capnp::_::PointerHelpers< ::TestAllTypes>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TestAllTypes> TestAllTypes::Builder::disownStructField() {
  return ::capnp::_::PointerHelpers< ::TestAllTypes>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::TestEnum TestAllTypes::Reader::getEnumField() const {
  return _reader.getDataField< ::TestEnum>(
      18 * ::capnp::ELEMENTS);
}

inline  ::TestEnum TestAllTypes::Builder::getEnumField() {
  return _builder.getDataField< ::TestEnum>(
      18 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setEnumField( ::TestEnum value) {
  _builder.setDataField< ::TestEnum>(
      18 * ::capnp::ELEMENTS, value);
}

inline  ::capnp::Void TestAllTypes::Reader::getInterfaceField() const {
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestAllTypes::Builder::getInterfaceField() {
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setInterfaceField( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestAllTypes::Reader::hasVoidList() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool TestAllTypes::Builder::hasVoidList() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Void>::Reader TestAllTypes::Reader::getVoidList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Void>::Builder TestAllTypes::Builder::getVoidList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void TestAllTypes::Builder::setVoidList( ::capnp::List< ::capnp::Void>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline void TestAllTypes::Builder::setVoidList(::kj::ArrayPtr<const  ::capnp::Void> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Void>::Builder TestAllTypes::Builder::initVoidList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void TestAllTypes::Builder::adoptVoidList(
    ::capnp::Orphan< ::capnp::List< ::capnp::Void>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Void>> TestAllTypes::Builder::disownVoidList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool TestAllTypes::Reader::hasBoolList() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool TestAllTypes::Builder::hasBoolList() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader TestAllTypes::Reader::getBoolList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder TestAllTypes::Builder::getBoolList() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void TestAllTypes::Builder::setBoolList( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline void TestAllTypes::Builder::setBoolList(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder TestAllTypes::Builder::initBoolList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void TestAllTypes::Builder::adoptBoolList(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> TestAllTypes::Builder::disownBoolList() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool TestAllTypes::Reader::hasInt8List() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool TestAllTypes::Builder::hasInt8List() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int8_t>::Reader TestAllTypes::Reader::getInt8List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int8_t>::Builder TestAllTypes::Builder::getInt8List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void TestAllTypes::Builder::setInt8List( ::capnp::List< ::int8_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline void TestAllTypes::Builder::setInt8List(::kj::ArrayPtr<const  ::int8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int8_t>::Builder TestAllTypes::Builder::initInt8List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void TestAllTypes::Builder::adoptInt8List(
    ::capnp::Orphan< ::capnp::List< ::int8_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int8_t>> TestAllTypes::Builder::disownInt8List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool TestAllTypes::Reader::hasInt16List() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool TestAllTypes::Builder::hasInt16List() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int16_t>::Reader TestAllTypes::Reader::getInt16List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int16_t>::Builder TestAllTypes::Builder::getInt16List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void TestAllTypes::Builder::setInt16List( ::capnp::List< ::int16_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline void TestAllTypes::Builder::setInt16List(::kj::ArrayPtr<const  ::int16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int16_t>::Builder TestAllTypes::Builder::initInt16List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void TestAllTypes::Builder::adoptInt16List(
    ::capnp::Orphan< ::capnp::List< ::int16_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int16_t>> TestAllTypes::Builder::disownInt16List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool TestAllTypes::Reader::hasInt32List() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool TestAllTypes::Builder::hasInt32List() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader TestAllTypes::Reader::getInt32List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t>::Builder TestAllTypes::Builder::getInt32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void TestAllTypes::Builder::setInt32List( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline void TestAllTypes::Builder::setInt32List(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder TestAllTypes::Builder::initInt32List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void TestAllTypes::Builder::adoptInt32List(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> TestAllTypes::Builder::disownInt32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool TestAllTypes::Reader::hasInt64List() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool TestAllTypes::Builder::hasInt64List() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int64_t>::Reader TestAllTypes::Reader::getInt64List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int64_t>::Builder TestAllTypes::Builder::getInt64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void TestAllTypes::Builder::setInt64List( ::capnp::List< ::int64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline void TestAllTypes::Builder::setInt64List(::kj::ArrayPtr<const  ::int64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int64_t>::Builder TestAllTypes::Builder::initInt64List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void TestAllTypes::Builder::adoptInt64List(
    ::capnp::Orphan< ::capnp::List< ::int64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int64_t>> TestAllTypes::Builder::disownInt64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool TestAllTypes::Reader::hasUInt8List() const {
  return !_reader.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline bool TestAllTypes::Builder::hasUInt8List() {
  return !_builder.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t>::Reader TestAllTypes::Reader::getUInt8List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::get(
      _reader.getPointerField(9 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t>::Builder TestAllTypes::Builder::getUInt8List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::get(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}
inline void TestAllTypes::Builder::setUInt8List( ::capnp::List< ::uint8_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline void TestAllTypes::Builder::setUInt8List(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t>::Builder TestAllTypes::Builder::initUInt8List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::init(
      _builder.getPointerField(9 * ::capnp::POINTERS), size);
}
inline void TestAllTypes::Builder::adoptUInt8List(
    ::capnp::Orphan< ::capnp::List< ::uint8_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::adopt(
      _builder.getPointerField(9 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t>> TestAllTypes::Builder::disownUInt8List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::disown(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}

inline bool TestAllTypes::Reader::hasUInt16List() const {
  return !_reader.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline bool TestAllTypes::Builder::hasUInt16List() {
  return !_builder.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint16_t>::Reader TestAllTypes::Reader::getUInt16List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::get(
      _reader.getPointerField(10 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint16_t>::Builder TestAllTypes::Builder::getUInt16List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::get(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}
inline void TestAllTypes::Builder::setUInt16List( ::capnp::List< ::uint16_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline void TestAllTypes::Builder::setUInt16List(::kj::ArrayPtr<const  ::uint16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint16_t>::Builder TestAllTypes::Builder::initUInt16List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::init(
      _builder.getPointerField(10 * ::capnp::POINTERS), size);
}
inline void TestAllTypes::Builder::adoptUInt16List(
    ::capnp::Orphan< ::capnp::List< ::uint16_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::adopt(
      _builder.getPointerField(10 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint16_t>> TestAllTypes::Builder::disownUInt16List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::disown(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}

inline bool TestAllTypes::Reader::hasUInt32List() const {
  return !_reader.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline bool TestAllTypes::Builder::hasUInt32List() {
  return !_builder.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t>::Reader TestAllTypes::Reader::getUInt32List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _reader.getPointerField(11 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t>::Builder TestAllTypes::Builder::getUInt32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}
inline void TestAllTypes::Builder::setUInt32List( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline void TestAllTypes::Builder::setUInt32List(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t>::Builder TestAllTypes::Builder::initUInt32List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(
      _builder.getPointerField(11 * ::capnp::POINTERS), size);
}
inline void TestAllTypes::Builder::adoptUInt32List(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(
      _builder.getPointerField(11 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> TestAllTypes::Builder::disownUInt32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}

inline bool TestAllTypes::Reader::hasUInt64List() const {
  return !_reader.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline bool TestAllTypes::Builder::hasUInt64List() {
  return !_builder.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader TestAllTypes::Reader::getUInt64List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(12 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder TestAllTypes::Builder::getUInt64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}
inline void TestAllTypes::Builder::setUInt64List( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(12 * ::capnp::POINTERS), value);
}
inline void TestAllTypes::Builder::setUInt64List(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(12 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder TestAllTypes::Builder::initUInt64List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(12 * ::capnp::POINTERS), size);
}
inline void TestAllTypes::Builder::adoptUInt64List(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(12 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> TestAllTypes::Builder::disownUInt64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}

inline bool TestAllTypes::Reader::hasFloat32List() const {
  return !_reader.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline bool TestAllTypes::Builder::hasFloat32List() {
  return !_builder.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader TestAllTypes::Reader::getFloat32List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _reader.getPointerField(13 * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder TestAllTypes::Builder::getFloat32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}
inline void TestAllTypes::Builder::setFloat32List( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(13 * ::capnp::POINTERS), value);
}
inline void TestAllTypes::Builder::setFloat32List(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(13 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder TestAllTypes::Builder::initFloat32List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(
      _builder.getPointerField(13 * ::capnp::POINTERS), size);
}
inline void TestAllTypes::Builder::adoptFloat32List(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(
      _builder.getPointerField(13 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> TestAllTypes::Builder::disownFloat32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}

inline bool TestAllTypes::Reader::hasFloat64List() const {
  return !_reader.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline bool TestAllTypes::Builder::hasFloat64List() {
  return !_builder.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader TestAllTypes::Reader::getFloat64List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(14 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder TestAllTypes::Builder::getFloat64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}
inline void TestAllTypes::Builder::setFloat64List( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(14 * ::capnp::POINTERS), value);
}
inline void TestAllTypes::Builder::setFloat64List(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(14 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder TestAllTypes::Builder::initFloat64List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(14 * ::capnp::POINTERS), size);
}
inline void TestAllTypes::Builder::adoptFloat64List(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(14 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> TestAllTypes::Builder::disownFloat64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}

inline bool TestAllTypes::Reader::hasTextList() const {
  return !_reader.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline bool TestAllTypes::Builder::hasTextList() {
  return !_builder.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader TestAllTypes::Reader::getTextList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(15 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder TestAllTypes::Builder::getTextList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}
inline void TestAllTypes::Builder::setTextList( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(15 * ::capnp::POINTERS), value);
}
inline void TestAllTypes::Builder::setTextList(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(15 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder TestAllTypes::Builder::initTextList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(15 * ::capnp::POINTERS), size);
}
inline void TestAllTypes::Builder::adoptTextList(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(15 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> TestAllTypes::Builder::disownTextList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}

inline bool TestAllTypes::Reader::hasDataList() const {
  return !_reader.getPointerField(16 * ::capnp::POINTERS).isNull();
}
inline bool TestAllTypes::Builder::hasDataList() {
  return !_builder.getPointerField(16 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Data>::Reader TestAllTypes::Reader::getDataList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::get(
      _reader.getPointerField(16 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Data>::Builder TestAllTypes::Builder::getDataList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::get(
      _builder.getPointerField(16 * ::capnp::POINTERS));
}
inline void TestAllTypes::Builder::setDataList( ::capnp::List< ::capnp::Data>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::set(
      _builder.getPointerField(16 * ::capnp::POINTERS), value);
}
inline void TestAllTypes::Builder::setDataList(::kj::ArrayPtr<const  ::capnp::Data::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::set(
      _builder.getPointerField(16 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Data>::Builder TestAllTypes::Builder::initDataList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::init(
      _builder.getPointerField(16 * ::capnp::POINTERS), size);
}
inline void TestAllTypes::Builder::adoptDataList(
    ::capnp::Orphan< ::capnp::List< ::capnp::Data>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::adopt(
      _builder.getPointerField(16 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Data>> TestAllTypes::Builder::disownDataList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::disown(
      _builder.getPointerField(16 * ::capnp::POINTERS));
}

inline bool TestAllTypes::Reader::hasStructList() const {
  return !_reader.getPointerField(17 * ::capnp::POINTERS).isNull();
}
inline bool TestAllTypes::Builder::hasStructList() {
  return !_builder.getPointerField(17 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TestAllTypes>::Reader TestAllTypes::Reader::getStructList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestAllTypes>>::get(
      _reader.getPointerField(17 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::TestAllTypes>::Builder TestAllTypes::Builder::getStructList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestAllTypes>>::get(
      _builder.getPointerField(17 * ::capnp::POINTERS));
}
inline void TestAllTypes::Builder::setStructList( ::capnp::List< ::TestAllTypes>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestAllTypes>>::set(
      _builder.getPointerField(17 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TestAllTypes>::Builder TestAllTypes::Builder::initStructList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestAllTypes>>::init(
      _builder.getPointerField(17 * ::capnp::POINTERS), size);
}
inline void TestAllTypes::Builder::adoptStructList(
    ::capnp::Orphan< ::capnp::List< ::TestAllTypes>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestAllTypes>>::adopt(
      _builder.getPointerField(17 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TestAllTypes>> TestAllTypes::Builder::disownStructList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestAllTypes>>::disown(
      _builder.getPointerField(17 * ::capnp::POINTERS));
}

inline bool TestAllTypes::Reader::hasEnumList() const {
  return !_reader.getPointerField(18 * ::capnp::POINTERS).isNull();
}
inline bool TestAllTypes::Builder::hasEnumList() {
  return !_builder.getPointerField(18 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TestEnum>::Reader TestAllTypes::Reader::getEnumList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestEnum>>::get(
      _reader.getPointerField(18 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::TestEnum>::Builder TestAllTypes::Builder::getEnumList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestEnum>>::get(
      _builder.getPointerField(18 * ::capnp::POINTERS));
}
inline void TestAllTypes::Builder::setEnumList( ::capnp::List< ::TestEnum>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestEnum>>::set(
      _builder.getPointerField(18 * ::capnp::POINTERS), value);
}
inline void TestAllTypes::Builder::setEnumList(::kj::ArrayPtr<const  ::TestEnum> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestEnum>>::set(
      _builder.getPointerField(18 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TestEnum>::Builder TestAllTypes::Builder::initEnumList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestEnum>>::init(
      _builder.getPointerField(18 * ::capnp::POINTERS), size);
}
inline void TestAllTypes::Builder::adoptEnumList(
    ::capnp::Orphan< ::capnp::List< ::TestEnum>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestEnum>>::adopt(
      _builder.getPointerField(18 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TestEnum>> TestAllTypes::Builder::disownEnumList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestEnum>>::disown(
      _builder.getPointerField(18 * ::capnp::POINTERS));
}

inline  ::capnp::Void TestDefaults::Reader::getVoidField() const {
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestDefaults::Builder::getVoidField() {
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestDefaults::Builder::setVoidField( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestDefaults::Reader::getBoolField() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS, true);
}

inline bool TestDefaults::Builder::getBoolField() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS, true);
}
inline void TestDefaults::Builder::setBoolField(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value, true);
}

inline  ::int8_t TestDefaults::Reader::getInt8Field() const {
  return _reader.getDataField< ::int8_t>(
      1 * ::capnp::ELEMENTS, -123);
}

inline  ::int8_t TestDefaults::Builder::getInt8Field() {
  return _builder.getDataField< ::int8_t>(
      1 * ::capnp::ELEMENTS, -123);
}
inline void TestDefaults::Builder::setInt8Field( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      1 * ::capnp::ELEMENTS, value, -123);
}

inline  ::int16_t TestDefaults::Reader::getInt16Field() const {
  return _reader.getDataField< ::int16_t>(
      1 * ::capnp::ELEMENTS, -12345);
}

inline  ::int16_t TestDefaults::Builder::getInt16Field() {
  return _builder.getDataField< ::int16_t>(
      1 * ::capnp::ELEMENTS, -12345);
}
inline void TestDefaults::Builder::setInt16Field( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      1 * ::capnp::ELEMENTS, value, -12345);
}

inline  ::int32_t TestDefaults::Reader::getInt32Field() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, -12345678);
}

inline  ::int32_t TestDefaults::Builder::getInt32Field() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, -12345678);
}
inline void TestDefaults::Builder::setInt32Field( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value, -12345678);
}

inline  ::int64_t TestDefaults::Reader::getInt64Field() const {
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, -123456789012345ll);
}

inline  ::int64_t TestDefaults::Builder::getInt64Field() {
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, -123456789012345ll);
}
inline void TestDefaults::Builder::setInt64Field( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value, -123456789012345ll);
}

inline  ::uint8_t TestDefaults::Reader::getUInt8Field() const {
  return _reader.getDataField< ::uint8_t>(
      16 * ::capnp::ELEMENTS, 234u);
}

inline  ::uint8_t TestDefaults::Builder::getUInt8Field() {
  return _builder.getDataField< ::uint8_t>(
      16 * ::capnp::ELEMENTS, 234u);
}
inline void TestDefaults::Builder::setUInt8Field( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      16 * ::capnp::ELEMENTS, value, 234u);
}

inline  ::uint16_t TestDefaults::Reader::getUInt16Field() const {
  return _reader.getDataField< ::uint16_t>(
      9 * ::capnp::ELEMENTS, 45678u);
}

inline  ::uint16_t TestDefaults::Builder::getUInt16Field() {
  return _builder.getDataField< ::uint16_t>(
      9 * ::capnp::ELEMENTS, 45678u);
}
inline void TestDefaults::Builder::setUInt16Field( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      9 * ::capnp::ELEMENTS, value, 45678u);
}

inline  ::uint32_t TestDefaults::Reader::getUInt32Field() const {
  return _reader.getDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS, 3456789012u);
}

inline  ::uint32_t TestDefaults::Builder::getUInt32Field() {
  return _builder.getDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS, 3456789012u);
}
inline void TestDefaults::Builder::setUInt32Field( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS, value, 3456789012u);
}

inline  ::uint64_t TestDefaults::Reader::getUInt64Field() const {
  return _reader.getDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS, 12345678901234567890ull);
}

inline  ::uint64_t TestDefaults::Builder::getUInt64Field() {
  return _builder.getDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS, 12345678901234567890ull);
}
inline void TestDefaults::Builder::setUInt64Field( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS, value, 12345678901234567890ull);
}

inline float TestDefaults::Reader::getFloat32Field() const {
  return _reader.getDataField<float>(
      8 * ::capnp::ELEMENTS, 1150963712u);
}

inline float TestDefaults::Builder::getFloat32Field() {
  return _builder.getDataField<float>(
      8 * ::capnp::ELEMENTS, 1150963712u);
}
inline void TestDefaults::Builder::setFloat32Field(float value) {
  _builder.setDataField<float>(
      8 * ::capnp::ELEMENTS, value, 1150963712u);
}

inline double TestDefaults::Reader::getFloat64Field() const {
  return _reader.getDataField<double>(
      5 * ::capnp::ELEMENTS, 14534676766106106624ull);
}

inline double TestDefaults::Builder::getFloat64Field() {
  return _builder.getDataField<double>(
      5 * ::capnp::ELEMENTS, 14534676766106106624ull);
}
inline void TestDefaults::Builder::setFloat64Field(double value) {
  _builder.setDataField<double>(
      5 * ::capnp::ELEMENTS, value, 14534676766106106624ull);
}

inline bool TestDefaults::Reader::hasTextField() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasTextField() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestDefaults::Reader::getTextField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 372, 3);
}
inline  ::capnp::Text::Builder TestDefaults::Builder::getTextField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 372, 3);
}
inline void TestDefaults::Builder::setTextField( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestDefaults::Builder::initTextField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestDefaults::Builder::adoptTextField(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestDefaults::Builder::disownTextField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool TestDefaults::Reader::hasDataField() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasDataField() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader TestDefaults::Reader::getDataField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 382, 3);
}
inline  ::capnp::Data::Builder TestDefaults::Builder::getDataField() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 382, 3);
}
inline void TestDefaults::Builder::setDataField( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder TestDefaults::Builder::initDataField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void TestDefaults::Builder::adoptDataField(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> TestDefaults::Builder::disownDataField() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool TestDefaults::Reader::hasStructField() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasStructField() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::TestAllTypes::Reader TestDefaults::Reader::getStructField() const {
  return ::capnp::_::PointerHelpers< ::TestAllTypes>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 391);
}
inline  ::TestAllTypes::Builder TestDefaults::Builder::getStructField() {
  return ::capnp::_::PointerHelpers< ::TestAllTypes>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 391);
}
#if !CAPNP_LITE
inline  ::TestAllTypes::Pipeline TestDefaults::Pipeline::getStructField() {
  return  ::TestAllTypes::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void TestDefaults::Builder::setStructField( ::TestAllTypes::Reader value) {
  ::capnp::_::PointerHelpers< ::TestAllTypes>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::TestAllTypes::Builder TestDefaults::Builder::initStructField() {
  return ::capnp::_::PointerHelpers< ::TestAllTypes>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void TestDefaults::Builder::adoptStructField(
    ::capnp::Orphan< ::TestAllTypes>&& value) {
  ::capnp::_::PointerHelpers< ::TestAllTypes>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TestAllTypes> TestDefaults::Builder::disownStructField() {
  return ::capnp::_::PointerHelpers< ::TestAllTypes>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::TestEnum TestDefaults::Reader::getEnumField() const {
  return _reader.getDataField< ::TestEnum>(
      18 * ::capnp::ELEMENTS, 5u);
}

inline  ::TestEnum TestDefaults::Builder::getEnumField() {
  return _builder.getDataField< ::TestEnum>(
      18 * ::capnp::ELEMENTS, 5u);
}
inline void TestDefaults::Builder::setEnumField( ::TestEnum value) {
  _builder.setDataField< ::TestEnum>(
      18 * ::capnp::ELEMENTS, value, 5u);
}

inline  ::capnp::Void TestDefaults::Reader::getInterfaceField() const {
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestDefaults::Builder::getInterfaceField() {
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestDefaults::Builder::setInterfaceField( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestDefaults::Reader::hasVoidList() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasVoidList() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Void>::Reader TestDefaults::Reader::getVoidList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 623);
}
inline  ::capnp::List< ::capnp::Void>::Builder TestDefaults::Builder::getVoidList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 623);
}
inline void TestDefaults::Builder::setVoidList( ::capnp::List< ::capnp::Void>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline void TestDefaults::Builder::setVoidList(::kj::ArrayPtr<const  ::capnp::Void> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Void>::Builder TestDefaults::Builder::initVoidList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void TestDefaults::Builder::adoptVoidList(
    ::capnp::Orphan< ::capnp::List< ::capnp::Void>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Void>> TestDefaults::Builder::disownVoidList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool TestDefaults::Reader::hasBoolList() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasBoolList() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader TestDefaults::Reader::getBoolList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 636);
}
inline  ::capnp::List<bool>::Builder TestDefaults::Builder::getBoolList() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 636);
}
inline void TestDefaults::Builder::setBoolList( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline void TestDefaults::Builder::setBoolList(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder TestDefaults::Builder::initBoolList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void TestDefaults::Builder::adoptBoolList(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> TestDefaults::Builder::disownBoolList() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool TestDefaults::Reader::hasInt8List() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasInt8List() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int8_t>::Reader TestDefaults::Reader::getInt8List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 650);
}
inline  ::capnp::List< ::int8_t>::Builder TestDefaults::Builder::getInt8List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 650);
}
inline void TestDefaults::Builder::setInt8List( ::capnp::List< ::int8_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline void TestDefaults::Builder::setInt8List(::kj::ArrayPtr<const  ::int8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int8_t>::Builder TestDefaults::Builder::initInt8List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void TestDefaults::Builder::adoptInt8List(
    ::capnp::Orphan< ::capnp::List< ::int8_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int8_t>> TestDefaults::Builder::disownInt8List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool TestDefaults::Reader::hasInt16List() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasInt16List() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int16_t>::Reader TestDefaults::Reader::getInt16List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 664);
}
inline  ::capnp::List< ::int16_t>::Builder TestDefaults::Builder::getInt16List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 664);
}
inline void TestDefaults::Builder::setInt16List( ::capnp::List< ::int16_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline void TestDefaults::Builder::setInt16List(::kj::ArrayPtr<const  ::int16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int16_t>::Builder TestDefaults::Builder::initInt16List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void TestDefaults::Builder::adoptInt16List(
    ::capnp::Orphan< ::capnp::List< ::int16_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int16_t>> TestDefaults::Builder::disownInt16List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool TestDefaults::Reader::hasInt32List() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasInt32List() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader TestDefaults::Reader::getInt32List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 678);
}
inline  ::capnp::List< ::int32_t>::Builder TestDefaults::Builder::getInt32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 678);
}
inline void TestDefaults::Builder::setInt32List( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline void TestDefaults::Builder::setInt32List(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder TestDefaults::Builder::initInt32List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void TestDefaults::Builder::adoptInt32List(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> TestDefaults::Builder::disownInt32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool TestDefaults::Reader::hasInt64List() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasInt64List() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int64_t>::Reader TestDefaults::Reader::getInt64List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 692);
}
inline  ::capnp::List< ::int64_t>::Builder TestDefaults::Builder::getInt64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 692);
}
inline void TestDefaults::Builder::setInt64List( ::capnp::List< ::int64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline void TestDefaults::Builder::setInt64List(::kj::ArrayPtr<const  ::int64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int64_t>::Builder TestDefaults::Builder::initInt64List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void TestDefaults::Builder::adoptInt64List(
    ::capnp::Orphan< ::capnp::List< ::int64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int64_t>> TestDefaults::Builder::disownInt64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool TestDefaults::Reader::hasUInt8List() const {
  return !_reader.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasUInt8List() {
  return !_builder.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t>::Reader TestDefaults::Reader::getUInt8List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::get(
      _reader.getPointerField(9 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 707);
}
inline  ::capnp::List< ::uint8_t>::Builder TestDefaults::Builder::getUInt8List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::get(
      _builder.getPointerField(9 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 707);
}
inline void TestDefaults::Builder::setUInt8List( ::capnp::List< ::uint8_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline void TestDefaults::Builder::setUInt8List(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t>::Builder TestDefaults::Builder::initUInt8List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::init(
      _builder.getPointerField(9 * ::capnp::POINTERS), size);
}
inline void TestDefaults::Builder::adoptUInt8List(
    ::capnp::Orphan< ::capnp::List< ::uint8_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::adopt(
      _builder.getPointerField(9 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t>> TestDefaults::Builder::disownUInt8List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::disown(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}

inline bool TestDefaults::Reader::hasUInt16List() const {
  return !_reader.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasUInt16List() {
  return !_builder.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint16_t>::Reader TestDefaults::Reader::getUInt16List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::get(
      _reader.getPointerField(10 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 721);
}
inline  ::capnp::List< ::uint16_t>::Builder TestDefaults::Builder::getUInt16List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::get(
      _builder.getPointerField(10 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 721);
}
inline void TestDefaults::Builder::setUInt16List( ::capnp::List< ::uint16_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline void TestDefaults::Builder::setUInt16List(::kj::ArrayPtr<const  ::uint16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint16_t>::Builder TestDefaults::Builder::initUInt16List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::init(
      _builder.getPointerField(10 * ::capnp::POINTERS), size);
}
inline void TestDefaults::Builder::adoptUInt16List(
    ::capnp::Orphan< ::capnp::List< ::uint16_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::adopt(
      _builder.getPointerField(10 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint16_t>> TestDefaults::Builder::disownUInt16List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::disown(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}

inline bool TestDefaults::Reader::hasUInt32List() const {
  return !_reader.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasUInt32List() {
  return !_builder.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t>::Reader TestDefaults::Reader::getUInt32List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _reader.getPointerField(11 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 735);
}
inline  ::capnp::List< ::uint32_t>::Builder TestDefaults::Builder::getUInt32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _builder.getPointerField(11 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 735);
}
inline void TestDefaults::Builder::setUInt32List( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline void TestDefaults::Builder::setUInt32List(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t>::Builder TestDefaults::Builder::initUInt32List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(
      _builder.getPointerField(11 * ::capnp::POINTERS), size);
}
inline void TestDefaults::Builder::adoptUInt32List(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(
      _builder.getPointerField(11 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> TestDefaults::Builder::disownUInt32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}

inline bool TestDefaults::Reader::hasUInt64List() const {
  return !_reader.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasUInt64List() {
  return !_builder.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader TestDefaults::Reader::getUInt64List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(12 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 749);
}
inline  ::capnp::List< ::uint64_t>::Builder TestDefaults::Builder::getUInt64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(12 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 749);
}
inline void TestDefaults::Builder::setUInt64List( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(12 * ::capnp::POINTERS), value);
}
inline void TestDefaults::Builder::setUInt64List(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(12 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder TestDefaults::Builder::initUInt64List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(12 * ::capnp::POINTERS), size);
}
inline void TestDefaults::Builder::adoptUInt64List(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(12 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> TestDefaults::Builder::disownUInt64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}

inline bool TestDefaults::Reader::hasFloat32List() const {
  return !_reader.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasFloat32List() {
  return !_builder.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader TestDefaults::Reader::getFloat32List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _reader.getPointerField(13 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 763);
}
inline  ::capnp::List<float>::Builder TestDefaults::Builder::getFloat32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _builder.getPointerField(13 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 763);
}
inline void TestDefaults::Builder::setFloat32List( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(13 * ::capnp::POINTERS), value);
}
inline void TestDefaults::Builder::setFloat32List(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(13 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder TestDefaults::Builder::initFloat32List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(
      _builder.getPointerField(13 * ::capnp::POINTERS), size);
}
inline void TestDefaults::Builder::adoptFloat32List(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(
      _builder.getPointerField(13 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> TestDefaults::Builder::disownFloat32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}

inline bool TestDefaults::Reader::hasFloat64List() const {
  return !_reader.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasFloat64List() {
  return !_builder.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader TestDefaults::Reader::getFloat64List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(14 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 778);
}
inline  ::capnp::List<double>::Builder TestDefaults::Builder::getFloat64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(14 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 778);
}
inline void TestDefaults::Builder::setFloat64List( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(14 * ::capnp::POINTERS), value);
}
inline void TestDefaults::Builder::setFloat64List(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(14 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder TestDefaults::Builder::initFloat64List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(14 * ::capnp::POINTERS), size);
}
inline void TestDefaults::Builder::adoptFloat64List(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(14 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> TestDefaults::Builder::disownFloat64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}

inline bool TestDefaults::Reader::hasTextList() const {
  return !_reader.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasTextList() {
  return !_builder.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader TestDefaults::Reader::getTextList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(15 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 795);
}
inline  ::capnp::List< ::capnp::Text>::Builder TestDefaults::Builder::getTextList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(15 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 795);
}
inline void TestDefaults::Builder::setTextList( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(15 * ::capnp::POINTERS), value);
}
inline void TestDefaults::Builder::setTextList(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(15 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder TestDefaults::Builder::initTextList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(15 * ::capnp::POINTERS), size);
}
inline void TestDefaults::Builder::adoptTextList(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(15 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> TestDefaults::Builder::disownTextList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}

inline bool TestDefaults::Reader::hasDataList() const {
  return !_reader.getPointerField(16 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasDataList() {
  return !_builder.getPointerField(16 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Data>::Reader TestDefaults::Reader::getDataList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::get(
      _reader.getPointerField(16 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 814);
}
inline  ::capnp::List< ::capnp::Data>::Builder TestDefaults::Builder::getDataList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::get(
      _builder.getPointerField(16 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 814);
}
inline void TestDefaults::Builder::setDataList( ::capnp::List< ::capnp::Data>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::set(
      _builder.getPointerField(16 * ::capnp::POINTERS), value);
}
inline void TestDefaults::Builder::setDataList(::kj::ArrayPtr<const  ::capnp::Data::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::set(
      _builder.getPointerField(16 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Data>::Builder TestDefaults::Builder::initDataList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::init(
      _builder.getPointerField(16 * ::capnp::POINTERS), size);
}
inline void TestDefaults::Builder::adoptDataList(
    ::capnp::Orphan< ::capnp::List< ::capnp::Data>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::adopt(
      _builder.getPointerField(16 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Data>> TestDefaults::Builder::disownDataList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::disown(
      _builder.getPointerField(16 * ::capnp::POINTERS));
}

inline bool TestDefaults::Reader::hasStructList() const {
  return !_reader.getPointerField(17 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasStructList() {
  return !_builder.getPointerField(17 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TestAllTypes>::Reader TestDefaults::Reader::getStructList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestAllTypes>>::get(
      _reader.getPointerField(17 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 834);
}
inline  ::capnp::List< ::TestAllTypes>::Builder TestDefaults::Builder::getStructList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestAllTypes>>::get(
      _builder.getPointerField(17 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 834);
}
inline void TestDefaults::Builder::setStructList( ::capnp::List< ::TestAllTypes>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestAllTypes>>::set(
      _builder.getPointerField(17 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TestAllTypes>::Builder TestDefaults::Builder::initStructList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestAllTypes>>::init(
      _builder.getPointerField(17 * ::capnp::POINTERS), size);
}
inline void TestDefaults::Builder::adoptStructList(
    ::capnp::Orphan< ::capnp::List< ::TestAllTypes>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestAllTypes>>::adopt(
      _builder.getPointerField(17 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TestAllTypes>> TestDefaults::Builder::disownStructList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestAllTypes>>::disown(
      _builder.getPointerField(17 * ::capnp::POINTERS));
}

inline bool TestDefaults::Reader::hasEnumList() const {
  return !_reader.getPointerField(18 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasEnumList() {
  return !_builder.getPointerField(18 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TestEnum>::Reader TestDefaults::Reader::getEnumList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestEnum>>::get(
      _reader.getPointerField(18 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 929);
}
inline  ::capnp::List< ::TestEnum>::Builder TestDefaults::Builder::getEnumList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestEnum>>::get(
      _builder.getPointerField(18 * ::capnp::POINTERS),
        ::capnp::schemas::bp_e37a20a013e0cd99 + 929);
}
inline void TestDefaults::Builder::setEnumList( ::capnp::List< ::TestEnum>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestEnum>>::set(
      _builder.getPointerField(18 * ::capnp::POINTERS), value);
}
inline void TestDefaults::Builder::setEnumList(::kj::ArrayPtr<const  ::TestEnum> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestEnum>>::set(
      _builder.getPointerField(18 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TestEnum>::Builder TestDefaults::Builder::initEnumList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestEnum>>::init(
      _builder.getPointerField(18 * ::capnp::POINTERS), size);
}
inline void TestDefaults::Builder::adoptEnumList(
    ::capnp::Orphan< ::capnp::List< ::TestEnum>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestEnum>>::adopt(
      _builder.getPointerField(18 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TestEnum>> TestDefaults::Builder::disownEnumList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestEnum>>::disown(
      _builder.getPointerField(18 * ::capnp::POINTERS));
}

inline bool TestDefaults::Reader::hasInterfaceList() const {
  return !_reader.getPointerField(19 * ::capnp::POINTERS).isNull();
}
inline bool TestDefaults::Builder::hasInterfaceList() {
  return !_builder.getPointerField(19 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Void>::Reader TestDefaults::Reader::getInterfaceList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::get(
      _reader.getPointerField(19 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Void>::Builder TestDefaults::Builder::getInterfaceList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::get(
      _builder.getPointerField(19 * ::capnp::POINTERS));
}
inline void TestDefaults::Builder::setInterfaceList( ::capnp::List< ::capnp::Void>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::set(
      _builder.getPointerField(19 * ::capnp::POINTERS), value);
}
inline void TestDefaults::Builder::setInterfaceList(::kj::ArrayPtr<const  ::capnp::Void> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::set(
      _builder.getPointerField(19 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Void>::Builder TestDefaults::Builder::initInterfaceList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::init(
      _builder.getPointerField(19 * ::capnp::POINTERS), size);
}
inline void TestDefaults::Builder::adoptInterfaceList(
    ::capnp::Orphan< ::capnp::List< ::capnp::Void>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::adopt(
      _builder.getPointerField(19 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Void>> TestDefaults::Builder::disownInterfaceList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::disown(
      _builder.getPointerField(19 * ::capnp::POINTERS));
}

inline bool TestAnyPointer::Reader::hasAnyPointerField() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestAnyPointer::Builder::hasAnyPointerField() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline ::capnp::AnyPointer::Reader TestAnyPointer::Reader::getAnyPointerField() const {
  return ::capnp::AnyPointer::Reader(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline ::capnp::AnyPointer::Builder TestAnyPointer::Builder::getAnyPointerField() {
  return ::capnp::AnyPointer::Builder(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline ::capnp::AnyPointer::Builder TestAnyPointer::Builder::initAnyPointerField() {
  auto result = ::capnp::AnyPointer::Builder(
      _builder.getPointerField(0 * ::capnp::POINTERS));
  result.clear();
  return result;
}

inline bool TestOutOfOrder::Reader::hasQux() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestOutOfOrder::Builder::hasQux() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestOutOfOrder::Reader::getQux() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::getQux() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestOutOfOrder::Builder::setQux( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::initQux(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestOutOfOrder::Builder::adoptQux(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOutOfOrder::Builder::disownQux() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool TestOutOfOrder::Reader::hasGrault() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool TestOutOfOrder::Builder::hasGrault() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestOutOfOrder::Reader::getGrault() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::getGrault() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void TestOutOfOrder::Builder::setGrault( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::initGrault(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void TestOutOfOrder::Builder::adoptGrault(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOutOfOrder::Builder::disownGrault() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool TestOutOfOrder::Reader::hasBar() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool TestOutOfOrder::Builder::hasBar() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestOutOfOrder::Reader::getBar() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::getBar() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void TestOutOfOrder::Builder::setBar( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::initBar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void TestOutOfOrder::Builder::adoptBar(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOutOfOrder::Builder::disownBar() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool TestOutOfOrder::Reader::hasFoo() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool TestOutOfOrder::Builder::hasFoo() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestOutOfOrder::Reader::getFoo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::getFoo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void TestOutOfOrder::Builder::setFoo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::initFoo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void TestOutOfOrder::Builder::adoptFoo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOutOfOrder::Builder::disownFoo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool TestOutOfOrder::Reader::hasCorge() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool TestOutOfOrder::Builder::hasCorge() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestOutOfOrder::Reader::getCorge() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::getCorge() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void TestOutOfOrder::Builder::setCorge( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::initCorge(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void TestOutOfOrder::Builder::adoptCorge(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOutOfOrder::Builder::disownCorge() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool TestOutOfOrder::Reader::hasWaldo() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool TestOutOfOrder::Builder::hasWaldo() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestOutOfOrder::Reader::getWaldo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::getWaldo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void TestOutOfOrder::Builder::setWaldo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::initWaldo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void TestOutOfOrder::Builder::adoptWaldo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOutOfOrder::Builder::disownWaldo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool TestOutOfOrder::Reader::hasQuux() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool TestOutOfOrder::Builder::hasQuux() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestOutOfOrder::Reader::getQuux() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::getQuux() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void TestOutOfOrder::Builder::setQuux( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::initQuux(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void TestOutOfOrder::Builder::adoptQuux(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOutOfOrder::Builder::disownQuux() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool TestOutOfOrder::Reader::hasGarply() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool TestOutOfOrder::Builder::hasGarply() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestOutOfOrder::Reader::getGarply() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::getGarply() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void TestOutOfOrder::Builder::setGarply( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::initGarply(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void TestOutOfOrder::Builder::adoptGarply(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOutOfOrder::Builder::disownGarply() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool TestOutOfOrder::Reader::hasBaz() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool TestOutOfOrder::Builder::hasBaz() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestOutOfOrder::Reader::getBaz() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::getBaz() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void TestOutOfOrder::Builder::setBaz( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::initBaz(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void TestOutOfOrder::Builder::adoptBaz(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOutOfOrder::Builder::disownBaz() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline typename TestUnion::Union0::Reader TestUnion::Reader::getUnion0() const {
  return typename TestUnion::Union0::Reader(_reader);
}
inline typename TestUnion::Union0::Builder TestUnion::Builder::getUnion0() {
  return typename TestUnion::Union0::Builder(_builder);
}
#if !CAPNP_LITE
inline typename TestUnion::Union0::Pipeline TestUnion::Pipeline::getUnion0() {
  return typename TestUnion::Union0::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename TestUnion::Union0::Builder TestUnion::Builder::initUnion0() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(1 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  return typename TestUnion::Union0::Builder(_builder);
}
inline typename TestUnion::Union1::Reader TestUnion::Reader::getUnion1() const {
  return typename TestUnion::Union1::Reader(_reader);
}
inline typename TestUnion::Union1::Builder TestUnion::Builder::getUnion1() {
  return typename TestUnion::Union1::Builder(_builder);
}
#if !CAPNP_LITE
inline typename TestUnion::Union1::Pipeline TestUnion::Pipeline::getUnion1() {
  return typename TestUnion::Union1::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename TestUnion::Union1::Builder TestUnion::Builder::initUnion1() {
  _builder.setDataField< ::uint16_t>(1 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(129 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint8_t>(17 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(9 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(5 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(3 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  return typename TestUnion::Union1::Builder(_builder);
}
inline typename TestUnion::Union2::Reader TestUnion::Reader::getUnion2() const {
  return typename TestUnion::Union2::Reader(_reader);
}
inline typename TestUnion::Union2::Builder TestUnion::Builder::getUnion2() {
  return typename TestUnion::Union2::Builder(_builder);
}
#if !CAPNP_LITE
inline typename TestUnion::Union2::Pipeline TestUnion::Pipeline::getUnion2() {
  return typename TestUnion::Union2::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename TestUnion::Union2::Builder TestUnion::Builder::initUnion2() {
  _builder.setDataField< ::uint16_t>(2 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(256 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint8_t>(33 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(18 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(10 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(6 * ::capnp::ELEMENTS, 0);
  return typename TestUnion::Union2::Builder(_builder);
}
inline typename TestUnion::Union3::Reader TestUnion::Reader::getUnion3() const {
  return typename TestUnion::Union3::Reader(_reader);
}
inline typename TestUnion::Union3::Builder TestUnion::Builder::getUnion3() {
  return typename TestUnion::Union3::Builder(_builder);
}
#if !CAPNP_LITE
inline typename TestUnion::Union3::Pipeline TestUnion::Pipeline::getUnion3() {
  return typename TestUnion::Union3::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename TestUnion::Union3::Builder TestUnion::Builder::initUnion3() {
  _builder.setDataField< ::uint16_t>(3 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(257 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint8_t>(34 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(19 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(11 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(7 * ::capnp::ELEMENTS, 0);
  return typename TestUnion::Union3::Builder(_builder);
}
inline bool TestUnion::Reader::getBit0() const {
  return _reader.getDataField<bool>(
      128 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::getBit0() {
  return _builder.getDataField<bool>(
      128 * ::capnp::ELEMENTS);
}
inline void TestUnion::Builder::setBit0(bool value) {
  _builder.setDataField<bool>(
      128 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Reader::getBit2() const {
  return _reader.getDataField<bool>(
      130 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::getBit2() {
  return _builder.getDataField<bool>(
      130 * ::capnp::ELEMENTS);
}
inline void TestUnion::Builder::setBit2(bool value) {
  _builder.setDataField<bool>(
      130 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Reader::getBit3() const {
  return _reader.getDataField<bool>(
      131 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::getBit3() {
  return _builder.getDataField<bool>(
      131 * ::capnp::ELEMENTS);
}
inline void TestUnion::Builder::setBit3(bool value) {
  _builder.setDataField<bool>(
      131 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Reader::getBit4() const {
  return _reader.getDataField<bool>(
      132 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::getBit4() {
  return _builder.getDataField<bool>(
      132 * ::capnp::ELEMENTS);
}
inline void TestUnion::Builder::setBit4(bool value) {
  _builder.setDataField<bool>(
      132 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Reader::getBit5() const {
  return _reader.getDataField<bool>(
      133 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::getBit5() {
  return _builder.getDataField<bool>(
      133 * ::capnp::ELEMENTS);
}
inline void TestUnion::Builder::setBit5(bool value) {
  _builder.setDataField<bool>(
      133 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Reader::getBit6() const {
  return _reader.getDataField<bool>(
      134 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::getBit6() {
  return _builder.getDataField<bool>(
      134 * ::capnp::ELEMENTS);
}
inline void TestUnion::Builder::setBit6(bool value) {
  _builder.setDataField<bool>(
      134 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Reader::getBit7() const {
  return _reader.getDataField<bool>(
      135 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::getBit7() {
  return _builder.getDataField<bool>(
      135 * ::capnp::ELEMENTS);
}
inline void TestUnion::Builder::setBit7(bool value) {
  _builder.setDataField<bool>(
      135 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t TestUnion::Reader::getByte0() const {
  return _reader.getDataField< ::uint8_t>(
      35 * ::capnp::ELEMENTS);
}

inline  ::uint8_t TestUnion::Builder::getByte0() {
  return _builder.getDataField< ::uint8_t>(
      35 * ::capnp::ELEMENTS);
}
inline void TestUnion::Builder::setByte0( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      35 * ::capnp::ELEMENTS, value);
}

inline  ::TestUnion::Union0::Which TestUnion::Union0::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::TestUnion::Union0::Which TestUnion::Union0::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union0::Reader::isU0f0s0() const {
  return which() == TestUnion::Union0::U0f0s0;
}
inline bool TestUnion::Union0::Builder::isU0f0s0() {
  return which() == TestUnion::Union0::U0f0s0;
}
inline  ::capnp::Void TestUnion::Union0::Reader::getU0f0s0() const {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f0s0),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestUnion::Union0::Builder::getU0f0s0() {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f0s0),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f0s0( ::capnp::Void value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0f0s0);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f0s1() const {
  return which() == TestUnion::Union0::U0f0s1;
}
inline bool TestUnion::Union0::Builder::isU0f0s1() {
  return which() == TestUnion::Union0::U0f0s1;
}
inline bool TestUnion::Union0::Reader::getU0f0s1() const {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f0s1),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      64 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union0::Builder::getU0f0s1() {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f0s1),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      64 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f0s1(bool value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0f0s1);
  _builder.setDataField<bool>(
      64 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f0s8() const {
  return which() == TestUnion::Union0::U0f0s8;
}
inline bool TestUnion::Union0::Builder::isU0f0s8() {
  return which() == TestUnion::Union0::U0f0s8;
}
inline  ::int8_t TestUnion::Union0::Reader::getU0f0s8() const {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f0s8),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int8_t>(
      8 * ::capnp::ELEMENTS);
}

inline  ::int8_t TestUnion::Union0::Builder::getU0f0s8() {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f0s8),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int8_t>(
      8 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f0s8( ::int8_t value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0f0s8);
  _builder.setDataField< ::int8_t>(
      8 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f0s16() const {
  return which() == TestUnion::Union0::U0f0s16;
}
inline bool TestUnion::Union0::Builder::isU0f0s16() {
  return which() == TestUnion::Union0::U0f0s16;
}
inline  ::int16_t TestUnion::Union0::Reader::getU0f0s16() const {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f0s16),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int16_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::int16_t TestUnion::Union0::Builder::getU0f0s16() {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f0s16),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int16_t>(
      4 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f0s16( ::int16_t value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0f0s16);
  _builder.setDataField< ::int16_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f0s32() const {
  return which() == TestUnion::Union0::U0f0s32;
}
inline bool TestUnion::Union0::Builder::isU0f0s32() {
  return which() == TestUnion::Union0::U0f0s32;
}
inline  ::int32_t TestUnion::Union0::Reader::getU0f0s32() const {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f0s32),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestUnion::Union0::Builder::getU0f0s32() {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f0s32),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f0s32( ::int32_t value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0f0s32);
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f0s64() const {
  return which() == TestUnion::Union0::U0f0s64;
}
inline bool TestUnion::Union0::Builder::isU0f0s64() {
  return which() == TestUnion::Union0::U0f0s64;
}
inline  ::int64_t TestUnion::Union0::Reader::getU0f0s64() const {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f0s64),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestUnion::Union0::Builder::getU0f0s64() {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f0s64),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f0s64( ::int64_t value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0f0s64);
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f0sp() const {
  return which() == TestUnion::Union0::U0f0sp;
}
inline bool TestUnion::Union0::Builder::isU0f0sp() {
  return which() == TestUnion::Union0::U0f0sp;
}
inline bool TestUnion::Union0::Reader::hasU0f0sp() const {
  if (which() != TestUnion::Union0::U0f0sp) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestUnion::Union0::Builder::hasU0f0sp() {
  if (which() != TestUnion::Union0::U0f0sp) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestUnion::Union0::Reader::getU0f0sp() const {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f0sp),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestUnion::Union0::Builder::getU0f0sp() {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f0sp),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestUnion::Union0::Builder::setU0f0sp( ::capnp::Text::Reader value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0f0sp);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestUnion::Union0::Builder::initU0f0sp(unsigned int size) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0f0sp);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestUnion::Union0::Builder::adoptU0f0sp(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0f0sp);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestUnion::Union0::Builder::disownU0f0sp() {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f0sp),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool TestUnion::Union0::Reader::isU0f1s0() const {
  return which() == TestUnion::Union0::U0f1s0;
}
inline bool TestUnion::Union0::Builder::isU0f1s0() {
  return which() == TestUnion::Union0::U0f1s0;
}
inline  ::capnp::Void TestUnion::Union0::Reader::getU0f1s0() const {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f1s0),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestUnion::Union0::Builder::getU0f1s0() {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f1s0),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f1s0( ::capnp::Void value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0f1s0);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f1s1() const {
  return which() == TestUnion::Union0::U0f1s1;
}
inline bool TestUnion::Union0::Builder::isU0f1s1() {
  return which() == TestUnion::Union0::U0f1s1;
}
inline bool TestUnion::Union0::Reader::getU0f1s1() const {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f1s1),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      64 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union0::Builder::getU0f1s1() {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f1s1),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      64 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f1s1(bool value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0f1s1);
  _builder.setDataField<bool>(
      64 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f1s8() const {
  return which() == TestUnion::Union0::U0f1s8;
}
inline bool TestUnion::Union0::Builder::isU0f1s8() {
  return which() == TestUnion::Union0::U0f1s8;
}
inline  ::int8_t TestUnion::Union0::Reader::getU0f1s8() const {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f1s8),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int8_t>(
      8 * ::capnp::ELEMENTS);
}

inline  ::int8_t TestUnion::Union0::Builder::getU0f1s8() {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f1s8),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int8_t>(
      8 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f1s8( ::int8_t value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0f1s8);
  _builder.setDataField< ::int8_t>(
      8 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f1s16() const {
  return which() == TestUnion::Union0::U0f1s16;
}
inline bool TestUnion::Union0::Builder::isU0f1s16() {
  return which() == TestUnion::Union0::U0f1s16;
}
inline  ::int16_t TestUnion::Union0::Reader::getU0f1s16() const {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f1s16),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int16_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::int16_t TestUnion::Union0::Builder::getU0f1s16() {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f1s16),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int16_t>(
      4 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f1s16( ::int16_t value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0f1s16);
  _builder.setDataField< ::int16_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f1s32() const {
  return which() == TestUnion::Union0::U0f1s32;
}
inline bool TestUnion::Union0::Builder::isU0f1s32() {
  return which() == TestUnion::Union0::U0f1s32;
}
inline  ::int32_t TestUnion::Union0::Reader::getU0f1s32() const {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f1s32),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestUnion::Union0::Builder::getU0f1s32() {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f1s32),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f1s32( ::int32_t value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0f1s32);
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f1s64() const {
  return which() == TestUnion::Union0::U0f1s64;
}
inline bool TestUnion::Union0::Builder::isU0f1s64() {
  return which() == TestUnion::Union0::U0f1s64;
}
inline  ::int64_t TestUnion::Union0::Reader::getU0f1s64() const {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f1s64),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestUnion::Union0::Builder::getU0f1s64() {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f1s64),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f1s64( ::int64_t value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0f1s64);
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f1sp() const {
  return which() == TestUnion::Union0::U0f1sp;
}
inline bool TestUnion::Union0::Builder::isU0f1sp() {
  return which() == TestUnion::Union0::U0f1sp;
}
inline bool TestUnion::Union0::Reader::hasU0f1sp() const {
  if (which() != TestUnion::Union0::U0f1sp) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestUnion::Union0::Builder::hasU0f1sp() {
  if (which() != TestUnion::Union0::U0f1sp) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestUnion::Union0::Reader::getU0f1sp() const {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f1sp),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestUnion::Union0::Builder::getU0f1sp() {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f1sp),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestUnion::Union0::Builder::setU0f1sp( ::capnp::Text::Reader value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0f1sp);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestUnion::Union0::Builder::initU0f1sp(unsigned int size) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0f1sp);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestUnion::Union0::Builder::adoptU0f1sp(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0f1sp);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestUnion::Union0::Builder::disownU0f1sp() {
  KJ_IREQUIRE((which() == TestUnion::Union0::U0f1sp),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool TestUnion::Union0::Reader::isPrimitiveList() const {
  return which() == TestUnion::Union0::PrimitiveList;
}
inline bool TestUnion::Union0::Builder::isPrimitiveList() {
  return which() == TestUnion::Union0::PrimitiveList;
}
inline bool TestUnion::Union0::Reader::hasPrimitiveList() const {
  if (which() != TestUnion::Union0::PrimitiveList) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestUnion::Union0::Builder::hasPrimitiveList() {
  if (which() != TestUnion::Union0::PrimitiveList) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t>::Reader TestUnion::Union0::Reader::getPrimitiveList() const {
  KJ_IREQUIRE((which() == TestUnion::Union0::PrimitiveList),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t>::Builder TestUnion::Union0::Builder::getPrimitiveList() {
  KJ_IREQUIRE((which() == TestUnion::Union0::PrimitiveList),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestUnion::Union0::Builder::setPrimitiveList( ::capnp::List< ::uint32_t>::Reader value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::PrimitiveList);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void TestUnion::Union0::Builder::setPrimitiveList(::kj::ArrayPtr<const  ::uint32_t> value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::PrimitiveList);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t>::Builder TestUnion::Union0::Builder::initPrimitiveList(unsigned int size) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::PrimitiveList);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestUnion::Union0::Builder::adoptPrimitiveList(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::PrimitiveList);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> TestUnion::Union0::Builder::disownPrimitiveList() {
  KJ_IREQUIRE((which() == TestUnion::Union0::PrimitiveList),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::TestUnion::Union1::Which TestUnion::Union1::Reader::which() const {
  return _reader.getDataField<Which>(1 * ::capnp::ELEMENTS);
}
inline  ::TestUnion::Union1::Which TestUnion::Union1::Builder::which() {
  return _builder.getDataField<Which>(1 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Reader::isU1f0s0() const {
  return which() == TestUnion::Union1::U1f0s0;
}
inline bool TestUnion::Union1::Builder::isU1f0s0() {
  return which() == TestUnion::Union1::U1f0s0;
}
inline  ::capnp::Void TestUnion::Union1::Reader::getU1f0s0() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f0s0),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestUnion::Union1::Builder::getU1f0s0() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f0s0),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f0s0( ::capnp::Void value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f0s0);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f0s1() const {
  return which() == TestUnion::Union1::U1f0s1;
}
inline bool TestUnion::Union1::Builder::isU1f0s1() {
  return which() == TestUnion::Union1::U1f0s1;
}
inline bool TestUnion::Union1::Reader::getU1f0s1() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f0s1),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      129 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::getU1f0s1() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f0s1),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      129 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f0s1(bool value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f0s1);
  _builder.setDataField<bool>(
      129 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f1s1() const {
  return which() == TestUnion::Union1::U1f1s1;
}
inline bool TestUnion::Union1::Builder::isU1f1s1() {
  return which() == TestUnion::Union1::U1f1s1;
}
inline bool TestUnion::Union1::Reader::getU1f1s1() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f1s1),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      129 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::getU1f1s1() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f1s1),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      129 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f1s1(bool value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f1s1);
  _builder.setDataField<bool>(
      129 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f0s8() const {
  return which() == TestUnion::Union1::U1f0s8;
}
inline bool TestUnion::Union1::Builder::isU1f0s8() {
  return which() == TestUnion::Union1::U1f0s8;
}
inline  ::int8_t TestUnion::Union1::Reader::getU1f0s8() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f0s8),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int8_t>(
      17 * ::capnp::ELEMENTS);
}

inline  ::int8_t TestUnion::Union1::Builder::getU1f0s8() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f0s8),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int8_t>(
      17 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f0s8( ::int8_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f0s8);
  _builder.setDataField< ::int8_t>(
      17 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f1s8() const {
  return which() == TestUnion::Union1::U1f1s8;
}
inline bool TestUnion::Union1::Builder::isU1f1s8() {
  return which() == TestUnion::Union1::U1f1s8;
}
inline  ::int8_t TestUnion::Union1::Reader::getU1f1s8() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f1s8),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int8_t>(
      17 * ::capnp::ELEMENTS);
}

inline  ::int8_t TestUnion::Union1::Builder::getU1f1s8() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f1s8),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int8_t>(
      17 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f1s8( ::int8_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f1s8);
  _builder.setDataField< ::int8_t>(
      17 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f0s16() const {
  return which() == TestUnion::Union1::U1f0s16;
}
inline bool TestUnion::Union1::Builder::isU1f0s16() {
  return which() == TestUnion::Union1::U1f0s16;
}
inline  ::int16_t TestUnion::Union1::Reader::getU1f0s16() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f0s16),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int16_t>(
      9 * ::capnp::ELEMENTS);
}

inline  ::int16_t TestUnion::Union1::Builder::getU1f0s16() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f0s16),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int16_t>(
      9 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f0s16( ::int16_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f0s16);
  _builder.setDataField< ::int16_t>(
      9 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f1s16() const {
  return which() == TestUnion::Union1::U1f1s16;
}
inline bool TestUnion::Union1::Builder::isU1f1s16() {
  return which() == TestUnion::Union1::U1f1s16;
}
inline  ::int16_t TestUnion::Union1::Reader::getU1f1s16() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f1s16),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int16_t>(
      9 * ::capnp::ELEMENTS);
}

inline  ::int16_t TestUnion::Union1::Builder::getU1f1s16() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f1s16),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int16_t>(
      9 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f1s16( ::int16_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f1s16);
  _builder.setDataField< ::int16_t>(
      9 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f0s32() const {
  return which() == TestUnion::Union1::U1f0s32;
}
inline bool TestUnion::Union1::Builder::isU1f0s32() {
  return which() == TestUnion::Union1::U1f0s32;
}
inline  ::int32_t TestUnion::Union1::Reader::getU1f0s32() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f0s32),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestUnion::Union1::Builder::getU1f0s32() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f0s32),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f0s32( ::int32_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f0s32);
  _builder.setDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f1s32() const {
  return which() == TestUnion::Union1::U1f1s32;
}
inline bool TestUnion::Union1::Builder::isU1f1s32() {
  return which() == TestUnion::Union1::U1f1s32;
}
inline  ::int32_t TestUnion::Union1::Reader::getU1f1s32() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f1s32),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestUnion::Union1::Builder::getU1f1s32() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f1s32),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f1s32( ::int32_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f1s32);
  _builder.setDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f0s64() const {
  return which() == TestUnion::Union1::U1f0s64;
}
inline bool TestUnion::Union1::Builder::isU1f0s64() {
  return which() == TestUnion::Union1::U1f0s64;
}
inline  ::int64_t TestUnion::Union1::Reader::getU1f0s64() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f0s64),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestUnion::Union1::Builder::getU1f0s64() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f0s64),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      3 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f0s64( ::int64_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f0s64);
  _builder.setDataField< ::int64_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f1s64() const {
  return which() == TestUnion::Union1::U1f1s64;
}
inline bool TestUnion::Union1::Builder::isU1f1s64() {
  return which() == TestUnion::Union1::U1f1s64;
}
inline  ::int64_t TestUnion::Union1::Reader::getU1f1s64() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f1s64),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestUnion::Union1::Builder::getU1f1s64() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f1s64),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      3 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f1s64( ::int64_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f1s64);
  _builder.setDataField< ::int64_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f0sp() const {
  return which() == TestUnion::Union1::U1f0sp;
}
inline bool TestUnion::Union1::Builder::isU1f0sp() {
  return which() == TestUnion::Union1::U1f0sp;
}
inline bool TestUnion::Union1::Reader::hasU1f0sp() const {
  if (which() != TestUnion::Union1::U1f0sp) return false;
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool TestUnion::Union1::Builder::hasU1f0sp() {
  if (which() != TestUnion::Union1::U1f0sp) return false;
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestUnion::Union1::Reader::getU1f0sp() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f0sp),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestUnion::Union1::Builder::getU1f0sp() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f0sp),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void TestUnion::Union1::Builder::setU1f0sp( ::capnp::Text::Reader value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f0sp);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestUnion::Union1::Builder::initU1f0sp(unsigned int size) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f0sp);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void TestUnion::Union1::Builder::adoptU1f0sp(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f0sp);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestUnion::Union1::Builder::disownU1f0sp() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f0sp),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool TestUnion::Union1::Reader::isU1f1sp() const {
  return which() == TestUnion::Union1::U1f1sp;
}
inline bool TestUnion::Union1::Builder::isU1f1sp() {
  return which() == TestUnion::Union1::U1f1sp;
}
inline bool TestUnion::Union1::Reader::hasU1f1sp() const {
  if (which() != TestUnion::Union1::U1f1sp) return false;
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool TestUnion::Union1::Builder::hasU1f1sp() {
  if (which() != TestUnion::Union1::U1f1sp) return false;
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestUnion::Union1::Reader::getU1f1sp() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f1sp),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestUnion::Union1::Builder::getU1f1sp() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f1sp),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void TestUnion::Union1::Builder::setU1f1sp( ::capnp::Text::Reader value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f1sp);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestUnion::Union1::Builder::initU1f1sp(unsigned int size) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f1sp);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void TestUnion::Union1::Builder::adoptU1f1sp(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f1sp);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestUnion::Union1::Builder::disownU1f1sp() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f1sp),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool TestUnion::Union1::Reader::isU1f2s0() const {
  return which() == TestUnion::Union1::U1f2s0;
}
inline bool TestUnion::Union1::Builder::isU1f2s0() {
  return which() == TestUnion::Union1::U1f2s0;
}
inline  ::capnp::Void TestUnion::Union1::Reader::getU1f2s0() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f2s0),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestUnion::Union1::Builder::getU1f2s0() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f2s0),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f2s0( ::capnp::Void value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f2s0);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f2s1() const {
  return which() == TestUnion::Union1::U1f2s1;
}
inline bool TestUnion::Union1::Builder::isU1f2s1() {
  return which() == TestUnion::Union1::U1f2s1;
}
inline bool TestUnion::Union1::Reader::getU1f2s1() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f2s1),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      129 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::getU1f2s1() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f2s1),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      129 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f2s1(bool value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f2s1);
  _builder.setDataField<bool>(
      129 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f2s8() const {
  return which() == TestUnion::Union1::U1f2s8;
}
inline bool TestUnion::Union1::Builder::isU1f2s8() {
  return which() == TestUnion::Union1::U1f2s8;
}
inline  ::int8_t TestUnion::Union1::Reader::getU1f2s8() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f2s8),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int8_t>(
      17 * ::capnp::ELEMENTS);
}

inline  ::int8_t TestUnion::Union1::Builder::getU1f2s8() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f2s8),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int8_t>(
      17 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f2s8( ::int8_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f2s8);
  _builder.setDataField< ::int8_t>(
      17 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f2s16() const {
  return which() == TestUnion::Union1::U1f2s16;
}
inline bool TestUnion::Union1::Builder::isU1f2s16() {
  return which() == TestUnion::Union1::U1f2s16;
}
inline  ::int16_t TestUnion::Union1::Reader::getU1f2s16() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f2s16),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int16_t>(
      9 * ::capnp::ELEMENTS);
}

inline  ::int16_t TestUnion::Union1::Builder::getU1f2s16() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f2s16),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int16_t>(
      9 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f2s16( ::int16_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f2s16);
  _builder.setDataField< ::int16_t>(
      9 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f2s32() const {
  return which() == TestUnion::Union1::U1f2s32;
}
inline bool TestUnion::Union1::Builder::isU1f2s32() {
  return which() == TestUnion::Union1::U1f2s32;
}
inline  ::int32_t TestUnion::Union1::Reader::getU1f2s32() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f2s32),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestUnion::Union1::Builder::getU1f2s32() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f2s32),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f2s32( ::int32_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f2s32);
  _builder.setDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f2s64() const {
  return which() == TestUnion::Union1::U1f2s64;
}
inline bool TestUnion::Union1::Builder::isU1f2s64() {
  return which() == TestUnion::Union1::U1f2s64;
}
inline  ::int64_t TestUnion::Union1::Reader::getU1f2s64() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f2s64),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestUnion::Union1::Builder::getU1f2s64() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f2s64),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      3 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f2s64( ::int64_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f2s64);
  _builder.setDataField< ::int64_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f2sp() const {
  return which() == TestUnion::Union1::U1f2sp;
}
inline bool TestUnion::Union1::Builder::isU1f2sp() {
  return which() == TestUnion::Union1::U1f2sp;
}
inline bool TestUnion::Union1::Reader::hasU1f2sp() const {
  if (which() != TestUnion::Union1::U1f2sp) return false;
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool TestUnion::Union1::Builder::hasU1f2sp() {
  if (which() != TestUnion::Union1::U1f2sp) return false;
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestUnion::Union1::Reader::getU1f2sp() const {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f2sp),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestUnion::Union1::Builder::getU1f2sp() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f2sp),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void TestUnion::Union1::Builder::setU1f2sp( ::capnp::Text::Reader value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f2sp);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestUnion::Union1::Builder::initU1f2sp(unsigned int size) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f2sp);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void TestUnion::Union1::Builder::adoptU1f2sp(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1f2sp);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestUnion::Union1::Builder::disownU1f2sp() {
  KJ_IREQUIRE((which() == TestUnion::Union1::U1f2sp),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::TestUnion::Union2::Which TestUnion::Union2::Reader::which() const {
  return _reader.getDataField<Which>(2 * ::capnp::ELEMENTS);
}
inline  ::TestUnion::Union2::Which TestUnion::Union2::Builder::which() {
  return _builder.getDataField<Which>(2 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union2::Reader::isU2f0s1() const {
  return which() == TestUnion::Union2::U2f0s1;
}
inline bool TestUnion::Union2::Builder::isU2f0s1() {
  return which() == TestUnion::Union2::U2f0s1;
}
inline bool TestUnion::Union2::Reader::getU2f0s1() const {
  KJ_IREQUIRE((which() == TestUnion::Union2::U2f0s1),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      256 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union2::Builder::getU2f0s1() {
  KJ_IREQUIRE((which() == TestUnion::Union2::U2f0s1),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      256 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union2::Builder::setU2f0s1(bool value) {
  _builder.setDataField<TestUnion::Union2::Which>(
      2 * ::capnp::ELEMENTS, TestUnion::Union2::U2f0s1);
  _builder.setDataField<bool>(
      256 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union2::Reader::isU2f0s8() const {
  return which() == TestUnion::Union2::U2f0s8;
}
inline bool TestUnion::Union2::Builder::isU2f0s8() {
  return which() == TestUnion::Union2::U2f0s8;
}
inline  ::int8_t TestUnion::Union2::Reader::getU2f0s8() const {
  KJ_IREQUIRE((which() == TestUnion::Union2::U2f0s8),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int8_t>(
      33 * ::capnp::ELEMENTS);
}

inline  ::int8_t TestUnion::Union2::Builder::getU2f0s8() {
  KJ_IREQUIRE((which() == TestUnion::Union2::U2f0s8),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int8_t>(
      33 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union2::Builder::setU2f0s8( ::int8_t value) {
  _builder.setDataField<TestUnion::Union2::Which>(
      2 * ::capnp::ELEMENTS, TestUnion::Union2::U2f0s8);
  _builder.setDataField< ::int8_t>(
      33 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union2::Reader::isU2f0s16() const {
  return which() == TestUnion::Union2::U2f0s16;
}
inline bool TestUnion::Union2::Builder::isU2f0s16() {
  return which() == TestUnion::Union2::U2f0s16;
}
inline  ::int16_t TestUnion::Union2::Reader::getU2f0s16() const {
  KJ_IREQUIRE((which() == TestUnion::Union2::U2f0s16),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int16_t>(
      18 * ::capnp::ELEMENTS);
}

inline  ::int16_t TestUnion::Union2::Builder::getU2f0s16() {
  KJ_IREQUIRE((which() == TestUnion::Union2::U2f0s16),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int16_t>(
      18 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union2::Builder::setU2f0s16( ::int16_t value) {
  _builder.setDataField<TestUnion::Union2::Which>(
      2 * ::capnp::ELEMENTS, TestUnion::Union2::U2f0s16);
  _builder.setDataField< ::int16_t>(
      18 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union2::Reader::isU2f0s32() const {
  return which() == TestUnion::Union2::U2f0s32;
}
inline bool TestUnion::Union2::Builder::isU2f0s32() {
  return which() == TestUnion::Union2::U2f0s32;
}
inline  ::int32_t TestUnion::Union2::Reader::getU2f0s32() const {
  KJ_IREQUIRE((which() == TestUnion::Union2::U2f0s32),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      10 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestUnion::Union2::Builder::getU2f0s32() {
  KJ_IREQUIRE((which() == TestUnion::Union2::U2f0s32),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      10 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union2::Builder::setU2f0s32( ::int32_t value) {
  _builder.setDataField<TestUnion::Union2::Which>(
      2 * ::capnp::ELEMENTS, TestUnion::Union2::U2f0s32);
  _builder.setDataField< ::int32_t>(
      10 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union2::Reader::isU2f0s64() const {
  return which() == TestUnion::Union2::U2f0s64;
}
inline bool TestUnion::Union2::Builder::isU2f0s64() {
  return which() == TestUnion::Union2::U2f0s64;
}
inline  ::int64_t TestUnion::Union2::Reader::getU2f0s64() const {
  KJ_IREQUIRE((which() == TestUnion::Union2::U2f0s64),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestUnion::Union2::Builder::getU2f0s64() {
  KJ_IREQUIRE((which() == TestUnion::Union2::U2f0s64),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union2::Builder::setU2f0s64( ::int64_t value) {
  _builder.setDataField<TestUnion::Union2::Which>(
      2 * ::capnp::ELEMENTS, TestUnion::Union2::U2f0s64);
  _builder.setDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::TestUnion::Union3::Which TestUnion::Union3::Reader::which() const {
  return _reader.getDataField<Which>(3 * ::capnp::ELEMENTS);
}
inline  ::TestUnion::Union3::Which TestUnion::Union3::Builder::which() {
  return _builder.getDataField<Which>(3 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union3::Reader::isU3f0s1() const {
  return which() == TestUnion::Union3::U3f0s1;
}
inline bool TestUnion::Union3::Builder::isU3f0s1() {
  return which() == TestUnion::Union3::U3f0s1;
}
inline bool TestUnion::Union3::Reader::getU3f0s1() const {
  KJ_IREQUIRE((which() == TestUnion::Union3::U3f0s1),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      257 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union3::Builder::getU3f0s1() {
  KJ_IREQUIRE((which() == TestUnion::Union3::U3f0s1),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      257 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union3::Builder::setU3f0s1(bool value) {
  _builder.setDataField<TestUnion::Union3::Which>(
      3 * ::capnp::ELEMENTS, TestUnion::Union3::U3f0s1);
  _builder.setDataField<bool>(
      257 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union3::Reader::isU3f0s8() const {
  return which() == TestUnion::Union3::U3f0s8;
}
inline bool TestUnion::Union3::Builder::isU3f0s8() {
  return which() == TestUnion::Union3::U3f0s8;
}
inline  ::int8_t TestUnion::Union3::Reader::getU3f0s8() const {
  KJ_IREQUIRE((which() == TestUnion::Union3::U3f0s8),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int8_t>(
      34 * ::capnp::ELEMENTS);
}

inline  ::int8_t TestUnion::Union3::Builder::getU3f0s8() {
  KJ_IREQUIRE((which() == TestUnion::Union3::U3f0s8),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int8_t>(
      34 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union3::Builder::setU3f0s8( ::int8_t value) {
  _builder.setDataField<TestUnion::Union3::Which>(
      3 * ::capnp::ELEMENTS, TestUnion::Union3::U3f0s8);
  _builder.setDataField< ::int8_t>(
      34 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union3::Reader::isU3f0s16() const {
  return which() == TestUnion::Union3::U3f0s16;
}
inline bool TestUnion::Union3::Builder::isU3f0s16() {
  return which() == TestUnion::Union3::U3f0s16;
}
inline  ::int16_t TestUnion::Union3::Reader::getU3f0s16() const {
  KJ_IREQUIRE((which() == TestUnion::Union3::U3f0s16),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int16_t>(
      19 * ::capnp::ELEMENTS);
}

inline  ::int16_t TestUnion::Union3::Builder::getU3f0s16() {
  KJ_IREQUIRE((which() == TestUnion::Union3::U3f0s16),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int16_t>(
      19 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union3::Builder::setU3f0s16( ::int16_t value) {
  _builder.setDataField<TestUnion::Union3::Which>(
      3 * ::capnp::ELEMENTS, TestUnion::Union3::U3f0s16);
  _builder.setDataField< ::int16_t>(
      19 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union3::Reader::isU3f0s32() const {
  return which() == TestUnion::Union3::U3f0s32;
}
inline bool TestUnion::Union3::Builder::isU3f0s32() {
  return which() == TestUnion::Union3::U3f0s32;
}
inline  ::int32_t TestUnion::Union3::Reader::getU3f0s32() const {
  KJ_IREQUIRE((which() == TestUnion::Union3::U3f0s32),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      11 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestUnion::Union3::Builder::getU3f0s32() {
  KJ_IREQUIRE((which() == TestUnion::Union3::U3f0s32),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      11 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union3::Builder::setU3f0s32( ::int32_t value) {
  _builder.setDataField<TestUnion::Union3::Which>(
      3 * ::capnp::ELEMENTS, TestUnion::Union3::U3f0s32);
  _builder.setDataField< ::int32_t>(
      11 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union3::Reader::isU3f0s64() const {
  return which() == TestUnion::Union3::U3f0s64;
}
inline bool TestUnion::Union3::Builder::isU3f0s64() {
  return which() == TestUnion::Union3::U3f0s64;
}
inline  ::int64_t TestUnion::Union3::Reader::getU3f0s64() const {
  KJ_IREQUIRE((which() == TestUnion::Union3::U3f0s64),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      7 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestUnion::Union3::Builder::getU3f0s64() {
  KJ_IREQUIRE((which() == TestUnion::Union3::U3f0s64),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      7 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union3::Builder::setU3f0s64( ::int64_t value) {
  _builder.setDataField<TestUnion::Union3::Which>(
      3 * ::capnp::ELEMENTS, TestUnion::Union3::U3f0s64);
  _builder.setDataField< ::int64_t>(
      7 * ::capnp::ELEMENTS, value);
}

inline typename TestGroups::Groups::Reader TestGroups::Reader::getGroups() const {
  return typename TestGroups::Groups::Reader(_reader);
}
inline typename TestGroups::Groups::Builder TestGroups::Builder::getGroups() {
  return typename TestGroups::Groups::Builder(_builder);
}
#if !CAPNP_LITE
inline typename TestGroups::Groups::Pipeline TestGroups::Pipeline::getGroups() {
  return typename TestGroups::Groups::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename TestGroups::Groups::Builder TestGroups::Builder::initGroups() {
  _builder.setDataField< ::uint32_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(2 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(1 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  return typename TestGroups::Groups::Builder(_builder);
}
inline  ::TestGroups::Groups::Which TestGroups::Groups::Reader::which() const {
  return _reader.getDataField<Which>(2 * ::capnp::ELEMENTS);
}
inline  ::TestGroups::Groups::Which TestGroups::Groups::Builder::which() {
  return _builder.getDataField<Which>(2 * ::capnp::ELEMENTS);
}

inline bool TestGroups::Groups::Reader::isFoo() const {
  return which() == TestGroups::Groups::Foo;
}
inline bool TestGroups::Groups::Builder::isFoo() {
  return which() == TestGroups::Groups::Foo;
}
inline typename TestGroups::Groups::Foo::Reader TestGroups::Groups::Reader::getFoo() const {
  KJ_IREQUIRE((which() == TestGroups::Groups::Foo),
              "Must check which() before get()ing a union member.");
  return typename TestGroups::Groups::Foo::Reader(_reader);
}
inline typename TestGroups::Groups::Foo::Builder TestGroups::Groups::Builder::getFoo() {
  KJ_IREQUIRE((which() == TestGroups::Groups::Foo),
              "Must check which() before get()ing a union member.");
  return typename TestGroups::Groups::Foo::Builder(_builder);
}
inline typename TestGroups::Groups::Foo::Builder TestGroups::Groups::Builder::initFoo() {
  _builder.setDataField<TestGroups::Groups::Which>(
      2 * ::capnp::ELEMENTS, TestGroups::Groups::Foo);
  _builder.setDataField< ::uint32_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(1 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  return typename TestGroups::Groups::Foo::Builder(_builder);
}
inline bool TestGroups::Groups::Reader::isBaz() const {
  return which() == TestGroups::Groups::Baz;
}
inline bool TestGroups::Groups::Builder::isBaz() {
  return which() == TestGroups::Groups::Baz;
}
inline typename TestGroups::Groups::Baz::Reader TestGroups::Groups::Reader::getBaz() const {
  KJ_IREQUIRE((which() == TestGroups::Groups::Baz),
              "Must check which() before get()ing a union member.");
  return typename TestGroups::Groups::Baz::Reader(_reader);
}
inline typename TestGroups::Groups::Baz::Builder TestGroups::Groups::Builder::getBaz() {
  KJ_IREQUIRE((which() == TestGroups::Groups::Baz),
              "Must check which() before get()ing a union member.");
  return typename TestGroups::Groups::Baz::Builder(_builder);
}
inline typename TestGroups::Groups::Baz::Builder TestGroups::Groups::Builder::initBaz() {
  _builder.setDataField<TestGroups::Groups::Which>(
      2 * ::capnp::ELEMENTS, TestGroups::Groups::Baz);
  _builder.setDataField< ::uint32_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  return typename TestGroups::Groups::Baz::Builder(_builder);
}
inline bool TestGroups::Groups::Reader::isBar() const {
  return which() == TestGroups::Groups::Bar;
}
inline bool TestGroups::Groups::Builder::isBar() {
  return which() == TestGroups::Groups::Bar;
}
inline typename TestGroups::Groups::Bar::Reader TestGroups::Groups::Reader::getBar() const {
  KJ_IREQUIRE((which() == TestGroups::Groups::Bar),
              "Must check which() before get()ing a union member.");
  return typename TestGroups::Groups::Bar::Reader(_reader);
}
inline typename TestGroups::Groups::Bar::Builder TestGroups::Groups::Builder::getBar() {
  KJ_IREQUIRE((which() == TestGroups::Groups::Bar),
              "Must check which() before get()ing a union member.");
  return typename TestGroups::Groups::Bar::Builder(_builder);
}
inline typename TestGroups::Groups::Bar::Builder TestGroups::Groups::Builder::initBar() {
  _builder.setDataField<TestGroups::Groups::Which>(
      2 * ::capnp::ELEMENTS, TestGroups::Groups::Bar);
  _builder.setDataField< ::uint32_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(1 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  return typename TestGroups::Groups::Bar::Builder(_builder);
}
inline  ::int32_t TestGroups::Groups::Foo::Reader::getCorge() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestGroups::Groups::Foo::Builder::getCorge() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestGroups::Groups::Foo::Builder::setCorge( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t TestGroups::Groups::Foo::Reader::getGrault() const {
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestGroups::Groups::Foo::Builder::getGrault() {
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TestGroups::Groups::Foo::Builder::setGrault( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool TestGroups::Groups::Foo::Reader::hasGarply() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestGroups::Groups::Foo::Builder::hasGarply() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestGroups::Groups::Foo::Reader::getGarply() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestGroups::Groups::Foo::Builder::getGarply() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestGroups::Groups::Foo::Builder::setGarply( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestGroups::Groups::Foo::Builder::initGarply(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestGroups::Groups::Foo::Builder::adoptGarply(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestGroups::Groups::Foo::Builder::disownGarply() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::capnp::Void TestGroups::Groups::Foo::Reader::getQuux() const {
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestGroups::Groups::Foo::Builder::getQuux() {
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestGroups::Groups::Foo::Builder::setQuux( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TestGroups::Groups::Baz::Reader::getCorge() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestGroups::Groups::Baz::Builder::getCorge() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestGroups::Groups::Baz::Builder::setCorge( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestGroups::Groups::Baz::Reader::hasGrault() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestGroups::Groups::Baz::Builder::hasGrault() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestGroups::Groups::Baz::Reader::getGrault() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestGroups::Groups::Baz::Builder::getGrault() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestGroups::Groups::Baz::Builder::setGrault( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestGroups::Groups::Baz::Builder::initGrault(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestGroups::Groups::Baz::Builder::adoptGrault(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestGroups::Groups::Baz::Builder::disownGrault() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool TestGroups::Groups::Baz::Reader::hasGarply() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool TestGroups::Groups::Baz::Builder::hasGarply() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestGroups::Groups::Baz::Reader::getGarply() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestGroups::Groups::Baz::Builder::getGarply() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void TestGroups::Groups::Baz::Builder::setGarply( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestGroups::Groups::Baz::Builder::initGarply(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void TestGroups::Groups::Baz::Builder::adoptGarply(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestGroups::Groups::Baz::Builder::disownGarply() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::int32_t TestGroups::Groups::Bar::Reader::getCorge() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestGroups::Groups::Bar::Builder::getCorge() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestGroups::Groups::Bar::Builder::setCorge( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestGroups::Groups::Bar::Reader::hasGrault() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestGroups::Groups::Bar::Builder::hasGrault() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestGroups::Groups::Bar::Reader::getGrault() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestGroups::Groups::Bar::Builder::getGrault() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestGroups::Groups::Bar::Builder::setGrault( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestGroups::Groups::Bar::Builder::initGrault(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestGroups::Groups::Bar::Builder::adoptGrault(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestGroups::Groups::Bar::Builder::disownGrault() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int64_t TestGroups::Groups::Bar::Reader::getGarply() const {
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestGroups::Groups::Bar::Builder::getGarply() {
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TestGroups::Groups::Bar::Builder::setGarply( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::Reader::hasList0() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::Builder::hasList0() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TestLists::Struct0>::Reader TestLists::Reader::getList0() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct0>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::TestLists::Struct0>::Builder TestLists::Builder::getList0() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct0>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestLists::Builder::setList0( ::capnp::List< ::TestLists::Struct0>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct0>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TestLists::Struct0>::Builder TestLists::Builder::initList0(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct0>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestLists::Builder::adoptList0(
    ::capnp::Orphan< ::capnp::List< ::TestLists::Struct0>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct0>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TestLists::Struct0>> TestLists::Builder::disownList0() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct0>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool TestLists::Reader::hasList1() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::Builder::hasList1() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TestLists::Struct1>::Reader TestLists::Reader::getList1() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct1>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::TestLists::Struct1>::Builder TestLists::Builder::getList1() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct1>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void TestLists::Builder::setList1( ::capnp::List< ::TestLists::Struct1>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct1>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TestLists::Struct1>::Builder TestLists::Builder::initList1(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct1>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void TestLists::Builder::adoptList1(
    ::capnp::Orphan< ::capnp::List< ::TestLists::Struct1>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct1>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TestLists::Struct1>> TestLists::Builder::disownList1() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct1>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool TestLists::Reader::hasList8() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::Builder::hasList8() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TestLists::Struct8>::Reader TestLists::Reader::getList8() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct8>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::TestLists::Struct8>::Builder TestLists::Builder::getList8() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct8>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void TestLists::Builder::setList8( ::capnp::List< ::TestLists::Struct8>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct8>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TestLists::Struct8>::Builder TestLists::Builder::initList8(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct8>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void TestLists::Builder::adoptList8(
    ::capnp::Orphan< ::capnp::List< ::TestLists::Struct8>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct8>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TestLists::Struct8>> TestLists::Builder::disownList8() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct8>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool TestLists::Reader::hasList16() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::Builder::hasList16() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TestLists::Struct16>::Reader TestLists::Reader::getList16() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct16>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::TestLists::Struct16>::Builder TestLists::Builder::getList16() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct16>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void TestLists::Builder::setList16( ::capnp::List< ::TestLists::Struct16>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct16>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TestLists::Struct16>::Builder TestLists::Builder::initList16(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct16>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void TestLists::Builder::adoptList16(
    ::capnp::Orphan< ::capnp::List< ::TestLists::Struct16>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct16>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TestLists::Struct16>> TestLists::Builder::disownList16() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct16>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool TestLists::Reader::hasList32() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::Builder::hasList32() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TestLists::Struct32>::Reader TestLists::Reader::getList32() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct32>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::TestLists::Struct32>::Builder TestLists::Builder::getList32() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct32>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void TestLists::Builder::setList32( ::capnp::List< ::TestLists::Struct32>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct32>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TestLists::Struct32>::Builder TestLists::Builder::initList32(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct32>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void TestLists::Builder::adoptList32(
    ::capnp::Orphan< ::capnp::List< ::TestLists::Struct32>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct32>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TestLists::Struct32>> TestLists::Builder::disownList32() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct32>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool TestLists::Reader::hasList64() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::Builder::hasList64() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TestLists::Struct64>::Reader TestLists::Reader::getList64() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct64>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::TestLists::Struct64>::Builder TestLists::Builder::getList64() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct64>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void TestLists::Builder::setList64( ::capnp::List< ::TestLists::Struct64>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct64>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TestLists::Struct64>::Builder TestLists::Builder::initList64(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct64>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void TestLists::Builder::adoptList64(
    ::capnp::Orphan< ::capnp::List< ::TestLists::Struct64>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct64>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TestLists::Struct64>> TestLists::Builder::disownList64() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::Struct64>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool TestLists::Reader::hasListP() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::Builder::hasListP() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TestLists::StructP>::Reader TestLists::Reader::getListP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::StructP>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::TestLists::StructP>::Builder TestLists::Builder::getListP() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::StructP>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void TestLists::Builder::setListP( ::capnp::List< ::TestLists::StructP>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::StructP>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TestLists::StructP>::Builder TestLists::Builder::initListP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::StructP>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void TestLists::Builder::adoptListP(
    ::capnp::Orphan< ::capnp::List< ::TestLists::StructP>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::StructP>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TestLists::StructP>> TestLists::Builder::disownListP() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestLists::StructP>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool TestLists::Reader::hasInt32ListList() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::Builder::hasInt32ListList() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List< ::int32_t>>::Reader TestLists::Reader::getInt32ListList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List< ::int32_t>>::Builder TestLists::Builder::getInt32ListList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void TestLists::Builder::setInt32ListList( ::capnp::List< ::capnp::List< ::int32_t>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline void TestLists::Builder::setInt32ListList(::kj::ArrayPtr<const  ::capnp::List< ::int32_t>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List< ::int32_t>>::Builder TestLists::Builder::initInt32ListList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void TestLists::Builder::adoptInt32ListList(
    ::capnp::Orphan< ::capnp::List< ::capnp::List< ::int32_t>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::int32_t>>> TestLists::Builder::disownInt32ListList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool TestLists::Reader::hasTextListList() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::Builder::hasTextListList() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List< ::capnp::Text>>::Reader TestLists::Reader::getTextListList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::Text>>>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List< ::capnp::Text>>::Builder TestLists::Builder::getTextListList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::Text>>>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void TestLists::Builder::setTextListList( ::capnp::List< ::capnp::List< ::capnp::Text>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::Text>>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline void TestLists::Builder::setTextListList(::kj::ArrayPtr<const  ::capnp::List< ::capnp::Text>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::Text>>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List< ::capnp::Text>>::Builder TestLists::Builder::initTextListList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::Text>>>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void TestLists::Builder::adoptTextListList(
    ::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnp::Text>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::Text>>>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnp::Text>>> TestLists::Builder::disownTextListList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::Text>>>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool TestLists::Reader::hasStructListList() const {
  return !_reader.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::Builder::hasStructListList() {
  return !_builder.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List< ::TestAllTypes>>::Reader TestLists::Reader::getStructListList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::TestAllTypes>>>::get(
      _reader.getPointerField(9 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List< ::TestAllTypes>>::Builder TestLists::Builder::getStructListList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::TestAllTypes>>>::get(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}
inline void TestLists::Builder::setStructListList( ::capnp::List< ::capnp::List< ::TestAllTypes>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::TestAllTypes>>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline void TestLists::Builder::setStructListList(::kj::ArrayPtr<const  ::capnp::List< ::TestAllTypes>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::TestAllTypes>>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List< ::TestAllTypes>>::Builder TestLists::Builder::initStructListList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::TestAllTypes>>>::init(
      _builder.getPointerField(9 * ::capnp::POINTERS), size);
}
inline void TestLists::Builder::adoptStructListList(
    ::capnp::Orphan< ::capnp::List< ::capnp::List< ::TestAllTypes>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::TestAllTypes>>>::adopt(
      _builder.getPointerField(9 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::TestAllTypes>>> TestLists::Builder::disownStructListList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::TestAllTypes>>>::disown(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}

inline bool TestLists::Reader::hasBoolListListList() const {
  return !_reader.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::Builder::hasBoolListListList() {
  return !_builder.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List< ::capnp::List<bool>>>::Reader TestLists::Reader::getBoolListListList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::List<bool>>>>::get(
      _reader.getPointerField(10 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List< ::capnp::List<bool>>>::Builder TestLists::Builder::getBoolListListList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::List<bool>>>>::get(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}
inline void TestLists::Builder::setBoolListListList( ::capnp::List< ::capnp::List< ::capnp::List<bool>>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::List<bool>>>>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline void TestLists::Builder::setBoolListListList(::kj::ArrayPtr<const  ::capnp::List< ::capnp::List<bool>>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::List<bool>>>>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List< ::capnp::List<bool>>>::Builder TestLists::Builder::initBoolListListList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::List<bool>>>>::init(
      _builder.getPointerField(10 * ::capnp::POINTERS), size);
}
inline void TestLists::Builder::adoptBoolListListList(
    ::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnp::List<bool>>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::List<bool>>>>::adopt(
      _builder.getPointerField(10 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnp::List<bool>>>> TestLists::Builder::disownBoolListListList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::List<bool>>>>::disown(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}

inline bool TestLists::Reader::hasEnumListList() const {
  return !_reader.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::Builder::hasEnumListList() {
  return !_builder.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List< ::TestEnum>>::Reader TestLists::Reader::getEnumListList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::TestEnum>>>::get(
      _reader.getPointerField(11 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List< ::TestEnum>>::Builder TestLists::Builder::getEnumListList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::TestEnum>>>::get(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}
inline void TestLists::Builder::setEnumListList( ::capnp::List< ::capnp::List< ::TestEnum>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::TestEnum>>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline void TestLists::Builder::setEnumListList(::kj::ArrayPtr<const  ::capnp::List< ::TestEnum>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::TestEnum>>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List< ::TestEnum>>::Builder TestLists::Builder::initEnumListList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::TestEnum>>>::init(
      _builder.getPointerField(11 * ::capnp::POINTERS), size);
}
inline void TestLists::Builder::adoptEnumListList(
    ::capnp::Orphan< ::capnp::List< ::capnp::List< ::TestEnum>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::TestEnum>>>::adopt(
      _builder.getPointerField(11 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::TestEnum>>> TestLists::Builder::disownEnumListList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::TestEnum>>>::disown(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}

inline  ::capnp::Void TestLists::Struct0::Reader::getF() const {
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestLists::Struct0::Builder::getF() {
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct0::Builder::setF( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::Struct1::Reader::getF() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool TestLists::Struct1::Builder::getF() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct1::Builder::setF(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t TestLists::Struct8::Reader::getF() const {
  return _reader.getDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint8_t TestLists::Struct8::Builder::getF() {
  return _builder.getDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct8::Builder::setF( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t TestLists::Struct16::Reader::getF() const {
  return _reader.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint16_t TestLists::Struct16::Builder::getF() {
  return _builder.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct16::Builder::setF( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TestLists::Struct32::Reader::getF() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t TestLists::Struct32::Builder::getF() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct32::Builder::setF( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TestLists::Struct64::Reader::getF() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t TestLists::Struct64::Builder::getF() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct64::Builder::setF( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::StructP::Reader::hasF() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::StructP::Builder::hasF() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestLists::StructP::Reader::getF() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestLists::StructP::Builder::getF() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestLists::StructP::Builder::setF( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestLists::StructP::Builder::initF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestLists::StructP::Builder::adoptF(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestLists::StructP::Builder::disownF() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::capnp::Void TestLists::Struct0c::Reader::getF() const {
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestLists::Struct0c::Builder::getF() {
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct0c::Builder::setF( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::Struct0c::Reader::hasPad() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::Struct0c::Builder::hasPad() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestLists::Struct0c::Reader::getPad() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestLists::Struct0c::Builder::getPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestLists::Struct0c::Builder::setPad( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestLists::Struct0c::Builder::initPad(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestLists::Struct0c::Builder::adoptPad(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestLists::Struct0c::Builder::disownPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool TestLists::Struct1c::Reader::getF() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool TestLists::Struct1c::Builder::getF() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct1c::Builder::setF(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::Struct1c::Reader::hasPad() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::Struct1c::Builder::hasPad() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestLists::Struct1c::Reader::getPad() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestLists::Struct1c::Builder::getPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestLists::Struct1c::Builder::setPad( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestLists::Struct1c::Builder::initPad(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestLists::Struct1c::Builder::adoptPad(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestLists::Struct1c::Builder::disownPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint8_t TestLists::Struct8c::Reader::getF() const {
  return _reader.getDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint8_t TestLists::Struct8c::Builder::getF() {
  return _builder.getDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct8c::Builder::setF( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::Struct8c::Reader::hasPad() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::Struct8c::Builder::hasPad() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestLists::Struct8c::Reader::getPad() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestLists::Struct8c::Builder::getPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestLists::Struct8c::Builder::setPad( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestLists::Struct8c::Builder::initPad(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestLists::Struct8c::Builder::adoptPad(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestLists::Struct8c::Builder::disownPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint16_t TestLists::Struct16c::Reader::getF() const {
  return _reader.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint16_t TestLists::Struct16c::Builder::getF() {
  return _builder.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct16c::Builder::setF( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::Struct16c::Reader::hasPad() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::Struct16c::Builder::hasPad() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestLists::Struct16c::Reader::getPad() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestLists::Struct16c::Builder::getPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestLists::Struct16c::Builder::setPad( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestLists::Struct16c::Builder::initPad(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestLists::Struct16c::Builder::adoptPad(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestLists::Struct16c::Builder::disownPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint32_t TestLists::Struct32c::Reader::getF() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t TestLists::Struct32c::Builder::getF() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct32c::Builder::setF( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::Struct32c::Reader::hasPad() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::Struct32c::Builder::hasPad() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestLists::Struct32c::Reader::getPad() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestLists::Struct32c::Builder::getPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestLists::Struct32c::Builder::setPad( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestLists::Struct32c::Builder::initPad(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestLists::Struct32c::Builder::adoptPad(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestLists::Struct32c::Builder::disownPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t TestLists::Struct64c::Reader::getF() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t TestLists::Struct64c::Builder::getF() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct64c::Builder::setF( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::Struct64c::Reader::hasPad() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::Struct64c::Builder::hasPad() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestLists::Struct64c::Reader::getPad() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestLists::Struct64c::Builder::getPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestLists::Struct64c::Builder::setPad( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestLists::Struct64c::Builder::initPad(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestLists::Struct64c::Builder::adoptPad(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestLists::Struct64c::Builder::disownPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool TestLists::StructPc::Reader::hasF() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestLists::StructPc::Builder::hasF() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestLists::StructPc::Reader::getF() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestLists::StructPc::Builder::getF() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestLists::StructPc::Builder::setF( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestLists::StructPc::Builder::initF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestLists::StructPc::Builder::adoptF(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestLists::StructPc::Builder::disownF() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t TestLists::StructPc::Reader::getPad() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t TestLists::StructPc::Builder::getPad() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::StructPc::Builder::setPad( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestFieldZeroIsBit::Reader::getBit() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool TestFieldZeroIsBit::Builder::getBit() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void TestFieldZeroIsBit::Builder::setBit(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestFieldZeroIsBit::Reader::getSecondBit() const {
  return _reader.getDataField<bool>(
      1 * ::capnp::ELEMENTS, true);
}

inline bool TestFieldZeroIsBit::Builder::getSecondBit() {
  return _builder.getDataField<bool>(
      1 * ::capnp::ELEMENTS, true);
}
inline void TestFieldZeroIsBit::Builder::setSecondBit(bool value) {
  _builder.setDataField<bool>(
      1 * ::capnp::ELEMENTS, value, true);
}

inline  ::uint8_t TestFieldZeroIsBit::Reader::getThirdField() const {
  return _reader.getDataField< ::uint8_t>(
      1 * ::capnp::ELEMENTS, 123u);
}

inline  ::uint8_t TestFieldZeroIsBit::Builder::getThirdField() {
  return _builder.getDataField< ::uint8_t>(
      1 * ::capnp::ELEMENTS, 123u);
}
inline void TestFieldZeroIsBit::Builder::setThirdField( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      1 * ::capnp::ELEMENTS, value, 123u);
}

inline  ::int64_t TestOldVersion::Reader::getOld1() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestOldVersion::Builder::getOld1() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestOldVersion::Builder::setOld1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestOldVersion::Reader::hasOld2() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestOldVersion::Builder::hasOld2() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestOldVersion::Reader::getOld2() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestOldVersion::Builder::getOld2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestOldVersion::Builder::setOld2( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestOldVersion::Builder::initOld2(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestOldVersion::Builder::adoptOld2(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOldVersion::Builder::disownOld2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool TestOldVersion::Reader::hasOld3() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool TestOldVersion::Builder::hasOld3() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::TestOldVersion::Reader TestOldVersion::Reader::getOld3() const {
  return ::capnp::_::PointerHelpers< ::TestOldVersion>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::TestOldVersion::Builder TestOldVersion::Builder::getOld3() {
  return ::capnp::_::PointerHelpers< ::TestOldVersion>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TestOldVersion::Pipeline TestOldVersion::Pipeline::getOld3() {
  return  ::TestOldVersion::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void TestOldVersion::Builder::setOld3( ::TestOldVersion::Reader value) {
  ::capnp::_::PointerHelpers< ::TestOldVersion>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::TestOldVersion::Builder TestOldVersion::Builder::initOld3() {
  return ::capnp::_::PointerHelpers< ::TestOldVersion>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void TestOldVersion::Builder::adoptOld3(
    ::capnp::Orphan< ::TestOldVersion>&& value) {
  ::capnp::_::PointerHelpers< ::TestOldVersion>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TestOldVersion> TestOldVersion::Builder::disownOld3() {
  return ::capnp::_::PointerHelpers< ::TestOldVersion>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::int64_t TestNewVersion::Reader::getOld1() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestNewVersion::Builder::getOld1() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestNewVersion::Builder::setOld1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestNewVersion::Reader::hasOld2() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestNewVersion::Builder::hasOld2() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestNewVersion::Reader::getOld2() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestNewVersion::Builder::getOld2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestNewVersion::Builder::setOld2( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestNewVersion::Builder::initOld2(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestNewVersion::Builder::adoptOld2(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestNewVersion::Builder::disownOld2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool TestNewVersion::Reader::hasOld3() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool TestNewVersion::Builder::hasOld3() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::TestNewVersion::Reader TestNewVersion::Reader::getOld3() const {
  return ::capnp::_::PointerHelpers< ::TestNewVersion>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::TestNewVersion::Builder TestNewVersion::Builder::getOld3() {
  return ::capnp::_::PointerHelpers< ::TestNewVersion>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TestNewVersion::Pipeline TestNewVersion::Pipeline::getOld3() {
  return  ::TestNewVersion::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void TestNewVersion::Builder::setOld3( ::TestNewVersion::Reader value) {
  ::capnp::_::PointerHelpers< ::TestNewVersion>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::TestNewVersion::Builder TestNewVersion::Builder::initOld3() {
  return ::capnp::_::PointerHelpers< ::TestNewVersion>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void TestNewVersion::Builder::adoptOld3(
    ::capnp::Orphan< ::TestNewVersion>&& value) {
  ::capnp::_::PointerHelpers< ::TestNewVersion>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TestNewVersion> TestNewVersion::Builder::disownOld3() {
  return ::capnp::_::PointerHelpers< ::TestNewVersion>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::int64_t TestNewVersion::Reader::getNew1() const {
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, 987ll);
}

inline  ::int64_t TestNewVersion::Builder::getNew1() {
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, 987ll);
}
inline void TestNewVersion::Builder::setNew1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value, 987ll);
}

inline bool TestNewVersion::Reader::hasNew2() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool TestNewVersion::Builder::hasNew2() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestNewVersion::Reader::getNew2() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS),
        ::capnp::schemas::bp_b8891e9f3d7630e0 + 93, 3);
}
inline  ::capnp::Text::Builder TestNewVersion::Builder::getNew2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS),
        ::capnp::schemas::bp_b8891e9f3d7630e0 + 93, 3);
}
inline void TestNewVersion::Builder::setNew2( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestNewVersion::Builder::initNew2(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void TestNewVersion::Builder::adoptNew2(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestNewVersion::Builder::disownNew2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

template <typename Foo, typename Bar>
inline bool TestGenerics<Foo, Bar>::Reader::hasFoo() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
inline bool TestGenerics<Foo, Bar>::Builder::hasFoo() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
inline  ::capnp::ReaderFor<Foo> TestGenerics<Foo, Bar>::Reader::getFoo() const {
  return ::capnp::_::PointerHelpers<Foo>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
inline  ::capnp::BuilderFor<Foo> TestGenerics<Foo, Bar>::Builder::getFoo() {
  return ::capnp::_::PointerHelpers<Foo>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Foo, typename Bar>
inline  ::capnp::PipelineFor<Foo> TestGenerics<Foo, Bar>::Pipeline::getFoo() {
  return  ::capnp::PipelineFor<Foo>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename Foo, typename Bar>
inline void TestGenerics<Foo, Bar>::Builder::setFoo( ::capnp::ReaderFor<Foo> value) {
  ::capnp::_::PointerHelpers<Foo>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename Foo, typename Bar>
inline  ::capnp::BuilderFor<Foo> TestGenerics<Foo, Bar>::Builder::initFoo() {
  return ::capnp::_::PointerHelpers<Foo>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
inline  ::capnp::BuilderFor<Foo> TestGenerics<Foo, Bar>::Builder::initFoo(unsigned int size) {
  return ::capnp::_::PointerHelpers<Foo>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename Foo, typename Bar>
inline void TestGenerics<Foo, Bar>::Builder::adoptFoo(
    ::capnp::Orphan<Foo>&& value) {
  ::capnp::_::PointerHelpers<Foo>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename Foo, typename Bar>
inline ::capnp::Orphan<Foo> TestGenerics<Foo, Bar>::Builder::disownFoo() {
  return ::capnp::_::PointerHelpers<Foo>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

template <typename Foo, typename Bar>
inline bool TestGenerics<Foo, Bar>::Reader::hasBar() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
inline bool TestGenerics<Foo, Bar>::Builder::hasBar() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
inline  ::capnp::ReaderFor<Bar> TestGenerics<Foo, Bar>::Reader::getBar() const {
  return ::capnp::_::PointerHelpers<Bar>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
inline  ::capnp::BuilderFor<Bar> TestGenerics<Foo, Bar>::Builder::getBar() {
  return ::capnp::_::PointerHelpers<Bar>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Foo, typename Bar>
inline  ::capnp::PipelineFor<Bar> TestGenerics<Foo, Bar>::Pipeline::getBar() {
  return  ::capnp::PipelineFor<Bar>(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
template <typename Foo, typename Bar>
inline void TestGenerics<Foo, Bar>::Builder::setBar( ::capnp::ReaderFor<Bar> value) {
  ::capnp::_::PointerHelpers<Bar>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
template <typename Foo, typename Bar>
inline  ::capnp::BuilderFor<Bar> TestGenerics<Foo, Bar>::Builder::initBar() {
  return ::capnp::_::PointerHelpers<Bar>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
inline  ::capnp::BuilderFor<Bar> TestGenerics<Foo, Bar>::Builder::initBar(unsigned int size) {
  return ::capnp::_::PointerHelpers<Bar>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
template <typename Foo, typename Bar>
inline void TestGenerics<Foo, Bar>::Builder::adoptBar(
    ::capnp::Orphan<Bar>&& value) {
  ::capnp::_::PointerHelpers<Bar>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
template <typename Foo, typename Bar>
inline ::capnp::Orphan<Bar> TestGenerics<Foo, Bar>::Builder::disownBar() {
  return ::capnp::_::PointerHelpers<Bar>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

template <typename Foo, typename Bar>
inline bool TestGenerics<Foo, Bar>::Reader::hasRev() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
inline bool TestGenerics<Foo, Bar>::Builder::hasRev() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
inline typename  ::TestGenerics<Bar, Foo>::Reader TestGenerics<Foo, Bar>::Reader::getRev() const {
  return ::capnp::_::PointerHelpers< ::TestGenerics<Bar, Foo>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
inline typename  ::TestGenerics<Bar, Foo>::Builder TestGenerics<Foo, Bar>::Builder::getRev() {
  return ::capnp::_::PointerHelpers< ::TestGenerics<Bar, Foo>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Foo, typename Bar>
inline typename  ::TestGenerics<Bar, Foo>::Pipeline TestGenerics<Foo, Bar>::Pipeline::getRev() {
  return typename  ::TestGenerics<Bar, Foo>::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
template <typename Foo, typename Bar>
inline void TestGenerics<Foo, Bar>::Builder::setRev(typename  ::TestGenerics<Bar, Foo>::Reader value) {
  ::capnp::_::PointerHelpers< ::TestGenerics<Bar, Foo>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
template <typename Foo, typename Bar>
inline typename  ::TestGenerics<Bar, Foo>::Builder TestGenerics<Foo, Bar>::Builder::initRev() {
  return ::capnp::_::PointerHelpers< ::TestGenerics<Bar, Foo>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
inline void TestGenerics<Foo, Bar>::Builder::adoptRev(
    ::capnp::Orphan< ::TestGenerics<Bar, Foo>>&& value) {
  ::capnp::_::PointerHelpers< ::TestGenerics<Bar, Foo>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
template <typename Foo, typename Bar>
inline ::capnp::Orphan< ::TestGenerics<Bar, Foo>> TestGenerics<Foo, Bar>::Builder::disownRev() {
  return ::capnp::_::PointerHelpers< ::TestGenerics<Bar, Foo>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

template <typename Foo, typename Bar>
inline bool TestGenerics<Foo, Bar>::Reader::hasDub() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
inline bool TestGenerics<Foo, Bar>::Builder::hasDub() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
inline  ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>::Reader TestGenerics<Foo, Bar>::Reader::getDub() const {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
inline  ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>::Builder TestGenerics<Foo, Bar>::Builder::getDub() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Foo, typename Bar>
inline  ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>::Pipeline TestGenerics<Foo, Bar>::Pipeline::getDub() {
  return  ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
template <typename Foo, typename Bar>
inline void TestGenerics<Foo, Bar>::Builder::setDub( ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>::Reader value) {
  ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
template <typename Foo, typename Bar>
inline  ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>::Builder TestGenerics<Foo, Bar>::Builder::initDub() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
inline void TestGenerics<Foo, Bar>::Builder::adoptDub(
    ::capnp::Orphan< ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>>&& value) {
  ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
template <typename Foo, typename Bar>
inline ::capnp::Orphan< ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>> TestGenerics<Foo, Bar>::Builder::disownDub() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

template <typename Foo, typename Bar>
inline bool TestGenerics<Foo, Bar>::Inner::Reader::hasFoo() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
inline bool TestGenerics<Foo, Bar>::Inner::Builder::hasFoo() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
inline  ::capnp::ReaderFor<Foo> TestGenerics<Foo, Bar>::Inner::Reader::getFoo() const {
  return ::capnp::_::PointerHelpers<Foo>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
inline  ::capnp::BuilderFor<Foo> TestGenerics<Foo, Bar>::Inner::Builder::getFoo() {
  return ::capnp::_::PointerHelpers<Foo>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Foo, typename Bar>
inline  ::capnp::PipelineFor<Foo> TestGenerics<Foo, Bar>::Inner::Pipeline::getFoo() {
  return  ::capnp::PipelineFor<Foo>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename Foo, typename Bar>
inline void TestGenerics<Foo, Bar>::Inner::Builder::setFoo( ::capnp::ReaderFor<Foo> value) {
  ::capnp::_::PointerHelpers<Foo>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename Foo, typename Bar>
inline  ::capnp::BuilderFor<Foo> TestGenerics<Foo, Bar>::Inner::Builder::initFoo() {
  return ::capnp::_::PointerHelpers<Foo>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
inline  ::capnp::BuilderFor<Foo> TestGenerics<Foo, Bar>::Inner::Builder::initFoo(unsigned int size) {
  return ::capnp::_::PointerHelpers<Foo>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename Foo, typename Bar>
inline void TestGenerics<Foo, Bar>::Inner::Builder::adoptFoo(
    ::capnp::Orphan<Foo>&& value) {
  ::capnp::_::PointerHelpers<Foo>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename Foo, typename Bar>
inline ::capnp::Orphan<Foo> TestGenerics<Foo, Bar>::Inner::Builder::disownFoo() {
  return ::capnp::_::PointerHelpers<Foo>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

template <typename Foo, typename Bar>
inline bool TestGenerics<Foo, Bar>::Inner::Reader::hasBar() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
inline bool TestGenerics<Foo, Bar>::Inner::Builder::hasBar() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
inline  ::capnp::ReaderFor<Bar> TestGenerics<Foo, Bar>::Inner::Reader::getBar() const {
  return ::capnp::_::PointerHelpers<Bar>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
inline  ::capnp::BuilderFor<Bar> TestGenerics<Foo, Bar>::Inner::Builder::getBar() {
  return ::capnp::_::PointerHelpers<Bar>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Foo, typename Bar>
inline  ::capnp::PipelineFor<Bar> TestGenerics<Foo, Bar>::Inner::Pipeline::getBar() {
  return  ::capnp::PipelineFor<Bar>(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
template <typename Foo, typename Bar>
inline void TestGenerics<Foo, Bar>::Inner::Builder::setBar( ::capnp::ReaderFor<Bar> value) {
  ::capnp::_::PointerHelpers<Bar>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
template <typename Foo, typename Bar>
inline  ::capnp::BuilderFor<Bar> TestGenerics<Foo, Bar>::Inner::Builder::initBar() {
  return ::capnp::_::PointerHelpers<Bar>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
inline  ::capnp::BuilderFor<Bar> TestGenerics<Foo, Bar>::Inner::Builder::initBar(unsigned int size) {
  return ::capnp::_::PointerHelpers<Bar>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
template <typename Foo, typename Bar>
inline void TestGenerics<Foo, Bar>::Inner::Builder::adoptBar(
    ::capnp::Orphan<Bar>&& value) {
  ::capnp::_::PointerHelpers<Bar>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
template <typename Foo, typename Bar>
inline ::capnp::Orphan<Bar> TestGenerics<Foo, Bar>::Inner::Builder::disownBar() {
  return ::capnp::_::PointerHelpers<Bar>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

// TestGenerics<Foo, Bar>::Inner
template <typename Foo, typename Bar>
constexpr uint16_t TestGenerics<Foo, Bar>::Inner::_capnpPrivate::dataWordSize;
template <typename Foo, typename Bar>
constexpr uint16_t TestGenerics<Foo, Bar>::Inner::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename Foo, typename Bar>
constexpr ::capnp::Kind TestGenerics<Foo, Bar>::Inner::_capnpPrivate::kind;
template <typename Foo, typename Bar>
constexpr ::capnp::_::RawSchema const* TestGenerics<Foo, Bar>::Inner::_capnpPrivate::schema;
template <typename Foo, typename Bar>
constexpr ::capnp::_::RawBrandedSchema const* TestGenerics<Foo, Bar>::Inner::_capnpPrivate::brand;
template <typename Foo, typename Bar>
const ::capnp::_::RawBrandedSchema::Scope TestGenerics<Foo, Bar>::Inner::_capnpPrivate::brandScopes[] = {
  { 0xb32d3ef2e630cc9e, brandBindings + 0, 2, false},
};
template <typename Foo, typename Bar>
const ::capnp::_::RawBrandedSchema::Binding TestGenerics<Foo, Bar>::Inner::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<Foo>(),
  ::capnp::_::brandBindingFor<Bar>(),
};
template <typename Foo, typename Bar>
const ::capnp::_::RawBrandedSchema TestGenerics<Foo, Bar>::Inner::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_b53d8ab25fb37432, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename Foo, typename Bar>
template <typename Baz>
inline bool TestGenerics<Foo, Bar>::Inner2<Baz>::Reader::hasBar() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
template <typename Baz>
inline bool TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::hasBar() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
template <typename Baz>
inline  ::capnp::ReaderFor<Bar> TestGenerics<Foo, Bar>::Inner2<Baz>::Reader::getBar() const {
  return ::capnp::_::PointerHelpers<Bar>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
template <typename Baz>
inline  ::capnp::BuilderFor<Bar> TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::getBar() {
  return ::capnp::_::PointerHelpers<Bar>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
inline  ::capnp::PipelineFor<Bar> TestGenerics<Foo, Bar>::Inner2<Baz>::Pipeline::getBar() {
  return  ::capnp::PipelineFor<Bar>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
inline void TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::setBar( ::capnp::ReaderFor<Bar> value) {
  ::capnp::_::PointerHelpers<Bar>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename Foo, typename Bar>
template <typename Baz>
inline  ::capnp::BuilderFor<Bar> TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::initBar() {
  return ::capnp::_::PointerHelpers<Bar>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
template <typename Baz>
inline  ::capnp::BuilderFor<Bar> TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::initBar(unsigned int size) {
  return ::capnp::_::PointerHelpers<Bar>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename Foo, typename Bar>
template <typename Baz>
inline void TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::adoptBar(
    ::capnp::Orphan<Bar>&& value) {
  ::capnp::_::PointerHelpers<Bar>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename Foo, typename Bar>
template <typename Baz>
inline ::capnp::Orphan<Bar> TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::disownBar() {
  return ::capnp::_::PointerHelpers<Bar>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

template <typename Foo, typename Bar>
template <typename Baz>
inline bool TestGenerics<Foo, Bar>::Inner2<Baz>::Reader::hasBaz() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
template <typename Baz>
inline bool TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::hasBaz() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
template <typename Baz>
inline  ::capnp::ReaderFor<Baz> TestGenerics<Foo, Bar>::Inner2<Baz>::Reader::getBaz() const {
  return ::capnp::_::PointerHelpers<Baz>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
template <typename Baz>
inline  ::capnp::BuilderFor<Baz> TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::getBaz() {
  return ::capnp::_::PointerHelpers<Baz>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
inline  ::capnp::PipelineFor<Baz> TestGenerics<Foo, Bar>::Inner2<Baz>::Pipeline::getBaz() {
  return  ::capnp::PipelineFor<Baz>(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
inline void TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::setBaz( ::capnp::ReaderFor<Baz> value) {
  ::capnp::_::PointerHelpers<Baz>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
template <typename Foo, typename Bar>
template <typename Baz>
inline  ::capnp::BuilderFor<Baz> TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::initBaz() {
  return ::capnp::_::PointerHelpers<Baz>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
template <typename Baz>
inline  ::capnp::BuilderFor<Baz> TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::initBaz(unsigned int size) {
  return ::capnp::_::PointerHelpers<Baz>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
template <typename Foo, typename Bar>
template <typename Baz>
inline void TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::adoptBaz(
    ::capnp::Orphan<Baz>&& value) {
  ::capnp::_::PointerHelpers<Baz>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
template <typename Foo, typename Bar>
template <typename Baz>
inline ::capnp::Orphan<Baz> TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::disownBaz() {
  return ::capnp::_::PointerHelpers<Baz>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

template <typename Foo, typename Bar>
template <typename Baz>
inline bool TestGenerics<Foo, Bar>::Inner2<Baz>::Reader::hasInnerBound() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
template <typename Baz>
inline bool TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::hasInnerBound() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
template <typename Baz>
inline typename  ::TestGenerics<Foo, Bar>::Inner::Reader TestGenerics<Foo, Bar>::Inner2<Baz>::Reader::getInnerBound() const {
  return ::capnp::_::PointerHelpers<typename  ::TestGenerics<Foo, Bar>::Inner>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
template <typename Baz>
inline typename  ::TestGenerics<Foo, Bar>::Inner::Builder TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::getInnerBound() {
  return ::capnp::_::PointerHelpers<typename  ::TestGenerics<Foo, Bar>::Inner>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
inline typename  ::TestGenerics<Foo, Bar>::Inner::Pipeline TestGenerics<Foo, Bar>::Inner2<Baz>::Pipeline::getInnerBound() {
  return typename  ::TestGenerics<Foo, Bar>::Inner::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
inline void TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::setInnerBound(typename  ::TestGenerics<Foo, Bar>::Inner::Reader value) {
  ::capnp::_::PointerHelpers<typename  ::TestGenerics<Foo, Bar>::Inner>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
template <typename Foo, typename Bar>
template <typename Baz>
inline typename  ::TestGenerics<Foo, Bar>::Inner::Builder TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::initInnerBound() {
  return ::capnp::_::PointerHelpers<typename  ::TestGenerics<Foo, Bar>::Inner>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
template <typename Baz>
inline void TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::adoptInnerBound(
    ::capnp::Orphan<typename  ::TestGenerics<Foo, Bar>::Inner>&& value) {
  ::capnp::_::PointerHelpers<typename  ::TestGenerics<Foo, Bar>::Inner>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
template <typename Foo, typename Bar>
template <typename Baz>
inline ::capnp::Orphan<typename  ::TestGenerics<Foo, Bar>::Inner> TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::disownInnerBound() {
  return ::capnp::_::PointerHelpers<typename  ::TestGenerics<Foo, Bar>::Inner>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

template <typename Foo, typename Bar>
template <typename Baz>
inline bool TestGenerics<Foo, Bar>::Inner2<Baz>::Reader::hasInnerUnbound() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
template <typename Baz>
inline bool TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::hasInnerUnbound() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
template <typename Baz>
inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner::Reader TestGenerics<Foo, Bar>::Inner2<Baz>::Reader::getInnerUnbound() const {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
template <typename Baz>
inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner::Builder TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::getInnerUnbound() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner::Pipeline TestGenerics<Foo, Bar>::Inner2<Baz>::Pipeline::getInnerUnbound() {
  return  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
inline void TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::setInnerUnbound( ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner::Reader value) {
  ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
template <typename Foo, typename Bar>
template <typename Baz>
inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner::Builder TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::initInnerUnbound() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
template <typename Baz>
inline void TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::adoptInnerUnbound(
    ::capnp::Orphan< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner>&& value) {
  ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
template <typename Foo, typename Bar>
template <typename Baz>
inline ::capnp::Orphan< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner> TestGenerics<Foo, Bar>::Inner2<Baz>::Builder::disownInnerUnbound() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline bool TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Reader::hasFoo() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline bool TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::hasFoo() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::ReaderFor<Foo> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Reader::getFoo() const {
  return ::capnp::_::PointerHelpers<Foo>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::BuilderFor<Foo> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::getFoo() {
  return ::capnp::_::PointerHelpers<Foo>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::PipelineFor<Foo> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Pipeline::getFoo() {
  return  ::capnp::PipelineFor<Foo>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline void TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::setFoo( ::capnp::ReaderFor<Foo> value) {
  ::capnp::_::PointerHelpers<Foo>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::BuilderFor<Foo> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::initFoo() {
  return ::capnp::_::PointerHelpers<Foo>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::BuilderFor<Foo> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::initFoo(unsigned int size) {
  return ::capnp::_::PointerHelpers<Foo>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline void TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::adoptFoo(
    ::capnp::Orphan<Foo>&& value) {
  ::capnp::_::PointerHelpers<Foo>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline ::capnp::Orphan<Foo> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::disownFoo() {
  return ::capnp::_::PointerHelpers<Foo>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline bool TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Reader::hasBar() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline bool TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::hasBar() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::ReaderFor<Bar> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Reader::getBar() const {
  return ::capnp::_::PointerHelpers<Bar>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::BuilderFor<Bar> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::getBar() {
  return ::capnp::_::PointerHelpers<Bar>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::PipelineFor<Bar> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Pipeline::getBar() {
  return  ::capnp::PipelineFor<Bar>(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline void TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::setBar( ::capnp::ReaderFor<Bar> value) {
  ::capnp::_::PointerHelpers<Bar>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::BuilderFor<Bar> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::initBar() {
  return ::capnp::_::PointerHelpers<Bar>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::BuilderFor<Bar> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::initBar(unsigned int size) {
  return ::capnp::_::PointerHelpers<Bar>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline void TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::adoptBar(
    ::capnp::Orphan<Bar>&& value) {
  ::capnp::_::PointerHelpers<Bar>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline ::capnp::Orphan<Bar> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::disownBar() {
  return ::capnp::_::PointerHelpers<Bar>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline bool TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Reader::hasBaz() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline bool TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::hasBaz() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::ReaderFor<Baz> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Reader::getBaz() const {
  return ::capnp::_::PointerHelpers<Baz>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::BuilderFor<Baz> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::getBaz() {
  return ::capnp::_::PointerHelpers<Baz>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::PipelineFor<Baz> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Pipeline::getBaz() {
  return  ::capnp::PipelineFor<Baz>(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline void TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::setBaz( ::capnp::ReaderFor<Baz> value) {
  ::capnp::_::PointerHelpers<Baz>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::BuilderFor<Baz> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::initBaz() {
  return ::capnp::_::PointerHelpers<Baz>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::BuilderFor<Baz> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::initBaz(unsigned int size) {
  return ::capnp::_::PointerHelpers<Baz>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline void TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::adoptBaz(
    ::capnp::Orphan<Baz>&& value) {
  ::capnp::_::PointerHelpers<Baz>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline ::capnp::Orphan<Baz> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::disownBaz() {
  return ::capnp::_::PointerHelpers<Baz>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline bool TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Reader::hasQux() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline bool TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::hasQux() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::ReaderFor<Qux> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Reader::getQux() const {
  return ::capnp::_::PointerHelpers<Qux>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::BuilderFor<Qux> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::getQux() {
  return ::capnp::_::PointerHelpers<Qux>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::PipelineFor<Qux> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Pipeline::getQux() {
  return  ::capnp::PipelineFor<Qux>(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline void TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::setQux( ::capnp::ReaderFor<Qux> value) {
  ::capnp::_::PointerHelpers<Qux>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::BuilderFor<Qux> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::initQux() {
  return ::capnp::_::PointerHelpers<Qux>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline  ::capnp::BuilderFor<Qux> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::initQux(unsigned int size) {
  return ::capnp::_::PointerHelpers<Qux>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline void TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::adoptQux(
    ::capnp::Orphan<Qux>&& value) {
  ::capnp::_::PointerHelpers<Qux>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
inline ::capnp::Orphan<Qux> TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::Builder::disownQux() {
  return ::capnp::_::PointerHelpers<Qux>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

// TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
constexpr uint16_t TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::_capnpPrivate::dataWordSize;
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
constexpr uint16_t TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
constexpr ::capnp::Kind TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::_capnpPrivate::kind;
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
constexpr ::capnp::_::RawSchema const* TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::_capnpPrivate::schema;
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
constexpr ::capnp::_::RawBrandedSchema const* TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::_capnpPrivate::brand;
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
const ::capnp::_::RawBrandedSchema::Scope TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::_capnpPrivate::brandScopes[] = {
  { 0xb32d3ef2e630cc9e, brandBindings + 0, 2, false},
  { 0xb7ac6330b5b1b391, brandBindings + 2, 1, false},
  { 0xb920a5d19b2fd8db, brandBindings + 3, 1, false},
};
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
const ::capnp::_::RawBrandedSchema::Binding TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<Foo>(),
  ::capnp::_::brandBindingFor<Bar>(),
  ::capnp::_::brandBindingFor<Baz>(),
  ::capnp::_::brandBindingFor<Qux>(),
};
template <typename Foo, typename Bar>
template <typename Baz>
template <typename Qux>
const ::capnp::_::RawBrandedSchema TestGenerics<Foo, Bar>::Inner2<Baz>::DeepNest<Qux>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_b920a5d19b2fd8db, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

// TestGenerics<Foo, Bar>::Inner2<Baz>
template <typename Foo, typename Bar>
template <typename Baz>
constexpr uint16_t TestGenerics<Foo, Bar>::Inner2<Baz>::_capnpPrivate::dataWordSize;
template <typename Foo, typename Bar>
template <typename Baz>
constexpr uint16_t TestGenerics<Foo, Bar>::Inner2<Baz>::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename Foo, typename Bar>
template <typename Baz>
constexpr ::capnp::Kind TestGenerics<Foo, Bar>::Inner2<Baz>::_capnpPrivate::kind;
template <typename Foo, typename Bar>
template <typename Baz>
constexpr ::capnp::_::RawSchema const* TestGenerics<Foo, Bar>::Inner2<Baz>::_capnpPrivate::schema;
template <typename Foo, typename Bar>
template <typename Baz>
constexpr ::capnp::_::RawBrandedSchema const* TestGenerics<Foo, Bar>::Inner2<Baz>::_capnpPrivate::brand;
template <typename Foo, typename Bar>
template <typename Baz>
const ::capnp::_::RawBrandedSchema::Scope TestGenerics<Foo, Bar>::Inner2<Baz>::_capnpPrivate::brandScopes[] = {
  { 0xb32d3ef2e630cc9e, brandBindings + 0, 2, false},
  { 0xb7ac6330b5b1b391, brandBindings + 2, 1, false},
};
template <typename Foo, typename Bar>
template <typename Baz>
const ::capnp::_::RawBrandedSchema::Binding TestGenerics<Foo, Bar>::Inner2<Baz>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<Foo>(),
  ::capnp::_::brandBindingFor<Bar>(),
  ::capnp::_::brandBindingFor<Baz>(),
};
template <typename Foo, typename Bar>
template <typename Baz>
const ::capnp::_::RawBrandedSchema::Dependency TestGenerics<Foo, Bar>::Inner2<Baz>::_capnpPrivate::brandDependencies[] = {
  { 16777218,  ::TestGenerics<Foo, Bar>::Inner::_capnpPrivate::brand },
};
template <typename Foo, typename Bar>
template <typename Baz>
const ::capnp::_::RawBrandedSchema TestGenerics<Foo, Bar>::Inner2<Baz>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_b7ac6330b5b1b391, brandScopes, brandDependencies,
  sizeof(brandScopes) / sizeof(brandScopes[0]), sizeof(brandDependencies) / sizeof(brandDependencies[0]), nullptr
};
#endif  // !CAPNP_LITE

// TestGenerics<Foo, Bar>
template <typename Foo, typename Bar>
constexpr uint16_t TestGenerics<Foo, Bar>::_capnpPrivate::dataWordSize;
template <typename Foo, typename Bar>
constexpr uint16_t TestGenerics<Foo, Bar>::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename Foo, typename Bar>
constexpr ::capnp::Kind TestGenerics<Foo, Bar>::_capnpPrivate::kind;
template <typename Foo, typename Bar>
constexpr ::capnp::_::RawSchema const* TestGenerics<Foo, Bar>::_capnpPrivate::schema;
template <typename Foo, typename Bar>
constexpr ::capnp::_::RawBrandedSchema const* TestGenerics<Foo, Bar>::_capnpPrivate::brand;
template <typename Foo, typename Bar>
const ::capnp::_::RawBrandedSchema::Scope TestGenerics<Foo, Bar>::_capnpPrivate::brandScopes[] = {
  { 0xb32d3ef2e630cc9e, brandBindings + 0, 2, false},
};
template <typename Foo, typename Bar>
const ::capnp::_::RawBrandedSchema::Binding TestGenerics<Foo, Bar>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<Foo>(),
  ::capnp::_::brandBindingFor<Bar>(),
};
template <typename Foo, typename Bar>
const ::capnp::_::RawBrandedSchema::Dependency TestGenerics<Foo, Bar>::_capnpPrivate::brandDependencies[] = {
  { 16777218,  ::TestGenerics<Bar, Foo>::_capnpPrivate::brand },
  { 16777219,  ::TestGenerics< ::capnp::Text,  ::capnp::List< ::uint8_t>>::_capnpPrivate::brand },
};
template <typename Foo, typename Bar>
const ::capnp::_::RawBrandedSchema TestGenerics<Foo, Bar>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_b32d3ef2e630cc9e, brandScopes, brandDependencies,
  sizeof(brandScopes) / sizeof(brandScopes[0]), sizeof(brandDependencies) / sizeof(brandDependencies[0]), nullptr
};
#endif  // !CAPNP_LITE

template <typename Foo, typename Bar>
inline bool TestGenericsWrapper<Foo, Bar>::Reader::hasValue() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
inline bool TestGenericsWrapper<Foo, Bar>::Builder::hasValue() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename Foo, typename Bar>
inline typename  ::TestGenerics<Foo, Bar>::Reader TestGenericsWrapper<Foo, Bar>::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::TestGenerics<Foo, Bar>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
inline typename  ::TestGenerics<Foo, Bar>::Builder TestGenericsWrapper<Foo, Bar>::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::TestGenerics<Foo, Bar>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Foo, typename Bar>
inline typename  ::TestGenerics<Foo, Bar>::Pipeline TestGenericsWrapper<Foo, Bar>::Pipeline::getValue() {
  return typename  ::TestGenerics<Foo, Bar>::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename Foo, typename Bar>
inline void TestGenericsWrapper<Foo, Bar>::Builder::setValue(typename  ::TestGenerics<Foo, Bar>::Reader value) {
  ::capnp::_::PointerHelpers< ::TestGenerics<Foo, Bar>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename Foo, typename Bar>
inline typename  ::TestGenerics<Foo, Bar>::Builder TestGenericsWrapper<Foo, Bar>::Builder::initValue() {
  return ::capnp::_::PointerHelpers< ::TestGenerics<Foo, Bar>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename Foo, typename Bar>
inline void TestGenericsWrapper<Foo, Bar>::Builder::adoptValue(
    ::capnp::Orphan< ::TestGenerics<Foo, Bar>>&& value) {
  ::capnp::_::PointerHelpers< ::TestGenerics<Foo, Bar>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename Foo, typename Bar>
inline ::capnp::Orphan< ::TestGenerics<Foo, Bar>> TestGenericsWrapper<Foo, Bar>::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::TestGenerics<Foo, Bar>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

// TestGenericsWrapper<Foo, Bar>
template <typename Foo, typename Bar>
constexpr uint16_t TestGenericsWrapper<Foo, Bar>::_capnpPrivate::dataWordSize;
template <typename Foo, typename Bar>
constexpr uint16_t TestGenericsWrapper<Foo, Bar>::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename Foo, typename Bar>
constexpr ::capnp::Kind TestGenericsWrapper<Foo, Bar>::_capnpPrivate::kind;
template <typename Foo, typename Bar>
constexpr ::capnp::_::RawSchema const* TestGenericsWrapper<Foo, Bar>::_capnpPrivate::schema;
template <typename Foo, typename Bar>
constexpr ::capnp::_::RawBrandedSchema const* TestGenericsWrapper<Foo, Bar>::_capnpPrivate::brand;
template <typename Foo, typename Bar>
const ::capnp::_::RawBrandedSchema::Scope TestGenericsWrapper<Foo, Bar>::_capnpPrivate::brandScopes[] = {
  { 0xf0e4457e7c8a3afa, brandBindings + 0, 2, false},
};
template <typename Foo, typename Bar>
const ::capnp::_::RawBrandedSchema::Binding TestGenericsWrapper<Foo, Bar>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<Foo>(),
  ::capnp::_::brandBindingFor<Bar>(),
};
template <typename Foo, typename Bar>
const ::capnp::_::RawBrandedSchema::Dependency TestGenericsWrapper<Foo, Bar>::_capnpPrivate::brandDependencies[] = {
  { 16777216,  ::TestGenerics<Foo, Bar>::_capnpPrivate::brand },
};
template <typename Foo, typename Bar>
const ::capnp::_::RawBrandedSchema TestGenericsWrapper<Foo, Bar>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_f0e4457e7c8a3afa, brandScopes, brandDependencies,
  sizeof(brandScopes) / sizeof(brandScopes[0]), sizeof(brandDependencies) / sizeof(brandDependencies[0]), nullptr
};
#endif  // !CAPNP_LITE

inline bool TestGenericsWrapper2::Reader::hasValue() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestGenericsWrapper2::Builder::hasValue() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Reader TestGenericsWrapper2::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Builder TestGenericsWrapper2::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Pipeline TestGenericsWrapper2::Pipeline::getValue() {
  return  ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TestGenericsWrapper2::Builder::setValue( ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Reader value) {
  ::capnp::_::PointerHelpers< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Builder TestGenericsWrapper2::Builder::initValue() {
  return ::capnp::_::PointerHelpers< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestGenericsWrapper2::Builder::adoptValue(
    ::capnp::Orphan< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>>&& value) {
  ::capnp::_::PointerHelpers< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>> TestGenericsWrapper2::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool TestUseGenerics::Reader::hasBasic() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestUseGenerics::Builder::hasBasic() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Reader TestUseGenerics::Reader::getBasic() const {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Builder TestUseGenerics::Builder::getBasic() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Pipeline TestUseGenerics::Pipeline::getBasic() {
  return  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TestUseGenerics::Builder::setBasic( ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Reader value) {
  ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Builder TestUseGenerics::Builder::initBasic() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestUseGenerics::Builder::adoptBasic(
    ::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>>&& value) {
  ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>> TestUseGenerics::Builder::disownBasic() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool TestUseGenerics::Reader::hasInner() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool TestUseGenerics::Builder::hasInner() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner::Reader TestUseGenerics::Reader::getInner() const {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner::Builder TestUseGenerics::Builder::getInner() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner::Pipeline TestUseGenerics::Pipeline::getInner() {
  return  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void TestUseGenerics::Builder::setInner( ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner::Reader value) {
  ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner::Builder TestUseGenerics::Builder::initInner() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void TestUseGenerics::Builder::adoptInner(
    ::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner>&& value) {
  ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner> TestUseGenerics::Builder::disownInner() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool TestUseGenerics::Reader::hasInner2() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool TestUseGenerics::Builder::hasInner2() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>::Reader TestUseGenerics::Reader::getInner2() const {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>::Builder TestUseGenerics::Builder::getInner2() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>::Pipeline TestUseGenerics::Pipeline::getInner2() {
  return  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void TestUseGenerics::Builder::setInner2( ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>::Builder TestUseGenerics::Builder::initInner2() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void TestUseGenerics::Builder::adoptInner2(
    ::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>> TestUseGenerics::Builder::disownInner2() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::TestAnyPointer>::Inner2< ::capnp::Text>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool TestUseGenerics::Reader::hasUnspecified() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool TestUseGenerics::Builder::hasUnspecified() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Reader TestUseGenerics::Reader::getUnspecified() const {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Builder TestUseGenerics::Builder::getUnspecified() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Pipeline TestUseGenerics::Pipeline::getUnspecified() {
  return  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void TestUseGenerics::Builder::setUnspecified( ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Reader value) {
  ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Builder TestUseGenerics::Builder::initUnspecified() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void TestUseGenerics::Builder::adoptUnspecified(
    ::capnp::Orphan< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>>&& value) {
  ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>> TestUseGenerics::Builder::disownUnspecified() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool TestUseGenerics::Reader::hasUnspecifiedInner() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool TestUseGenerics::Builder::hasUnspecifiedInner() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>::Reader TestUseGenerics::Reader::getUnspecifiedInner() const {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>::Builder TestUseGenerics::Builder::getUnspecifiedInner() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>::Pipeline TestUseGenerics::Pipeline::getUnspecifiedInner() {
  return  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void TestUseGenerics::Builder::setUnspecifiedInner( ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>::Builder TestUseGenerics::Builder::initUnspecifiedInner() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void TestUseGenerics::Builder::adoptUnspecifiedInner(
    ::capnp::Orphan< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>> TestUseGenerics::Builder::disownUnspecifiedInner() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::capnp::AnyPointer,  ::capnp::AnyPointer>::Inner2< ::capnp::Text>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool TestUseGenerics::Reader::hasDefault() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool TestUseGenerics::Builder::hasDefault() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Reader TestUseGenerics::Reader::getDefault() const {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS),
        ::capnp::schemas::bp_d1ec544e356e99fd + 246);
}
inline  ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Builder TestUseGenerics::Builder::getDefault() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS),
        ::capnp::schemas::bp_d1ec544e356e99fd + 246);
}
#if !CAPNP_LITE
inline  ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Pipeline TestUseGenerics::Pipeline::getDefault() {
  return  ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void TestUseGenerics::Builder::setDefault( ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Builder TestUseGenerics::Builder::initDefault() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void TestUseGenerics::Builder::adoptDefault(
    ::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>> TestUseGenerics::Builder::disownDefault() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool TestUseGenerics::Reader::hasDefaultInner() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool TestUseGenerics::Builder::hasDefaultInner() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner::Reader TestUseGenerics::Reader::getDefaultInner() const {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS),
        ::capnp::schemas::bp_d1ec544e356e99fd + 336);
}
inline  ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner::Builder TestUseGenerics::Builder::getDefaultInner() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS),
        ::capnp::schemas::bp_d1ec544e356e99fd + 336);
}
#if !CAPNP_LITE
inline  ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner::Pipeline TestUseGenerics::Pipeline::getDefaultInner() {
  return  ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void TestUseGenerics::Builder::setDefaultInner( ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner::Reader value) {
  ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner::Builder TestUseGenerics::Builder::initDefaultInner() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void TestUseGenerics::Builder::adoptDefaultInner(
    ::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner>&& value) {
  ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner> TestUseGenerics::Builder::disownDefaultInner() {
  return ::capnp::_::PointerHelpers< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>::Inner>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool TestUseGenerics::Reader::hasDefaultUser() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool TestUseGenerics::Builder::hasDefaultUser() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::TestUseGenerics::Reader TestUseGenerics::Reader::getDefaultUser() const {
  return ::capnp::_::PointerHelpers< ::TestUseGenerics>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS),
        ::capnp::schemas::bp_d1ec544e356e99fd + 373);
}
inline  ::TestUseGenerics::Builder TestUseGenerics::Builder::getDefaultUser() {
  return ::capnp::_::PointerHelpers< ::TestUseGenerics>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS),
        ::capnp::schemas::bp_d1ec544e356e99fd + 373);
}
#if !CAPNP_LITE
inline  ::TestUseGenerics::Pipeline TestUseGenerics::Pipeline::getDefaultUser() {
  return  ::TestUseGenerics::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void TestUseGenerics::Builder::setDefaultUser( ::TestUseGenerics::Reader value) {
  ::capnp::_::PointerHelpers< ::TestUseGenerics>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::TestUseGenerics::Builder TestUseGenerics::Builder::initDefaultUser() {
  return ::capnp::_::PointerHelpers< ::TestUseGenerics>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void TestUseGenerics::Builder::adoptDefaultUser(
    ::capnp::Orphan< ::TestUseGenerics>&& value) {
  ::capnp::_::PointerHelpers< ::TestUseGenerics>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TestUseGenerics> TestUseGenerics::Builder::disownDefaultUser() {
  return ::capnp::_::PointerHelpers< ::TestUseGenerics>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool TestUseGenerics::Reader::hasWrapper() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool TestUseGenerics::Builder::hasWrapper() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>::Reader TestUseGenerics::Reader::getWrapper() const {
  return ::capnp::_::PointerHelpers< ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>::Builder TestUseGenerics::Builder::getWrapper() {
  return ::capnp::_::PointerHelpers< ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>::Pipeline TestUseGenerics::Pipeline::getWrapper() {
  return  ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void TestUseGenerics::Builder::setWrapper( ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>::Reader value) {
  ::capnp::_::PointerHelpers< ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>::Builder TestUseGenerics::Builder::initWrapper() {
  return ::capnp::_::PointerHelpers< ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void TestUseGenerics::Builder::adoptWrapper(
    ::capnp::Orphan< ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>>&& value) {
  ::capnp::_::PointerHelpers< ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>> TestUseGenerics::Builder::disownWrapper() {
  return ::capnp::_::PointerHelpers< ::TestGenericsWrapper< ::TestAllTypes,  ::TestAnyPointer>>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool TestUseGenerics::Reader::hasDefaultWrapper() const {
  return !_reader.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline bool TestUseGenerics::Builder::hasDefaultWrapper() {
  return !_builder.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline  ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Reader TestUseGenerics::Reader::getDefaultWrapper() const {
  return ::capnp::_::PointerHelpers< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>>::get(
      _reader.getPointerField(9 * ::capnp::POINTERS),
        ::capnp::schemas::bp_d1ec544e356e99fd + 467);
}
inline  ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Builder TestUseGenerics::Builder::getDefaultWrapper() {
  return ::capnp::_::PointerHelpers< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>>::get(
      _builder.getPointerField(9 * ::capnp::POINTERS),
        ::capnp::schemas::bp_d1ec544e356e99fd + 467);
}
#if !CAPNP_LITE
inline  ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Pipeline TestUseGenerics::Pipeline::getDefaultWrapper() {
  return  ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void TestUseGenerics::Builder::setDefaultWrapper( ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Reader value) {
  ::capnp::_::PointerHelpers< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline  ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>::Builder TestUseGenerics::Builder::initDefaultWrapper() {
  return ::capnp::_::PointerHelpers< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>>::init(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}
inline void TestUseGenerics::Builder::adoptDefaultWrapper(
    ::capnp::Orphan< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>>&& value) {
  ::capnp::_::PointerHelpers< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>>::adopt(
      _builder.getPointerField(9 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>> TestUseGenerics::Builder::disownDefaultWrapper() {
  return ::capnp::_::PointerHelpers< ::TestGenericsWrapper< ::capnp::Text,  ::TestAllTypes>>::disown(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}

inline bool TestUseGenerics::Reader::hasDefaultWrapper2() const {
  return !_reader.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline bool TestUseGenerics::Builder::hasDefaultWrapper2() {
  return !_builder.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline  ::TestGenericsWrapper2::Reader TestUseGenerics::Reader::getDefaultWrapper2() const {
  return ::capnp::_::PointerHelpers< ::TestGenericsWrapper2>::get(
      _reader.getPointerField(10 * ::capnp::POINTERS),
        ::capnp::schemas::bp_d1ec544e356e99fd + 511);
}
inline  ::TestGenericsWrapper2::Builder TestUseGenerics::Builder::getDefaultWrapper2() {
  return ::capnp::_::PointerHelpers< ::TestGenericsWrapper2>::get(
      _builder.getPointerField(10 * ::capnp::POINTERS),
        ::capnp::schemas::bp_d1ec544e356e99fd + 511);
}
#if !CAPNP_LITE
inline  ::TestGenericsWrapper2::Pipeline TestUseGenerics::Pipeline::getDefaultWrapper2() {
  return  ::TestGenericsWrapper2::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void TestUseGenerics::Builder::setDefaultWrapper2( ::TestGenericsWrapper2::Reader value) {
  ::capnp::_::PointerHelpers< ::TestGenericsWrapper2>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline  ::TestGenericsWrapper2::Builder TestUseGenerics::Builder::initDefaultWrapper2() {
  return ::capnp::_::PointerHelpers< ::TestGenericsWrapper2>::init(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}
inline void TestUseGenerics::Builder::adoptDefaultWrapper2(
    ::capnp::Orphan< ::TestGenericsWrapper2>&& value) {
  ::capnp::_::PointerHelpers< ::TestGenericsWrapper2>::adopt(
      _builder.getPointerField(10 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TestGenericsWrapper2> TestUseGenerics::Builder::disownDefaultWrapper2() {
  return ::capnp::_::PointerHelpers< ::TestGenericsWrapper2>::disown(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}

inline bool TestUseGenerics::Reader::hasListOfGenerics() const {
  return !_reader.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline bool TestUseGenerics::Builder::hasListOfGenerics() {
  return !_builder.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>::Reader TestUseGenerics::Reader::getListOfGenerics() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>>::get(
      _reader.getPointerField(11 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>::Builder TestUseGenerics::Builder::getListOfGenerics() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>>::get(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}
inline void TestUseGenerics::Builder::setListOfGenerics( ::capnp::List< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>::Builder TestUseGenerics::Builder::initListOfGenerics(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>>::init(
      _builder.getPointerField(11 * ::capnp::POINTERS), size);
}
inline void TestUseGenerics::Builder::adoptListOfGenerics(
    ::capnp::Orphan< ::capnp::List< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>>::adopt(
      _builder.getPointerField(11 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>> TestUseGenerics::Builder::disownListOfGenerics() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestGenerics< ::TestAllTypes,  ::capnp::Text>>>::disown(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}

template <typename K, typename V>
inline bool GenericMap<K, V>::Reader::hasEntries() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename K, typename V>
inline bool GenericMap<K, V>::Builder::hasEntries() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename K, typename V>
inline typename  ::capnp::List<typename  ::GenericMap<K, V>::Entry>::Reader GenericMap<K, V>::Reader::getEntries() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename K, typename V>
inline typename  ::capnp::List<typename  ::GenericMap<K, V>::Entry>::Builder GenericMap<K, V>::Builder::getEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename K, typename V>
inline void GenericMap<K, V>::Builder::setEntries(typename  ::capnp::List<typename  ::GenericMap<K, V>::Entry>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename K, typename V>
inline typename  ::capnp::List<typename  ::GenericMap<K, V>::Entry>::Builder GenericMap<K, V>::Builder::initEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename K, typename V>
inline void GenericMap<K, V>::Builder::adoptEntries(
    ::capnp::Orphan< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename K, typename V>
inline ::capnp::Orphan< ::capnp::List<typename  ::GenericMap<K, V>::Entry>> GenericMap<K, V>::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

template <typename K, typename V>
inline bool GenericMap<K, V>::Reader::hasA() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename K, typename V>
inline bool GenericMap<K, V>::Builder::hasA() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename K, typename V>
inline  ::capnp::List< ::TestAllTypes>::Reader GenericMap<K, V>::Reader::getA() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestAllTypes>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
template <typename K, typename V>
inline  ::capnp::List< ::TestAllTypes>::Builder GenericMap<K, V>::Builder::getA() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestAllTypes>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
template <typename K, typename V>
inline void GenericMap<K, V>::Builder::setA( ::capnp::List< ::TestAllTypes>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestAllTypes>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
template <typename K, typename V>
inline  ::capnp::List< ::TestAllTypes>::Builder GenericMap<K, V>::Builder::initA(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestAllTypes>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
template <typename K, typename V>
inline void GenericMap<K, V>::Builder::adoptA(
    ::capnp::Orphan< ::capnp::List< ::TestAllTypes>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TestAllTypes>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
template <typename K, typename V>
inline ::capnp::Orphan< ::capnp::List< ::TestAllTypes>> GenericMap<K, V>::Builder::disownA() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TestAllTypes>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

template <typename K, typename V>
inline bool GenericMap<K, V>::Reader::hasB() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
template <typename K, typename V>
inline bool GenericMap<K, V>::Builder::hasB() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
template <typename K, typename V>
inline typename  ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>::Reader GenericMap<K, V>::Reader::getB() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
template <typename K, typename V>
inline typename  ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>::Builder GenericMap<K, V>::Builder::getB() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
template <typename K, typename V>
inline void GenericMap<K, V>::Builder::setB(typename  ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
template <typename K, typename V>
inline void GenericMap<K, V>::Builder::setB(::kj::ArrayPtr<const typename  ::capnp::List<typename  ::GenericMap<K, V>::Entry>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
template <typename K, typename V>
inline typename  ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>::Builder GenericMap<K, V>::Builder::initB(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
template <typename K, typename V>
inline void GenericMap<K, V>::Builder::adoptB(
    ::capnp::Orphan< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
template <typename K, typename V>
inline ::capnp::Orphan< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>> GenericMap<K, V>::Builder::disownB() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

template <typename K, typename V>
inline bool GenericMap<K, V>::Reader::hasC() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
template <typename K, typename V>
inline bool GenericMap<K, V>::Builder::hasC() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
template <typename K, typename V>
inline typename  ::capnp::List< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>::Reader GenericMap<K, V>::Reader::getC() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
template <typename K, typename V>
inline typename  ::capnp::List< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>::Builder GenericMap<K, V>::Builder::getC() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
template <typename K, typename V>
inline void GenericMap<K, V>::Builder::setC(typename  ::capnp::List< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
template <typename K, typename V>
inline void GenericMap<K, V>::Builder::setC(::kj::ArrayPtr<const typename  ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
template <typename K, typename V>
inline typename  ::capnp::List< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>::Builder GenericMap<K, V>::Builder::initC(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
template <typename K, typename V>
inline void GenericMap<K, V>::Builder::adoptC(
    ::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
template <typename K, typename V>
inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>> GenericMap<K, V>::Builder::disownC() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::List<typename  ::GenericMap<K, V>::Entry>>>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

template <typename K, typename V>
inline bool GenericMap<K, V>::Entry::Reader::hasKey() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename K, typename V>
inline bool GenericMap<K, V>::Entry::Builder::hasKey() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename K, typename V>
inline  ::capnp::ReaderFor<K> GenericMap<K, V>::Entry::Reader::getKey() const {
  return ::capnp::_::PointerHelpers<K>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename K, typename V>
inline  ::capnp::BuilderFor<K> GenericMap<K, V>::Entry::Builder::getKey() {
  return ::capnp::_::PointerHelpers<K>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename K, typename V>
inline  ::capnp::PipelineFor<K> GenericMap<K, V>::Entry::Pipeline::getKey() {
  return  ::capnp::PipelineFor<K>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename K, typename V>
inline void GenericMap<K, V>::Entry::Builder::setKey( ::capnp::ReaderFor<K> value) {
  ::capnp::_::PointerHelpers<K>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename K, typename V>
inline  ::capnp::BuilderFor<K> GenericMap<K, V>::Entry::Builder::initKey() {
  return ::capnp::_::PointerHelpers<K>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename K, typename V>
inline  ::capnp::BuilderFor<K> GenericMap<K, V>::Entry::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers<K>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename K, typename V>
inline void GenericMap<K, V>::Entry::Builder::adoptKey(
    ::capnp::Orphan<K>&& value) {
  ::capnp::_::PointerHelpers<K>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename K, typename V>
inline ::capnp::Orphan<K> GenericMap<K, V>::Entry::Builder::disownKey() {
  return ::capnp::_::PointerHelpers<K>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

template <typename K, typename V>
inline bool GenericMap<K, V>::Entry::Reader::hasValue() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename K, typename V>
inline bool GenericMap<K, V>::Entry::Builder::hasValue() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename K, typename V>
inline  ::capnp::ReaderFor<V> GenericMap<K, V>::Entry::Reader::getValue() const {
  return ::capnp::_::PointerHelpers<V>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
template <typename K, typename V>
inline  ::capnp::BuilderFor<V> GenericMap<K, V>::Entry::Builder::getValue() {
  return ::capnp::_::PointerHelpers<V>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename K, typename V>
inline  ::capnp::PipelineFor<V> GenericMap<K, V>::Entry::Pipeline::getValue() {
  return  ::capnp::PipelineFor<V>(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
template <typename K, typename V>
inline void GenericMap<K, V>::Entry::Builder::setValue( ::capnp::ReaderFor<V> value) {
  ::capnp::_::PointerHelpers<V>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
template <typename K, typename V>
inline  ::capnp::BuilderFor<V> GenericMap<K, V>::Entry::Builder::initValue() {
  return ::capnp::_::PointerHelpers<V>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
template <typename K, typename V>
inline  ::capnp::BuilderFor<V> GenericMap<K, V>::Entry::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers<V>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
template <typename K, typename V>
inline void GenericMap<K, V>::Entry::Builder::adoptValue(
    ::capnp::Orphan<V>&& value) {
  ::capnp::_::PointerHelpers<V>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
template <typename K, typename V>
inline ::capnp::Orphan<V> GenericMap<K, V>::Entry::Builder::disownValue() {
  return ::capnp::_::PointerHelpers<V>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

// GenericMap<K, V>::Entry
template <typename K, typename V>
constexpr uint16_t GenericMap<K, V>::Entry::_capnpPrivate::dataWordSize;
template <typename K, typename V>
constexpr uint16_t GenericMap<K, V>::Entry::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename K, typename V>
constexpr ::capnp::Kind GenericMap<K, V>::Entry::_capnpPrivate::kind;
template <typename K, typename V>
constexpr ::capnp::_::RawSchema const* GenericMap<K, V>::Entry::_capnpPrivate::schema;
template <typename K, typename V>
constexpr ::capnp::_::RawBrandedSchema const* GenericMap<K, V>::Entry::_capnpPrivate::brand;
template <typename K, typename V>
const ::capnp::_::RawBrandedSchema::Scope GenericMap<K, V>::Entry::_capnpPrivate::brandScopes[] = {
  { 0x82ebb0222244f631, brandBindings + 0, 2, false},
};
template <typename K, typename V>
const ::capnp::_::RawBrandedSchema::Binding GenericMap<K, V>::Entry::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<K>(),
  ::capnp::_::brandBindingFor<V>(),
};
template <typename K, typename V>
const ::capnp::_::RawBrandedSchema GenericMap<K, V>::Entry::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_b91e3132e9c188b4, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

// GenericMap<K, V>
template <typename K, typename V>
constexpr uint16_t GenericMap<K, V>::_capnpPrivate::dataWordSize;
template <typename K, typename V>
constexpr uint16_t GenericMap<K, V>::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename K, typename V>
constexpr ::capnp::Kind GenericMap<K, V>::_capnpPrivate::kind;
template <typename K, typename V>
constexpr ::capnp::_::RawSchema const* GenericMap<K, V>::_capnpPrivate::schema;
template <typename K, typename V>
constexpr ::capnp::_::RawBrandedSchema const* GenericMap<K, V>::_capnpPrivate::brand;
template <typename K, typename V>
const ::capnp::_::RawBrandedSchema::Scope GenericMap<K, V>::_capnpPrivate::brandScopes[] = {
  { 0x82ebb0222244f631, brandBindings + 0, 2, false},
};
template <typename K, typename V>
const ::capnp::_::RawBrandedSchema::Binding GenericMap<K, V>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<K>(),
  ::capnp::_::brandBindingFor<V>(),
};
template <typename K, typename V>
const ::capnp::_::RawBrandedSchema::Dependency GenericMap<K, V>::_capnpPrivate::brandDependencies[] = {
  { 16777216,  ::GenericMap<K, V>::Entry::_capnpPrivate::brand },
  { 16777218,  ::GenericMap<K, V>::Entry::_capnpPrivate::brand },
  { 16777219,  ::GenericMap<K, V>::Entry::_capnpPrivate::brand },
};
template <typename K, typename V>
const ::capnp::_::RawBrandedSchema GenericMap<K, V>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_82ebb0222244f631, brandScopes, brandDependencies,
  sizeof(brandScopes) / sizeof(brandScopes[0]), sizeof(brandDependencies) / sizeof(brandDependencies[0]), nullptr
};
#endif  // !CAPNP_LITE


#endif  // CAPNP_INCLUDED_d6eccba9557a7f51_
